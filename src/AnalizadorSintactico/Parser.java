//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"

package AnalizadorSintactico;

import java.util.Vector;

import AnalizadorLexico.AnalizadorLexico;
import AnalizadorSintactico.AnalizadorSintactico;
import AnalizadorLexico.Atributo;

//#line 27 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short id=257;
public final static short cte=258;
public final static short If=259;
public final static short then=260;
public final static short Else=261;
public final static short end_if=262;
public final static short out=263;
public final static short fun=264;
public final static short Return=265;
public final static short BREAK=266;
public final static short i32=267;
public final static short when=268;
public final static short For=269;
public final static short CONTINUE=270;
public final static short f32=271;
public final static short cadena=272;
public final static short menorigual=273;
public final static short mayorigual=274;
public final static short distinto=275;
public final static short opasignacion=276;
public final static short Const=277;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    2,    2,    2,    2,    4,    4,    4,    5,
    5,    6,    6,    6,    6,    8,    8,    3,    3,    3,
    3,   10,   10,   10,   10,   10,   10,   16,   16,   11,
   11,   11,   11,   11,   11,   13,   13,   13,   23,   23,
   24,   24,   25,   25,   26,   14,   14,   14,   14,   28,
   28,   28,   28,   28,   27,   31,   31,   31,   31,   31,
   31,   31,   34,   34,   30,   30,   30,   30,   32,   32,
   32,   32,   32,   32,   36,   36,   37,   37,   38,   38,
   38,   38,   38,   38,   39,   39,   40,   40,   43,   43,
   33,   33,   33,   33,   33,   42,   42,   42,   42,   42,
   42,   42,   42,   41,   41,    7,    7,    7,   17,   17,
   17,   46,   48,   48,   18,   18,   18,   18,   18,   18,
   19,   19,   19,   19,   19,   19,   49,   49,   50,   50,
   51,   51,   51,   51,   51,   51,   52,   52,   53,   53,
   15,   15,   15,   15,   54,   54,   54,   55,   55,   47,
   47,   47,   47,   47,   44,   45,   45,    9,    9,    9,
    9,    9,    9,    9,    9,   20,   21,   21,   21,   22,
   22,   22,   22,   35,   35,   35,   35,   57,   58,   58,
   60,   29,   29,   61,   61,   61,   59,   59,   59,   59,
   56,   56,   56,   56,   56,   56,   12,   12,
};
final static short yylen[] = {                            2,
    2,    1,    4,    3,    2,    2,    3,    3,    3,    1,
    3,    3,    3,    3,    2,    1,    2,    1,    1,    2,
    2,    3,    3,    2,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    2,    2,    1,    3,    2,    3,    3,
    2,    2,    2,    0,    5,    3,    5,    7,    2,    5,
    4,    4,    3,    5,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    1,    2,    2,    1,    1,    6,    8,
    8,    5,    8,    4,    3,    1,    3,    1,    6,    8,
    8,    5,    8,    4,    3,    1,    3,    1,    4,    1,
   12,   12,   11,   13,   14,    1,    1,    1,    1,    1,
    1,    1,    2,    1,    2,    1,    2,    1,    4,    3,
    1,    4,    3,    1,    5,    5,    5,    4,    3,    5,
    6,    8,    8,    5,    8,    4,    3,    1,    3,    1,
    6,    8,    8,    5,    8,    4,    3,    1,    3,    1,
    7,    7,    7,    7,    3,    3,    3,    4,    1,   12,
   12,   11,   13,   14,    3,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    1,    2,    3,    2,    2,
    4,    4,    2,    3,    2,    2,    1,    3,    1,    2,
    4,    3,    1,    3,    3,    1,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,
};
final static short yydefred[] = {                         0,
    2,    0,    0,    0,    0,    0,    0,    0,  197,    0,
    0,    0,  198,    0,    0,    0,    0,    0,   26,   18,
   19,    0,   25,   27,   30,   31,   32,   33,    0,    0,
    0,  111,  166,  106,    0,  108,    0,  187,  188,    0,
    0,    0,    0,    0,    0,  186,  190,    0,    0,    0,
    0,    0,  169,    0,  167,    0,    0,    0,    0,    0,
  173,    0,  170,    0,    0,    0,    0,   10,    0,    0,
    0,    6,   20,   21,   24,   36,    0,   34,   35,    0,
    0,    0,    0,   49,    0,  107,    0,    0,    0,    0,
    0,  189,  193,  194,  196,  195,  156,  157,  191,  192,
    0,    0,    0,    0,  128,    0,  175,    0,    0,    0,
    0,    0,   39,   40,  168,    0,    0,    0,    0,    0,
    0,    0,    0,   15,    0,    0,    9,    8,    7,    0,
    4,  119,    0,   23,   38,   22,    0,   42,    0,    0,
   41,    0,   46,    0,    0,  109,  114,    0,  112,    0,
  179,  174,    0,    0,    0,   29,    0,  126,  184,  185,
  118,    0,    0,    0,  155,    0,    0,    0,    0,    0,
  172,  171,   14,   13,   12,   11,    3,   37,   43,    0,
    0,    0,    0,  181,  180,  124,    0,    0,  127,   28,
  117,  116,  115,  120,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   68,   56,   58,    0,
    0,    0,   60,    0,   67,   57,   59,    0,   47,    0,
  113,    0,  130,    0,  121,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   61,   62,   45,   66,   65,    0,    0,    0,    0,    0,
  146,  145,  147,  143,  141,  144,  142,    0,    0,    0,
    0,    0,    0,   76,    0,    0,   53,    0,    0,    0,
   48,    0,  129,  125,  123,  122,    0,    0,    0,    0,
    0,   64,    0,   74,   52,    0,   51,    0,    0,    0,
    0,    0,    0,    0,   72,    0,    0,   75,   63,   54,
   50,    0,    0,    0,    0,    0,    0,  149,    0,  158,
  159,  160,  162,  163,    0,  161,    0,    0,    0,    0,
    0,   78,    0,   69,    0,    0,    0,    0,    0,    0,
   16,    0,  164,  165,  152,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  138,    0,    0,
   17,  151,  150,    0,    0,   77,   73,   71,   70,    0,
    0,    0,    0,    0,    0,  136,  148,  153,    0,    0,
    0,    0,  154,  134,    0,    0,  137,    0,    0,    0,
    0,    0,   96,   97,  100,  101,   99,   98,  102,   90,
    0,    0,    0,    0,  140,    0,  131,    0,    0,    0,
  104,    0,  103,   93,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   86,    0,  105,   92,   91,    0,  139,
  135,  133,  132,    0,    0,    0,   84,   89,   94,   95,
   82,    0,    0,   85,    0,    0,   88,   79,    0,    0,
    0,   87,   83,   81,   80,
};
final static short yydgoto[] = {                          2,
    3,   17,  196,   19,   67,   68,   37,  330,  308,  309,
   21,   22,   77,   23,   24,  157,   25,   26,   27,   28,
   29,   30,   31,   83,  140,   84,  212,  315,   43,  214,
  264,  216,  388,  283,   44,  265,  323,  389,  413,  436,
  400,  390,  391,   58,  101,   32,   33,  149,  106,  224,
  316,  349,  396,  197,  317,  102,   45,  150,   46,   47,
   48,
};
final static short yysindex[] = {                      -220,
    0,    0, 1021,   -9,  218,  -26,   42,   97,    0,   71,
   89,  -48,    0,   38, 1159, -211,  -27, 1036,    0,    0,
    0,  -44,    0,    0,    0,    0,    0,    0, -189, -175,
   60,    0,    0,    0,  -43,    0,  212,    0,    0,   62,
  -42, -149,  -14, 1185,   78,    0,    0,  127, -118,   -8,
  115,  -94,    0,  123,    0,  309,  -91,  144,   -7,  -68,
    0,  135,    0,  -60,  -57,  -52,   12,    0, 1060,  -50,
 1159,    0,    0,    0,    0,    0,   68,    0,    0,  -34,
  185,   18,  107,    0,  263,    0,  289,  102,  -80,  -42,
  332,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -42,  -42, 1239,  705,    0,  119,    0,  -42,  -42,  330,
  -35,  137,    0,    0,    0,  142,  -36,  145,  334,  161,
   -7,  166,  366,    0,  170, -169,    0,    0,    0,  173,
    0,    0, 1086,    0,    0,    0,  178,    0, -130,  324,
    0, -157,    0,  192,  188,    0,    0,  197,    0,  248,
    0,    0,  127,  160, -128,    0, 1190,    0,    0,    0,
    0,  400,   10,  401,    0, 1101,  778, 1101,  403,  205,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  491,
  139,   -7,  405,    0,    0,    0, 1274,  407,    0,    0,
    0,    0,    0,    0, 1159, 1122,  408, 1101,  415,  419,
  -91,  333,   22,  218,  281,   91,    0,    0,    0,  223,
  224,  362,    0,  491,    0,    0,    0, -157,    0,  230,
    0,  705,    0, -228,    0,  800,  233,  235,  438,  242,
  243,  441,  -91,  -91,  -40,  380,  -42,  143,   -7,  250,
    0,    0,    0,    0,    0,  467,  451, 1214,  454,   40,
    0,    0,    0,    0,    0,    0,    0,  160,  458,  460,
  481, 1209,  520,    0,  268,  409,    0,  466,  269,   -7,
    0,  -91,    0,    0,    0,    0,  272,  160,  160,  277,
 -112,    0, 1234,    0,    0,   67,    0,  477,  279,  483,
  -15,  286,  287,   -7,    0, 1254,  488,    0,    0,    0,
    0,  -91,  340,  160,  218,  565,  425,    0,  270,    0,
    0,    0,    0,    0,  294,    0,  296,  513,  514,  298,
  520,    0, -221,    0,  498,  -91,  -91,  301,  147,  456,
    0,  306,    0,    0,    0,  425,  425,  504, 1269,  507,
   77,  160,  510,  515,  533,  736,  565,    0,  319,  519,
    0,    0,    0,  323,  -91,    0,    0,    0,    0,  328,
  160,  160,  425, -102,  824,    0,    0,    0,  527,  117,
  335,  337,    0,    0,  850,  528,    0,  160,  218, 1143,
  865,  339,    0,    0,    0,    0,    0,    0,    0,    0,
  342,  549,  558,  565,    0, -218,    0,  345,  174,  889,
    0,  347,    0,    0,  865,  865,  911,  547,   93,  567,
  927, 1143,  367,    0,  563,    0,    0,    0,  368,    0,
    0,    0,    0,  865,  -89,  949,    0,    0,    0,    0,
    0,  975,  569,    0, 1143, -203,    0,    0, 1000,  570,
  112,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  630,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  350,    0,    0,   17,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   20,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  508,    0,    0,    0,    0,    0,   73,   95,    0,    0,
  762,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   45,  -32,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  511,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,  443,    0,    0,  502,  -29, -324,  532,   -3,
 1329,  -18,    0,    0,    0,  411,  165,  305,    0,  186,
  445,  585,    0, -120,    0,  -56,    0,  673,  -30,    0,
  484,    0, 1327,  326, -188,  386,    0,    0,  244,    0,
 -380, 1147, -331,  -55, -239,    0,  616,    0,  551,    0,
    0,  310,    0, -104,  146,  601,  617,    0,  -66,    0,
  559,
};
final static int YYTABLESIZE=1666;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         20,
  119,  117,   42,   36,  167,  163,   88,  178,  178,   64,
   63,   20,   82,   50,   73,  236,  183,   86,  277,    5,
   86,  181,  365,  151,   16,  307,  143,  249,   97,  120,
   98,  426,  112,  250,  340,  126,    1,  408,  292,  293,
  341,  159,  160,  409,  182,   99,   96,  100,   35,  402,
  119,   36,  440,   36,  439,  130,  183,  183,  441,  183,
   70,  183,  199,  200,  328,   73,   78,   20,  193,  407,
  129,  154,  187,  418,  419,  183,  183,  183,  183,  235,
   79,   52,   36,  185,  182,  182,  174,  182,  175,  182,
  178,  170,  430,  229,  110,   71,   66,  246,  276,   80,
   81,   90,  360,  182,  182,  182,  182,  306,   92,    9,
   57,  137,  187,   13,  187,  187,  329,  187,  107,  187,
  179,  371,  372,   82,  219,  301,  136,  186,   60,   73,
  240,  187,  187,  188,  110,  359,    9,  110,  398,  183,
   13,  183,    5,  295,   97,  232,   98,   81,  296,  297,
  142,  423,  220,  374,  113,   55,   16,  381,  375,  376,
  146,  114,   20,   20,   20,   56,  431,  182,  108,  182,
  445,  432,  433,  109,  238,  147,  207,  259,  260,   81,
  148,  115,  218,  268,  118,   97,   16,   98,  121,  271,
  399,   20,   73,  122,   20,  187,  123,  187,  124,   82,
  125,  267,   97,  127,   98,  132,  266,   61,   62,  269,
  244,   75,   76,   16,   38,   39,  290,  110,   34,  110,
  162,  138,   73,  166,  178,   85,  178,  178,  261,   40,
  178,  178,  178,  178,  178,  178,  178,  178,  178,  380,
  289,    4,  139,  305,  178,   49,  325,    6,    7,  205,
    8,    9,   10,   11,   12,   13,   42,   41,   93,   94,
   95,   14,   42,  111,  320,  192,   34,  128,   34,  347,
  343,  344,  183,  183,  141,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  184,  183,
  183,  183,   42,  183,   65,  275,  412,   34,   51,  369,
  182,  182,  144,  182,  182,  182,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,   80,  182,  182,  182,
  237,  182,  300,  134,  135,   42,    9,   56,  187,  187,
   13,  187,  358,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  208,   59,  145,  239,  422,  187,
  110,  110,   53,  110,   54,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  382,  444,   99,   96,
  100,  110,  152,  203,  158,  379,  382,  382,  208,    6,
    7,  205,    8,    9,   10,  206,   12,   13,  161,  177,
  234,  233,  164,   14,   86,  382,  382,  327,  326,  165,
  208,  382,  382,    4,  168,  305,  346,  382,  382,    6,
    7,  205,    8,    9,   10,   11,   12,   13,  169,   16,
  382,  171,  382,   14,  172,  173,  208,  208,  382,   65,
  203,  382,  379,  411,  178,  382,    6,    7,  205,    8,
    9,   10,  206,   12,   13,   18,  180,  208,  182,  286,
   14,   97,  332,   98,  183,  310,   85,   69,  191,  194,
  208,  201,  202,  221,   16,  225,  228,  285,   87,   39,
  310,  310,  177,  230,   38,   39,  312,  231,  241,  242,
   11,  353,  354,   40,  209,  208,  243,  247,  253,   40,
  254,  312,  312,  310,  310,   16,  255,  256,  257,  258,
  310,  310,  263,  208,   38,   39,  270,   81,  373,  272,
  310,  310,  274,  133,  312,  312,  278,  279,  209,   40,
  280,  312,  312,  284,  287,  333,  288,  310,  291,  310,
   16,  312,  312,  294,  383,  302,  303,   38,   39,  310,
  209,  304,  318,  319,  383,  383,  324,  306,  312,  334,
  312,  335,   40,  336,  337,  338,  342,  345,  310,   16,
  312,  352,  355,  383,  383,  357,  209,  209,  361,  383,
  383,  310,  362,  363,  366,  383,  383,  367,  368,  312,
  350,   93,   94,   95,  370,  378,  397,  209,  383,  405,
  383,  392,  312,  393,  403,  311,  383,  404,  406,  383,
  209,  410,  417,  383,   16,  421,  177,  424,  177,  177,
  311,  311,  177,  177,  177,  177,  177,  177,  177,  177,
  177,  428,  427,  429,  210,  209,  177,  438,  443,    1,
   44,  176,  248,  311,  311,   55,  203,  226,  204,  262,
  311,  311,    6,  209,  205,    8,  339,  281,  206,   12,
  311,  311,   89,  155,  425,  364,  116,   91,  210,  153,
    0,    0,    0,  215,    0,    0,    0,  311,    0,  311,
    0,    0,    0,    0,  384,    0,    0,    0,    0,  311,
  210,    4,    0,  305,  384,  384,    0,    6,    7,  205,
    8,    9,   10,   11,   12,   13,    0,  245,  311,    0,
    0,   14,    0,  384,  384,    0,  210,  210,    0,  384,
  384,  311,    4,    0,  305,  384,  384,    0,    6,    7,
  205,    8,    9,   10,   11,   12,   13,  210,  384,    0,
  384,    0,   14,    0,    0,  313,  384,    0,    0,  384,
  210,    0,    0,  384,   16,    0,  282,  203,    0,  204,
  313,  313,    0,    6,    7,  205,    8,    9,   10,  206,
   12,   13,    0,    0,  211,  210,  299,   14,    0,    0,
    0,    0,    0,  313,  313,   16,  203,    0,  204,  322,
  313,  313,    6,  210,  205,    8,    0,    0,  206,   12,
  313,  313,    0,    0,    0,    0,    0,    0,  211,    0,
    0,  176,    0,    0,  282,    0,    0,  313,    0,  313,
    0,    0,    0,    0,  385,    0,    0,   16,    0,  313,
  211,    4,  299,  305,  385,  385,    0,    6,    7,  205,
    8,    9,   10,   11,   12,   13,    0,  331,  313,   16,
    0,   14,    0,  385,  385,    0,  211,  211,    0,  385,
  385,  313,  213,    0,    0,  385,  385,    0,  347,    0,
  348,  351,    0,   16,    0,    0,    0,  211,  385,    0,
  385,    0,    0,    0,    0,  314,  385,  348,  331,  385,
  211,    0,    0,  385,  176,    0,  213,    0,    0,   16,
  314,  314,    0,    0,    0,    0,  351,    0,    0,    0,
  195,    0,    0,    0,   16,  211,  395,    0,  213,    0,
    0,    0,    0,  314,  314,    0,    0,    0,    0,    0,
  314,  314,    0,  211,  252,  331,    0,    0,   16,    0,
  314,  314,    0,    0,  213,  213,    0,    0,  351,    0,
    0,    0,    0,    0,    0,    0,    0,  314,  377,  314,
   16,    0,    0,    0,  386,  213,    0,    0,    0,  314,
    0,    4,    0,    5,  386,  386,   16,    6,  213,    0,
    8,    0,  394,   11,   12,    0,    0,    0,  314,    0,
    0,    0,    0,  386,  386,    0,    0,  380,   16,  386,
  386,  314,    4,  213,  305,  386,  386,    0,    6,    7,
  205,    8,    9,   10,   11,   12,   13,    0,  386,    0,
  386,  213,   14,  415,   16,    0,  386,    0,  176,  386,
  176,  176,    0,  386,  176,  176,  176,  176,  176,  176,
  176,  176,  176,    0,    4,  420,    5,  198,  176,   16,
    6,    7,  387,    8,    9,   10,   11,   12,   13,  412,
    0,    0,  387,  387,   14,  251,    4,    0,    5,    0,
   16,    0,    6,    7,    0,    8,    9,   10,   11,   12,
   13,  387,  387,  434,    0,   16,   14,  387,  387,    0,
    4,    0,  305,  387,  387,    0,    6,    7,  205,    8,
    9,   10,   11,   12,   13,    0,  387,  435,  387,   16,
   14,    0,    0,    0,  387,    0,    4,  387,  305,    0,
    0,  387,    6,    7,  205,    8,    9,   10,   11,   12,
   13,  203,    0,  379,  442,   16,   14,    6,    7,  205,
    8,    9,   10,  206,   12,   13,    0,    0,    0,    0,
   16,   14,    0,   15,    0,  203,    0,  379,    0,    0,
    0,    6,    7,  205,    8,    9,   10,  206,   12,   13,
   72,   16,    0,    0,    0,   14,    0,    4,    0,  305,
    0,    0,    0,    6,    7,  205,    8,    9,   10,   11,
   12,   13,   16,  203,  131,  379,    0,   14,    0,    6,
    7,  205,    8,    9,   10,  206,   12,   13,   16,    0,
    0,    0,    0,   14,    0,  203,    0,  379,    0,    0,
  177,    6,    7,  205,    8,    9,   10,  206,   12,   13,
    0,    0,    0,  195,   16,   14,    0,    0,    0,   16,
    0,  203,    0,  379,    0,    0,    0,    6,    7,  205,
    8,    9,   10,  206,   12,   13,  227,    0,   16,    0,
    0,   14,    0,   16,    0,    0,  203,    0,  379,    0,
    0,    0,    6,    7,  205,    8,    9,   10,  206,   12,
   13,    0,    0,   16,    0,    0,   14,    4,   16,    5,
    0,    0,    0,    6,    7,    0,    8,    9,   10,   11,
   12,   13,    4,   16,    5,    0,    0,   14,    6,    7,
    0,    8,    9,   10,   11,   12,   13,  104,   16,    0,
    0,    0,   14,   16,  189,    0,    4,    0,    5,    0,
    0,    0,    6,    7,    0,    8,    9,   10,   11,   12,
   13,  263,    0,    0,    0,    0,   14,    0,  273,    0,
    0,    0,    4,    0,    5,    0,   74,    0,    6,    7,
    0,    8,    9,   10,   11,   12,   13,    4,  298,    5,
    0,  104,   14,    6,    7,    0,    8,    9,   10,   11,
   12,   13,  105,    0,    0,    0,  321,   14,    4,    0,
    5,    0,    0,    0,    6,    7,    0,    8,    9,   10,
   11,   12,   13,  356,    0,    0,  222,   74,   14,  203,
    0,  379,    0,    0,    0,    6,    7,  205,    8,    9,
   10,  206,   12,   13,    0,    4,    0,    5,    0,   14,
    0,    6,    7,    0,    8,    9,   10,   11,   12,   13,
    0,  105,  156,    0,    0,   14,    0,    0,    0,    0,
    0,    4,    0,    5,  103,    0,    4,    6,    5,    0,
    8,    0,    6,   11,   12,    8,    0,    0,   11,   12,
    0,   74,    0,    0,    0,  203,    0,  204,    0,    0,
    4,    6,    5,  205,    8,    0,    6,  206,   12,    8,
    0,    0,   11,   12,    0,  190,    0,    0,    0,    0,
  203,    0,  204,    0,    0,    4,    6,    5,  205,    8,
    0,    6,  206,   12,    8,    0,  217,   11,   12,    0,
  203,    0,  204,    0,    0,  223,    6,    0,  205,    8,
    0,    0,  206,   12,   74,  203,  401,  204,    0,    0,
    4,    6,    5,  205,    8,    0,    6,  206,   12,    8,
  217,    0,   11,   12,    0,  414,  416,    0,    0,    0,
  156,    0,    0,    0,   74,    0,    0,  414,  401,    0,
    0,    0,  217,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  416,    0,    0,    0,  190,    0,  437,    0,
    0,  401,    0,    0,    0,  416,    0,    0,  217,  217,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  217,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  217,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  217,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  217,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          3,
   58,   57,   45,   61,   41,   41,   37,   40,   41,   58,
   59,   15,   31,   40,   18,  204,    0,   61,  258,    0,
   61,  142,  347,   90,   40,   41,   83,  256,   43,   59,
   45,  412,   41,  262,  256,   65,  257,  256,  278,  279,
  262,  108,  109,  262,    0,   60,   61,   62,   58,  381,
   58,   61,  256,   61,  435,   44,   40,   41,  262,   43,
  272,   45,  167,  168,  304,   69,  256,   71,   59,  394,
   59,  102,    0,  405,  406,   59,   60,   61,   62,   58,
  256,   40,   61,  150,   40,   41,  256,   43,  258,   45,
  123,  121,  424,  198,    0,  123,   59,  218,   59,  257,
   41,   40,  342,   59,   60,   61,   62,  123,  258,  267,
   40,   44,   40,  271,   42,   43,  305,   45,   41,   47,
  139,  361,  362,  142,  181,   59,   59,  256,   40,  133,
   40,   59,  261,  262,   40,   59,  267,  256,  378,  123,
  271,  125,  123,  256,   43,  201,   45,   41,  261,  262,
   44,   59,  182,  256,   40,   59,   40,   41,  261,  262,
   59,  256,  166,  167,  168,  257,  256,  123,   42,  125,
   59,  261,  262,   47,  205,  256,  180,  233,  234,   41,
  261,   59,   44,   41,   41,   43,   40,   45,  257,  246,
  379,  195,  196,   59,  198,  123,  257,  125,  256,  218,
  258,   59,   43,  256,   45,  256,  237,  256,  257,  239,
  214,  256,  257,   40,  257,  258,  272,  123,  276,  125,
  256,  256,  226,  260,  257,  269,  259,  260,  269,  272,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  123,
  270,  257,   58,  259,  277,  272,  302,  263,  264,  265,
  266,  267,  268,  269,  270,  271,   45,   40,  273,  274,
  275,  277,   45,  272,  294,  256,  276,  256,  276,  123,
  326,  327,  256,  257,  257,  259,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,   41,  273,
  274,  275,   45,  277,  257,  256,  123,  276,  257,  355,
  256,  257,   40,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  257,  273,  274,  275,
   40,  277,  256,  256,  257,   45,  267,  257,  256,  257,
  271,  259,  256,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  180,  257,   58,  257,  256,  277,
  256,  257,  256,  259,  258,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  370,  256,   60,   61,
   62,  277,   41,  257,  256,  259,  380,  381,  214,  263,
  264,  265,  266,  267,  268,  269,  270,  271,   59,   40,
   58,   59,  256,  277,   61,  399,  400,   58,   59,  258,
  236,  405,  406,  257,  260,  259,  260,  411,  412,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  258,   40,
  424,  256,  426,  277,   59,  256,  262,  263,  432,  257,
  257,  435,  259,  260,  257,  439,  263,  264,  265,  266,
  267,  268,  269,  270,  271,    3,  123,  283,  257,   41,
  277,   43,  307,   45,  258,  291,  269,   15,   59,   59,
  296,   59,  258,   59,   40,   59,   59,   59,  257,  258,
  306,  307,  123,   59,  257,  258,  291,   59,  256,  256,
  269,  336,  337,  272,  180,  321,  125,  258,  256,  272,
  256,  306,  307,  329,  330,   40,   59,  256,  256,   59,
  336,  337,  123,  339,  257,  258,  257,   41,  363,   59,
  346,  347,   59,   71,  329,  330,   59,   58,  214,  272,
   40,  336,  337,  256,   59,  256,  258,  363,  257,  365,
   40,  346,  347,  257,  370,   59,  258,  257,  258,  375,
  236,   59,  257,  257,  380,  381,   59,  123,  363,  256,
  365,  256,  272,   41,   41,  258,   59,  257,  394,   40,
  375,  256,   59,  399,  400,   59,  262,  263,   59,  405,
  406,  407,   58,   41,  256,  411,  412,   59,  256,  394,
  125,  273,  274,  275,  257,   59,   59,  283,  424,   41,
  426,  257,  407,  257,  256,  291,  432,  256,   41,  435,
  296,  257,  256,  439,   40,   59,  257,   41,  259,  260,
  306,  307,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   59,  256,  256,  180,  321,  277,   59,   59,    0,
  123,  130,  222,  329,  330,  125,  257,  195,  259,  260,
  336,  337,  263,  339,  265,  266,  321,  262,  269,  270,
  346,  347,   37,  103,  411,  346,   56,   41,  214,  101,
   -1,   -1,   -1,  180,   -1,   -1,   -1,  363,   -1,  365,
   -1,   -1,   -1,   -1,  370,   -1,   -1,   -1,   -1,  375,
  236,  257,   -1,  259,  380,  381,   -1,  263,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,  214,  394,   -1,
   -1,  277,   -1,  399,  400,   -1,  262,  263,   -1,  405,
  406,  407,  257,   -1,  259,  411,  412,   -1,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  283,  424,   -1,
  426,   -1,  277,   -1,   -1,  291,  432,   -1,   -1,  435,
  296,   -1,   -1,  439,   40,   -1,  263,  257,   -1,  259,
  306,  307,   -1,  263,  264,  265,  266,  267,  268,  269,
  270,  271,   -1,   -1,  180,  321,  283,  277,   -1,   -1,
   -1,   -1,   -1,  329,  330,   40,  257,   -1,  259,  296,
  336,  337,  263,  339,  265,  266,   -1,   -1,  269,  270,
  346,  347,   -1,   -1,   -1,   -1,   -1,   -1,  214,   -1,
   -1,   40,   -1,   -1,  321,   -1,   -1,  363,   -1,  365,
   -1,   -1,   -1,   -1,  370,   -1,   -1,   40,   -1,  375,
  236,  257,  339,  259,  380,  381,   -1,  263,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,  306,  394,   40,
   -1,  277,   -1,  399,  400,   -1,  262,  263,   -1,  405,
  406,  407,  180,   -1,   -1,  411,  412,   -1,  123,   -1,
  329,  330,   -1,   40,   -1,   -1,   -1,  283,  424,   -1,
  426,   -1,   -1,   -1,   -1,  291,  432,  346,  347,  435,
  296,   -1,   -1,  439,  123,   -1,  214,   -1,   -1,   40,
  306,  307,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,
  123,   -1,   -1,   -1,   40,  321,  375,   -1,  236,   -1,
   -1,   -1,   -1,  329,  330,   -1,   -1,   -1,   -1,   -1,
  336,  337,   -1,  339,  125,  394,   -1,   -1,   40,   -1,
  346,  347,   -1,   -1,  262,  263,   -1,   -1,  407,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  363,  125,  365,
   40,   -1,   -1,   -1,  370,  283,   -1,   -1,   -1,  375,
   -1,  257,   -1,  259,  380,  381,   40,  263,  296,   -1,
  266,   -1,  123,  269,  270,   -1,   -1,   -1,  394,   -1,
   -1,   -1,   -1,  399,  400,   -1,   -1,  123,   40,  405,
  406,  407,  257,  321,  259,  411,  412,   -1,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,  424,   -1,
  426,  339,  277,  125,   40,   -1,  432,   -1,  257,  435,
  259,  260,   -1,  439,  263,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,  257,  125,  259,  260,  277,   40,
  263,  264,  370,  266,  267,  268,  269,  270,  271,  123,
   -1,   -1,  380,  381,  277,  256,  257,   -1,  259,   -1,
   40,   -1,  263,  264,   -1,  266,  267,  268,  269,  270,
  271,  399,  400,  125,   -1,   40,  277,  405,  406,   -1,
  257,   -1,  259,  411,  412,   -1,  263,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,  424,  123,  426,   40,
  277,   -1,   -1,   -1,  432,   -1,  257,  435,  259,   -1,
   -1,  439,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  257,   -1,  259,  125,   40,  277,  263,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,   -1,
   40,  277,   -1,  123,   -1,  257,   -1,  259,   -1,   -1,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  125,   40,   -1,   -1,   -1,  277,   -1,  257,   -1,  259,
   -1,   -1,   -1,  263,  264,  265,  266,  267,  268,  269,
  270,  271,   40,  257,  125,  259,   -1,  277,   -1,  263,
  264,  265,  266,  267,  268,  269,  270,  271,   40,   -1,
   -1,   -1,   -1,  277,   -1,  257,   -1,  259,   -1,   -1,
  125,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,   -1,   -1,  123,   40,  277,   -1,   -1,   -1,   40,
   -1,  257,   -1,  259,   -1,   -1,   -1,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  125,   -1,   40,   -1,
   -1,  277,   -1,   40,   -1,   -1,  257,   -1,  259,   -1,
   -1,   -1,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   -1,   -1,   40,   -1,   -1,  277,  257,   40,  259,
   -1,   -1,   -1,  263,  264,   -1,  266,  267,  268,  269,
  270,  271,  257,   40,  259,   -1,   -1,  277,  263,  264,
   -1,  266,  267,  268,  269,  270,  271,  123,   40,   -1,
   -1,   -1,  277,   40,  125,   -1,  257,   -1,  259,   -1,
   -1,   -1,  263,  264,   -1,  266,  267,  268,  269,  270,
  271,  123,   -1,   -1,   -1,   -1,  277,   -1,  125,   -1,
   -1,   -1,  257,   -1,  259,   -1,   18,   -1,  263,  264,
   -1,  266,  267,  268,  269,  270,  271,  257,  125,  259,
   -1,  123,  277,  263,  264,   -1,  266,  267,  268,  269,
  270,  271,   44,   -1,   -1,   -1,  123,  277,  257,   -1,
  259,   -1,   -1,   -1,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,  125,   -1,   -1,  123,   69,  277,  257,
   -1,  259,   -1,   -1,   -1,  263,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,  257,   -1,  259,   -1,  277,
   -1,  263,  264,   -1,  266,  267,  268,  269,  270,  271,
   -1,  103,  104,   -1,   -1,  277,   -1,   -1,   -1,   -1,
   -1,  257,   -1,  259,  260,   -1,  257,  263,  259,   -1,
  266,   -1,  263,  269,  270,  266,   -1,   -1,  269,  270,
   -1,  133,   -1,   -1,   -1,  257,   -1,  259,   -1,   -1,
  257,  263,  259,  265,  266,   -1,  263,  269,  270,  266,
   -1,   -1,  269,  270,   -1,  157,   -1,   -1,   -1,   -1,
  257,   -1,  259,   -1,   -1,  257,  263,  259,  265,  266,
   -1,  263,  269,  270,  266,   -1,  180,  269,  270,   -1,
  257,   -1,  259,   -1,   -1,  187,  263,   -1,  265,  266,
   -1,   -1,  269,  270,  196,  257,  380,  259,   -1,   -1,
  257,  263,  259,  265,  266,   -1,  263,  269,  270,  266,
  214,   -1,  269,  270,   -1,  399,  400,   -1,   -1,   -1,
  222,   -1,   -1,   -1,  226,   -1,   -1,  411,  412,   -1,
   -1,   -1,  236,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  426,   -1,   -1,   -1,  248,   -1,  432,   -1,
   -1,  435,   -1,   -1,   -1,  439,   -1,   -1,  262,  263,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  321,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  339,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=277;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"id","cte","If","then","Else","end_if","out",
"fun","Return","BREAK","i32","when","For","CONTINUE","f32","cadena",
"menorigual","mayorigual","distinto","opasignacion","Const",
};
final static String yyrule[] = {
"$accept : programa",
"programa : encabezado_prog bloque_sentencias",
"encabezado_prog : id",
"bloque_sentencias : bloque_sentencias '{' sentencia '}'",
"bloque_sentencias : '{' sentencia '}'",
"bloque_sentencias : '{' sentencia",
"bloque_sentencias : sentencia '}'",
"declaracion_const : Const lista_de_asignacion_const ';'",
"declaracion_const : Const lista_de_asignacion_const error",
"declaracion_const : Const ';' error",
"lista_de_asignacion_const : decl_const",
"lista_de_asignacion_const : lista_de_asignacion_const ',' decl_const",
"decl_const : id op_asignacion cte",
"decl_const : id op_asignacion error",
"decl_const : id cte error",
"decl_const : id error",
"bloque_sentencias_For : sentencias_For",
"bloque_sentencias_For : bloque_sentencias_For sentencias_For",
"sentencia : declarativas",
"sentencia : ejecutables",
"sentencia : sentencia declarativas",
"sentencia : sentencia ejecutables",
"declarativas : tipo lista_de_variables ';'",
"declarativas : tipo lista_de_variables error",
"declarativas : tipo error",
"declarativas : declaracion_func",
"declarativas : declaracion_const",
"declarativas : sentencia_when",
"bloque_ejecutables : bloque_ejecutables ejecutables",
"bloque_ejecutables : ejecutables",
"ejecutables : asignacion",
"ejecutables : salida",
"ejecutables : sentencia_If",
"ejecutables : expresion_For",
"ejecutables : sentencia_BREAK error",
"ejecutables : sentencia_CONTINUE error",
"lista_de_variables : id",
"lista_de_variables : lista_de_variables ',' id",
"lista_de_variables : lista_de_variables id",
"encabezado_func : fun id '('",
"encabezado_func : fun '(' error",
"parametro : tipo id",
"parametro : id error",
"asig_fun : ':' tipo",
"asig_fun :",
"cola_func : ')' asig_fun '{' cuerpo_fun '}'",
"declaracion_func : encabezado_func parametro cola_func",
"declaracion_func : encabezado_func parametro ',' parametro cola_func",
"declaracion_func : encabezado_func parametro ',' parametro ',' parametro cola_func",
"declaracion_func : encabezado_func cola_func",
"ret_fun : Return '(' expresion ')' ';'",
"ret_fun : Return expresion ')' ';'",
"ret_fun : Return '(' expresion ';'",
"ret_fun : Return expresion ';'",
"ret_fun : Return '(' expresion ')' error",
"cuerpo_fun : bloque_sentencias_funcion",
"ejecutables_funcion : asignacion",
"ejecutables_funcion : sentencia_if_funcion",
"ejecutables_funcion : salida",
"ejecutables_funcion : sentencia_for_funcion",
"ejecutables_funcion : ret_fun",
"ejecutables_funcion : sentencia_BREAK error",
"ejecutables_funcion : sentencia_CONTINUE error",
"bloque_sentencias_ejecutables_funcion : bloque_sentencias_ejecutables_funcion ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion : ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion declarativas",
"bloque_sentencias_funcion : ejecutables_funcion",
"bloque_sentencias_funcion : declarativas",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion end_if ';'",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion Else cuerpo_Else_funcion end_if ';'",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion Else cuerpo_Else_funcion end_if error",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion error",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion Else cuerpo_Else_funcion error ';'",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion error",
"cuerpo_If_funcion : '{' bloque_sentencias_ejecutables_funcion '}'",
"cuerpo_If_funcion : ejecutables_funcion",
"cuerpo_Else_funcion : '{' bloque_sentencias_ejecutables_funcion '}'",
"cuerpo_Else_funcion : ejecutables_funcion",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion end_if ';'",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion Else cuerpo_Else_for_funcion end_if ';'",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion Else cuerpo_Else_for_funcion end_if error",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion error",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion Else cuerpo_Else_for_funcion error ';'",
"sentencia_if_for_funcion : If condicion_if cuerpo_If_for_funcion error",
"cuerpo_If_for_funcion : '{' bloque_sentencias_For_funcion '}'",
"cuerpo_If_for_funcion : sentencias_For_funcion",
"cuerpo_Else_for_funcion : '{' bloque_sentencias_For_funcion '}'",
"cuerpo_Else_for_funcion : sentencias_For_funcion",
"cola_For_funcion : '{' bloque_sentencias_For_funcion '}' ';'",
"cola_For_funcion : sentencias_For_funcion",
"sentencia_for_funcion : For '(' id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For_funcion",
"sentencia_for_funcion : For id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For_funcion error",
"sentencia_for_funcion : For id op_asignacion cte ';' condicion_for ';' signo id cola_For_funcion error",
"sentencia_for_funcion : For '(' id op_asignacion cte ':' condicion_for ':' signo id ')' cola_For_funcion error",
"sentencia_for_funcion : id ':' For '(' id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For_funcion",
"sentencias_For_funcion : asignacion",
"sentencias_For_funcion : salida",
"sentencias_For_funcion : sentencia_for_funcion",
"sentencias_For_funcion : ret_fun",
"sentencias_For_funcion : sentencia_BREAK",
"sentencias_For_funcion : sentencia_CONTINUE",
"sentencias_For_funcion : sentencia_if_for_funcion",
"sentencias_For_funcion : declarativas error",
"bloque_sentencias_For_funcion : sentencias_For_funcion",
"bloque_sentencias_For_funcion : bloque_sentencias_For_funcion sentencias_For_funcion",
"op_asignacion : opasignacion",
"op_asignacion : ':' '='",
"op_asignacion : '='",
"asignacion : id op_asignacion expresion ';'",
"asignacion : id op_asignacion expresion",
"asignacion : etiquetaFor",
"etiquetaFor : id op_asignacion encabezado_For devolverValor",
"devolverValor : Else cte ';'",
"devolverValor : error",
"salida : out '(' cadena ')' ';'",
"salida : out '(' cadena ')' error",
"salida : out '(' cadena error ';'",
"salida : out cadena error ';'",
"salida : '(' cadena error",
"salida : out '(' ')' error ';'",
"sentencia_If : If condicion_if then cuerpo_If end_if ';'",
"sentencia_If : If condicion_if then cuerpo_If Else cuerpo_Else end_if ';'",
"sentencia_If : If condicion_if then cuerpo_If Else cuerpo_Else end_if error",
"sentencia_If : If condicion_if then cuerpo_If error",
"sentencia_If : If condicion_if then cuerpo_If Else cuerpo_Else error ';'",
"sentencia_If : If condicion_if cuerpo_If error",
"cuerpo_If : '{' bloque_ejecutables '}'",
"cuerpo_If : ejecutables",
"cuerpo_Else : '{' bloque_ejecutables '}'",
"cuerpo_Else : ejecutables",
"sentencia_if_for : If condicion_if then cuerpo_If_for end_if ';'",
"sentencia_if_for : If condicion_if then cuerpo_If_for Else cuerpo_Else_for end_if ';'",
"sentencia_if_for : If condicion_if then cuerpo_If_for Else cuerpo_Else_for end_if error",
"sentencia_if_for : If condicion_if then cuerpo_If_for error",
"sentencia_if_for : If condicion_if then cuerpo_If_for Else cuerpo_Else_for error ';'",
"sentencia_if_for : If condicion_if cuerpo_If_for error",
"cuerpo_If_for : '{' bloque_sentencias_For '}'",
"cuerpo_If_for : sentencias_For",
"cuerpo_Else_for : '{' bloque_sentencias_For '}'",
"cuerpo_Else_for : sentencias_For",
"sentencia_when : when '(' condicion_for ')' then cuerpo_when ';'",
"sentencia_when : when condicion_for ')' then cuerpo_when ';' error",
"sentencia_when : when '(' condicion_for then cuerpo_when ';' error",
"sentencia_when : when '(' condicion_for ')' cuerpo_when ';' error",
"cuerpo_when : '{' sentencia '}'",
"cuerpo_when : '{' sentencia error",
"cuerpo_when : sentencia '}' error",
"cola_For : '{' bloque_sentencias_For '}' ';'",
"cola_For : sentencias_For",
"encabezado_For : For '(' id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For",
"encabezado_For : For id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For error",
"encabezado_For : For id op_asignacion cte ';' condicion_for ';' signo id cola_For error",
"encabezado_For : For '(' id op_asignacion cte ':' condicion_for ':' signo id ')' cola_For error",
"encabezado_For : id ':' For '(' id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For",
"condicion_for : id comparador cte",
"signo : '+'",
"signo : '-'",
"sentencias_For : asignacion",
"sentencias_For : salida",
"sentencias_For : expresion_For",
"sentencias_For : sentencia_if_for",
"sentencias_For : sentencia_BREAK",
"sentencias_For : sentencia_CONTINUE",
"sentencias_For : declarativas error",
"sentencias_For : ret_fun error",
"expresion_For : encabezado_For",
"sentencia_BREAK : BREAK ';'",
"sentencia_BREAK : BREAK cte ';'",
"sentencia_BREAK : BREAK error",
"sentencia_CONTINUE : CONTINUE ';'",
"sentencia_CONTINUE : CONTINUE ':' id ';'",
"sentencia_CONTINUE : CONTINUE id ';' error",
"sentencia_CONTINUE : CONTINUE error",
"condicion_if : '(' expresion_relacional ')'",
"condicion_if : expresion_relacional ')'",
"condicion_if : '(' expresion_relacional",
"condicion_if : expresion_relacional",
"expresion_relacional : expresion comparador expresion",
"list_param_invoc : factor",
"list_param_invoc : list_param_invoc factor",
"invocacion : cadena '(' list_param_invoc ')'",
"expresion : expresion signo termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : id",
"factor : cte",
"factor : '-' cte",
"factor : invocacion",
"comparador : '<'",
"comparador : '>'",
"comparador : menorigual",
"comparador : mayorigual",
"comparador : '='",
"comparador : distinto",
"tipo : i32",
"tipo : f32",
};

//#line 375 "gramatica.y"

private AnalizadorLexico lexico;
private AnalizadorSintactico sintactico;

public void setLexico(AnalizadorLexico lexico) { this.lexico = lexico; }

public void setSintactico(AnalizadorSintactico sintactico) { this.sintactico = sintactico; }

public AnalizadorLexico getLexico() { return this.lexico; }

public AnalizadorSintactico getSintactico() { return this.sintactico; }

public int yylex() {
    int token = lexico.procesarYylex();
    if (lexico.getRefTablaSimbolos() != -1)
        yylval = new ParserVal(lexico.getRefTablaSimbolos());
    return token;
}

public void yyerror(String string) {
	//sintactico.addErrorSintactico("par: " + string);
}


//#line 918 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 5:
//#line 28 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar el bloque.");}
break;
case 6:
//#line 29 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir el bloque.");}
break;
case 7:
//#line 32 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una declaración de CONSTANTE. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 8:
//#line 33 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ; al final de la declaracion de constantes.");}
break;
case 9:
//#line 34 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): No se reconoce una lista de constantes.");}
break;
case 13:
//#line 42 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta constante luego de la asignacion.");}
break;
case 14:
//#line 43 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta el operador asignacion luego del identificador.");}
break;
case 15:
//#line 44 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta la asignacion luego del identificador.");}
break;
case 22:
//#line 60 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una declaración de variable. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 23:
//#line 61 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): falta ';' al final de la declaración de variable."); }
break;
case 24:
//#line 62 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): falta el identificador de variable"); }
break;
case 34:
//#line 77 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 35:
//#line 78 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 38:
//#line 83 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta una ',' entre identIficadores."); }
break;
case 39:
//#line 86 "gramatica.y"
{ sintactico.addAnalisis( "Se reconocio declaracion de funcion (Línea " + AnalizadorLexico.LINEA + ")" ); }
break;
case 40:
//#line 87 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. ENC_FUN (Línea " + AnalizadorLexico.LINEA + "): problema en la definición de la función."); }
break;
case 42:
//#line 91 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. PARAM(Línea " + AnalizadorLexico.LINEA + "): falta TIPO en parametros."); }
break;
case 44:
//#line 96 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. COLA_FUN(Línea " + AnalizadorLexico.LINEA + "): falta TIPO "); }
break;
case 45:
//#line 98 "gramatica.y"
{ sintactico.addAnalisis("Se reconoce TIPO funcion (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 48:
//#line 104 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. DECLARACION_FUN(Línea " + AnalizadorLexico.LINEA + "): no se permiten mas de 2 parametros "); }
break;
case 50:
//#line 108 "gramatica.y"
{ sintactico.addAnalisis("Se reconoce retorno de funcion(Línea " + AnalizadorLexico.LINEA + ") "); }
break;
case 51:
//#line 109 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN1 (Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 52:
//#line 110 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN2(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 53:
//#line 111 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN3(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 54:
//#line 112 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN4(Línea " + AnalizadorLexico.LINEA + "): falta ; "); }
break;
case 61:
//#line 123 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 62:
//#line 124 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 69:
//#line 138 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 70:
//#line 139 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 71:
//#line 140 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 72:
//#line 141 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 73:
//#line 142 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 74:
//#line 143 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta la declaración de then."); }
break;
case 79:
//#line 154 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 80:
//#line 155 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 81:
//#line 156 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 82:
//#line 157 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 83:
//#line 158 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 84:
//#line 159 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta la declaración de then."); }
break;
case 91:
//#line 175 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 92:
//#line 176 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 93:
//#line 177 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 94:
//#line 178 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR3(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 95:
//#line 179 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 103:
//#line 190 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 106:
//#line 200 "gramatica.y"
{ yyval.sval = new String("=:"); }
break;
case 107:
//#line 201 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP1(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 108:
//#line 202 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 110:
//#line 207 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP(Línea " + (AnalizadorLexico.LINEA-1) + "): falta ';' luego de la ASIG."); }
break;
case 114:
//#line 214 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): problema en devolver valor por defecto  "); }
break;
case 116:
//#line 218 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de la impresión de cadena."); }
break;
case 117:
//#line 219 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): cierre erróneo de la lista de parámetros de out."); }
break;
case 118:
//#line 220 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): los parámetros de out deben estar entre paréntesis."); }
break;
case 119:
//#line 221 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): se esperaba out, se encontró '('."); }
break;
case 120:
//#line 222 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta declarar una cadena para PRINT."); }
break;
case 121:
//#line 226 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 122:
//#line 227 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 123:
//#line 228 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 124:
//#line 229 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 125:
//#line 230 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 126:
//#line 231 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta la declaración de then."); }
break;
case 131:
//#line 242 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 132:
//#line 243 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 133:
//#line 244 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 134:
//#line 245 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 135:
//#line 246 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 136:
//#line 247 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta la declaración de then."); }
break;
case 141:
//#line 258 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia when");}
break;
case 142:
//#line 259 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta abrir paréntesis la condicion"); }
break;
case 143:
//#line 260 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta paréntesis de cierre en la condicion."); }
break;
case 144:
//#line 261 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta la declaración de then."); }
break;
case 146:
//#line 265 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar la llave del bloque."); }
break;
case 147:
//#line 266 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir la llave del bloque"); }
break;
case 150:
//#line 274 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 151:
//#line 275 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 152:
//#line 276 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 153:
//#line 277 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR3(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 154:
//#line 278 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 164:
//#line 297 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 165:
//#line 298 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten retornos fuera de una funcion"); }
break;
case 167:
//#line 305 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia break (Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 168:
//#line 306 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia break con retorno de valor (Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 169:
//#line 307 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de BREAK."); }
break;
case 170:
//#line 310 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia continue (Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 171:
//#line 311 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia continue con etiquetado(Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 172:
//#line 312 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ':'CONTINUE."); }
break;
case 173:
//#line 313 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego del CONTINUE "); }
break;
case 175:
//#line 317 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 176:
//#line 318 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 177:
//#line 319 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 188:
//#line 344 "gramatica.y"
{
                        sintactico.setTipo(sintactico.getTipoFromTS(val_peek(0).ival));
                        if (sintactico.getTipo().equals("LONG"))
                             sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
                  }
break;
case 189:
//#line 349 "gramatica.y"
{
                        sintactico.setNegativoTablaSimb(val_peek(0).ival);
                    }
break;
case 191:
//#line 355 "gramatica.y"
{ yyval.sval = new String("<"); }
break;
case 192:
//#line 356 "gramatica.y"
{ yyval.sval = new String(">"); }
break;
case 193:
//#line 357 "gramatica.y"
{ yyval.sval = new String("<="); }
break;
case 194:
//#line 358 "gramatica.y"
{ yyval.sval = new String(">="); }
break;
case 195:
//#line 359 "gramatica.y"
{ yyval.sval = new String("="); }
break;
case 196:
//#line 360 "gramatica.y"
{ yyval.sval = new String("=!"); }
break;
case 197:
//#line 363 "gramatica.y"
{
                    sintactico.setTipo("i32");
                    yyval.sval = new String("i32");
                }
break;
case 198:
//#line 367 "gramatica.y"
{
                    sintactico.setTipo("f32");
                    yyval.sval = new String("f32");
                }
break;
//#line 1479 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
