//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"

package AnalizadorSintactico;

import java.util.Vector;

import AnalizadorLexico.AnalizadorLexico;
import AnalizadorSintactico.AnalizadorSintactico;
import AnalizadorLexico.Atributo;

//#line 27 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short id=257;
public final static short cte=258;
public final static short If=259;
public final static short then=260;
public final static short Else=261;
public final static short end_if=262;
public final static short out=263;
public final static short fun=264;
public final static short Return=265;
public final static short BREAK=266;
public final static short i32=267;
public final static short when=268;
public final static short For=269;
public final static short CONTINUE=270;
public final static short f32=271;
public final static short cadena=272;
public final static short menorigual=273;
public final static short mayorigual=274;
public final static short distinto=275;
public final static short opasignacion=276;
public final static short Const=277;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    2,    2,    2,    2,    4,    4,    4,    5,
    5,    6,    6,    6,    6,    8,    8,    3,    3,    3,
    3,   10,   10,   10,   10,   10,   10,   16,   16,   11,
   11,   11,   11,   11,   11,   13,   13,   13,   23,   23,
   24,   24,   25,   25,   26,   14,   14,   14,   14,   28,
   28,   28,   28,   28,   27,   31,   31,   31,   31,   31,
   31,   31,   34,   34,   30,   30,   30,   30,   32,   32,
   32,   32,   32,   32,   36,   36,   37,   37,   38,   38,
   38,   38,   38,   38,   39,   39,   40,   40,   43,   43,
   33,   33,   33,   33,   33,   44,   46,   42,   42,   42,
   42,   42,   42,   42,   42,   41,   41,    7,    7,    7,
   17,   17,   17,   48,   48,   18,   18,   18,   18,   18,
   18,   19,   19,   19,   49,   49,   49,   50,   50,   51,
   51,   52,   52,   52,   52,   52,   52,   53,   53,   54,
   54,   15,   15,   15,   55,   55,   55,   56,   56,   57,
   57,   57,   57,   57,   58,   59,   45,   47,   47,    9,
    9,    9,    9,    9,    9,    9,    9,   20,   21,   21,
   21,   22,   22,   22,   22,   35,   35,   35,   35,   61,
   29,   29,   62,   62,   62,   63,   63,   63,   60,   60,
   60,   60,   60,   60,   12,   12,
};
final static short yylen[] = {                            2,
    2,    1,    4,    3,    2,    2,    3,    3,    3,    1,
    3,    3,    3,    3,    2,    1,    2,    1,    1,    2,
    2,    3,    3,    2,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    2,    2,    1,    3,    3,    3,    3,
    2,    2,    2,    0,    5,    3,    5,    7,    2,    5,
    4,    4,    3,    5,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    1,    2,    2,    1,    1,    6,    8,
    8,    5,    8,    4,    3,    1,    3,    1,    6,    8,
    8,    5,    8,    4,    3,    1,    3,    1,    4,    1,
    9,    9,    8,   10,   11,    3,    2,    1,    1,    1,
    1,    1,    1,    1,    2,    1,    2,    1,    2,    1,
    4,    4,    4,    3,    2,    5,    5,    5,    4,    3,
    5,    5,    6,    5,    2,    1,    1,    4,    2,    4,
    2,    6,    8,    8,    5,    8,    4,    3,    1,    3,
    1,    6,    6,    6,    4,    4,    4,    4,    1,    5,
   12,   11,   13,   14,    3,    3,    3,    1,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    1,    2,    3,
    2,    2,    4,    4,    2,    3,    2,    2,    1,    3,
    3,    1,    3,    3,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,
};
final static short yydefred[] = {                         0,
    2,    0,    0,    0,    0,    0,    0,    0,  195,    0,
    0,    0,  196,    0,    0,    0,    0,    0,   26,   18,
   19,    0,   25,   27,   30,   31,   32,   33,    0,    0,
    0,  168,  108,    0,  110,    0,  186,  187,    0,    0,
    0,    0,    0,    0,  185,    0,    0,    0,    0,  171,
    0,  169,    0,    0,    0,    0,    0,  175,    0,  172,
    0,    0,    0,    0,   10,    0,    0,    0,    6,   20,
   21,   24,   36,    0,   34,   35,    0,    0,    0,    0,
   49,    0,  109,    0,    0,    0,    0,    0,  188,  191,
  192,  194,  193,  158,  159,  189,  190,    0,    0,    0,
    0,    0,    0,  127,  177,    0,    0,    0,    0,    0,
   39,   40,  170,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   15,    0,    0,    9,    8,    7,    0,
    4,  120,    0,   23,    0,   22,    0,   42,    0,    0,
   41,    0,   46,    0,    0,  115,    0,  112,  111,  113,
  176,    0,    0,    0,    0,  129,    0,    0,  131,    0,
  125,  183,  184,  119,    0,    0,    0,  157,    0,    0,
    0,    0,    0,    0,    0,    0,  174,  173,   14,   13,
   12,   11,    3,   38,   37,   43,    0,    0,    0,  114,
   29,    0,  124,    0,    0,  122,  118,  117,  116,  121,
    0,    0,    0,    0,    0,    0,    0,    0,  155,    0,
    0,    0,  149,    0,  160,  161,  162,  164,  165,    0,
  163,  150,    0,    0,    0,   68,   56,   58,    0,    0,
    0,   60,    0,   67,   57,   59,    0,   47,    0,  128,
   28,  123,  130,    0,    0,  142,  144,  143,    0,    0,
    0,    0,    0,    0,    0,   16,  166,  167,    0,    0,
    0,    0,    0,   61,   62,   45,   66,   65,    0,    0,
  146,  145,  147,    0,    0,  156,    0,    0,    0,  139,
    0,    0,   53,    0,    0,   17,    0,    0,    0,   76,
    0,    0,    0,    0,   48,    0,    0,    0,   97,    0,
    0,  137,   52,    0,   51,  148,    0,    0,   64,    0,
   74,   96,    0,    0,    0,    0,    0,    0,  135,    0,
    0,  138,   54,   50,    0,   72,    0,    0,   75,   63,
    0,    0,    0,    0,    0,    0,    0,    0,  141,    0,
  132,    0,    0,   78,    0,   69,    0,    0,    0,    0,
    0,  152,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   98,   99,  102,  103,
  101,  100,  104,   90,    0,    0,  151,    0,  140,  136,
  134,  133,    0,   77,   73,   71,   70,    0,    0,    0,
    0,  106,    0,  105,   93,    0,  153,    0,   91,    0,
    0,    0,    0,   86,    0,  107,   92,  154,    0,   94,
    0,    0,   84,   89,   95,   82,    0,    0,   85,    0,
    0,   88,   79,    0,    0,    0,   87,   83,   81,   80,
};
final static short yydgoto[] = {                          2,
    3,   17,   18,   19,   64,   65,   36,  255,  213,  214,
   21,   22,   74,   23,   24,  192,   25,   26,   27,   28,
   29,   30,   31,   80,  140,   81,  231,  220,   41,  233,
  290,  235,  372,  310,   42,  291,  345,  373,  403,  421,
  391,  374,  375,  120,   55,  276,   98,   87,  102,  103,
  104,  221,  281,  340,  171,  222,   32,  121,  209,   99,
   43,   44,   45,
};
final static short yysindex[] = {                      -219,
    0,    0, 1083,  -18,  -34,  -35,  -13,   50,    0,   -6,
   12,   68,    0,   19, 1243, -236,   -8, 1104,    0,    0,
    0, -175,    0,    0,    0,    0,    0,    0, -167, -131,
  -28,    0,    0,  -31,    0,  -44,    0,    0,   59, -122,
  -41, -147,  105,    4,    0, -105,  -32,  115,  -94,    0,
  123,    0,   40,  -65,  153,  -16,  -62,    0,  137,    0,
  -60,   -1,  -55,  -30,    0, 1123,  -52, 1243,    0,    0,
    0,    0,    0,  -36,    0,    0,  -51,  144,  -50,  103,
    0,  168,    0,  154, -208,   25,  152,  175,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   59,   59,   -7,
  138,  -45,   27,    0,    0,   59,   59,  169,   21,   42,
    0,    0,    0,   43,  -24,   67,  273,   78,  -16,  283,
  299,   87,  285,    0,   92, -221,    0,    0,    0,   94,
    0,    0, 1142,    0,   96,    0,   99,    0, -134,  234,
    0, -213,    0,  101,   90,    0,  102,    0,    0,    0,
    0,    4,  131,  195, 1069,    0, -176, 1069,    0,  305,
    0,    0,    0,    0,  307,   36,  309,    0, 1158,   67,
  310,  311,  312,  114,  -65,  766,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1174,  126,  -16,    0,
    0,  291,    0,  119,  397,    0,    0,    0,    0,    0,
 1243, 1209,  317,  121,  124,  -65,  321,  322,    0,  -34,
   16, 1193,    0,  133,    0,    0,    0,    0,    0,  134,
    0,    0,  -11,  -34,   15,    0,    0,    0,  135,  136,
  257,    0, 1174,    0,    0,    0, -213,    0,  155,    0,
    0,    0,    0,  790,  146,    0,    0,    0,  334,  -65,
  131,  617,   59,  132,  805,    0,    0,    0,   14,   34,
  -16,  161,  335,    0,    0,    0,    0,    0,  369,  360,
    0,    0,    0,  131,  362,    0,  171,  851, 1193,    0,
  170,  294,    0,  375,  380,    0,  400,  166,  654,    0,
  185,  184,  128,  -65,    0,  -65,  188,  131,    0, -168,
  872,    0,    0,   63,    0,    0,  161, -151,    0, 1258,
    0,    0,  -65,  -65,  388,  398,  639,  205,    0,  901,
  407,    0,    0,    0,  409,    0, 1272,  412,    0,    0,
  413,  415,  131,  131,  766,  219,  435, 1193,    0, -166,
    0,  -65,  654,    0, -159,    0,  131,  131,  668,  221,
  225,    0,  766,  926,  428,   70,  430, 1289,  431,   73,
  452,  454,  -34, 1226,  954,  242,    0,    0,    0,    0,
    0,    0,    0,    0,  244,  461,    0,  247,    0,    0,
    0,    0,  131,    0,    0,    0,    0,  954,  954,  741,
  973,    0,  250,    0,    0,  766,    0,  468,    0,  258,
  988, 1226,  260,    0,  458,    0,    0,    0,  954,    0,
 -138, 1005,    0,    0,    0,    0, 1038,  464,    0, 1226,
  -98,    0,    0, 1054,  465,   76,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  513,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  583,  690,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   22,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  404,    0,    0,
    0,    0,    0,   24,    0,    0,    0,  602,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -93,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  716,  558,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  469,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  405,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,  281,    0,    0,  401,   29, -251, 1078,   -3,
   -2,   41,    0,    0,    0,  374,   95,  191,    0,  -33,
  287,  383,    0, -118,    0,  -54,    0,  -79,  -26,    0,
  178,    0,  167,  190, -192,  249,    0,    0,  140,    0,
 -371, -252, -248, -186,  -47, -241, 1265,    0,  438,    0,
  432,    0,  265,    0,  -91, -276,    0,    0,    0,  493,
  512,  455,   82,
};
final static int YYTABLESIZE=1648;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         20,
   40,   94,   85,   95,   47,   39,  115,  137,  110,   86,
   40,   20,   78,  130,   70,   71,  170,  252,   96,   93,
   97,    5,  136,  188,  172,  143,   49,  301,  129,   83,
  412,  260,   16,   54,  180,   67,  181,    1,  263,   34,
  336,  117,   35,   77,   35,  106,  259,  146,  424,   35,
  107,   57,  147,    9,  262,  253,  117,   13,  351,   35,
   40,  166,   70,   71,   20,  186,  186,   94,  186,   95,
  186,   79,  153,   16,   83,  293,  378,   63,  203,  193,
   72,   73,  186,  149,  118,  194,  354,  319,   75,  355,
  126,  349,  320,  321,  199,  356,  359,  156,  159,   96,
   93,   97,  360,   40,  326,  361,  362,  232,   52,  327,
  328,  392,  100,  101,   68,  155,  393,  416,  269,  408,
  325,  324,  417,  418,   76,   61,   60,  208,  382,   70,
   71,  387,    9,  238,  430,   89,   13,  404,  406,  399,
  400,  398,  217,   78,    5,  105,  142,  174,  404,  392,
  108,  156,  191,  232,  111,  191,  289,  425,  249,  406,
  415,  112,  126,  426,  422,   20,   78,  392,  126,  237,
  390,  406,  284,   94,   94,   95,   95,   16,  217,  186,
  232,  113,   79,  226,  254,  314,  313,  162,  163,  241,
  283,   53,  241,  116,  119,  122,  123,   20,   70,   71,
  127,  139,  275,  132,  138,   16,  141,  144,  232,  232,
  150,  145,   84,   38,  295,  151,  160,  239,  217,  134,
  135,  217,   37,   38,   11,  128,  282,  164,   77,  267,
  232,   90,   91,   92,   16,  169,   46,   82,    9,  109,
   70,   71,   13,   48,  217,  217,  315,  232,  316,    4,
   53,    5,  154,  101,  124,    6,  125,   33,    8,   33,
  158,   11,   12,  232,   33,  331,  332,  217,   56,  371,
  215,  261,   37,   38,   33,   62,  165,   79,  232,  186,
  148,  227,  287,  217,  371,  371,  217,  101,  289,  292,
  223,  198,  224,  288,  357,   66,    6,  167,  211,    8,
  168,  217,  225,   12,  217,   50,  215,   51,  371,  371,
  371,  371,   90,   91,   92,   37,   38,  155,  323,  217,
  217,  371,  371,   58,   59,  381,  169,  227,  386,  371,
   16,  429,  371,   83,  304,  173,   94,  371,   95,  176,
  371,  175,  177,  178,  371,  366,  215,  179,  133,  215,
   62,  184,  303,  236,  227,  185,  187,  189,   82,  190,
  366,  366,  217,  196,  234,  197,  216,  200,  204,  205,
  206,  207,  215,  215,  242,  246,  247,  228,  250,  248,
  251,  266,  227,  227,  366,  366,  366,  366,  257,  258,
  264,  265,  274,  294,    4,  215,    5,  366,  366,  236,
    6,  273,  216,    8,  227,  366,   11,   12,  366,   78,
  268,  215,  270,  366,  215,  240,  366,  261,  296,  298,
  366,  227,  223,  228,  224,  302,  236,  299,    6,  215,
  211,    8,  215,  305,  225,   12,   16,  227,  306,  307,
  311,  312,  216,  367,  317,  216,  333,  215,  215,  202,
  228,    4,  227,    5,  236,  236,  334,    6,  367,  367,
    8,  337,  218,   11,   12,  341,  309,  342,  216,  216,
  346,  347,  348,  229,  352,  353,  236,  376,  228,  228,
  377,  244,  367,  367,  367,  367,  380,  330,  383,  385,
  215,  216,  388,  236,  389,  367,  367,  394,  218,  395,
  228,  396,  397,  367,  344,  407,  367,  216,  409,  236,
  216,  367,    1,  410,  367,  413,  414,  228,  367,  229,
  309,  243,  423,  428,  236,  216,   44,   96,  216,   55,
  182,  195,  358,  228,  161,  330,  308,  157,  218,  368,
  411,  218,  300,  216,  216,  114,  229,    4,  228,    5,
   88,    0,  152,    6,  368,  368,    8,    0,  219,   11,
   12,    0,    0,    0,  218,  218,    0,    0,    0,  230,
    0,    0,    0,    0,  229,  229,    0,    0,  368,  368,
  368,  368,    0,    0,    0,    0,  216,  218,    0,    0,
    0,  368,  368,    0,  219,    0,  229,  180,  180,  368,
    0,    0,  368,  218,    0,    0,  218,  368,    0,    0,
  368,    0,    0,  229,  368,  230,    0,    0,    0,    0,
    0,  218,  179,    0,  218,    0,    0,    0,    0,  229,
    0,    0,    0,    0,  219,  369,    0,  219,    0,  218,
  218,  178,  230,    0,  229,    0,    0,    0,    0,    0,
  369,  369,    0,    4,    0,    5,   16,    0,    0,    6,
  219,  219,    8,    0,    0,   11,   12,    0,    0,    0,
  230,  230,    0,    0,  369,  369,  369,  369,   16,  335,
  180,    0,  218,  219,    0,    0,    0,  369,  369,    0,
    0,    0,  230,   16,    0,  369,    0,    0,  369,  219,
    0,    0,  219,  369,    0,  179,  369,   16,  365,  230,
  369,    0,    0,    0,    0,    0,    0,  219,    0,    0,
  219,    0,    0,    0,  178,  230,    0,    0,    0,  182,
  182,  370,  182,    0,  182,  219,  219,    0,    0,  279,
  230,    0,    0,    0,    0,    0,  370,  370,  182,  182,
  182,  182,    0,    0,    0,  181,  181,    0,  181,    0,
  181,  212,    0,    0,    0,    0,    0,    0,    0,    0,
  370,  370,  370,  370,  181,  181,  181,  181,  219,    0,
   16,    0,    0,  370,  370,    0,    0,    0,    0,    0,
  364,  370,    0,    0,  370,    0,    0,    0,    0,  370,
    0,    0,  370,    0,    0,   16,  370,    0,    0,    0,
    0,    0,  182,    0,  180,    0,  180,  180,  180,    0,
  180,  180,  180,  180,  180,  180,  180,  180,  180,   16,
    0,    0,    0,    0,  180,    0,    0,    0,  181,  179,
    0,  179,  179,  179,   16,  179,  179,  179,  179,  179,
  179,  179,  179,  179,    0,    0,    0,    0,  178,  179,
  178,  178,  178,  402,  178,  178,  178,  178,  178,  178,
  178,  178,  178,    4,    0,  210,  278,    0,  178,    6,
    7,  211,    8,    9,   10,   11,   12,   13,  212,    0,
   16,    0,    0,   14,    0,    4,    0,  210,    0,    0,
    0,    6,    7,  211,    8,    9,   10,   11,   12,   13,
  223,   16,  224,    0,  272,   14,    6,    0,  211,    8,
    0,    0,  225,   12,  223,    0,  363,    0,    0,  285,
    6,    7,  211,    8,    9,   10,  225,   12,   13,    0,
   16,    0,    0,    0,   14,  182,  182,    0,  182,  182,
  182,    0,  182,  182,  182,  182,  182,  182,  182,  182,
  182,    0,  182,  182,  182,   16,  182,    0,    0,    0,
    0,  181,  181,  279,  181,  181,  181,    0,  181,  181,
  181,  181,  181,  181,  181,  181,  181,    0,  181,  181,
  181,    0,  181,   16,    0,    0,  322,  223,    0,  363,
  401,    0,    0,    6,    7,  211,    8,    9,   10,  225,
   12,   13,   16,    0,    0,    0,    0,   14,    0,    0,
    0,    0,    4,  338,  210,    0,    0,   16,    6,    7,
  211,    8,    9,   10,   11,   12,   13,    0,    0,    0,
    0,    0,   14,    0,   16,  271,    4,    0,    5,    0,
  379,    0,    6,    7,    0,    8,    9,   10,   11,   12,
   13,    4,    0,  210,    0,    0,   14,    6,    7,  211,
    8,    9,   10,   11,   12,   13,  364,   16,    0,    0,
    0,   14,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   16,    0,    0,    0,  405,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    4,   16,  210,
  402,    0,    0,    6,    7,  211,    8,    9,   10,   11,
   12,   13,   16,    0,    0,    0,    0,   14,    4,  419,
  210,    0,    0,    0,    6,    7,  211,    8,    9,   10,
   11,   12,   13,   16,    0,    0,    0,    0,   14,    0,
    0,    0,    0,    0,    0,    0,    0,    4,    0,  210,
  420,    0,   16,    6,    7,  211,    8,    9,   10,   11,
   12,   13,    0,    0,    0,    0,    0,   14,  427,    0,
    0,   16,    4,    0,  210,    0,    0,    0,    6,    7,
  211,    8,    9,   10,   11,   12,   13,   16,    0,    0,
    0,    0,   14,    0,    0,   15,    0,    0,    0,    0,
  223,    0,  363,   16,    0,    0,    6,    7,  211,    8,
    9,   10,  225,   12,   13,    0,    0,    0,   69,  223,
   14,  363,   16,    0,    0,    6,    7,  211,    8,    9,
   10,  225,   12,   13,  223,    0,  363,  131,   16,   14,
    6,    7,  211,    8,    9,   10,  225,   12,   13,    0,
    0,  223,    0,  363,   14,   16,  183,    6,    7,  211,
    8,    9,   10,  225,   12,   13,    0,    0,    0,    0,
  201,   14,   16,    0,    0,    0,    0,    0,    0,  256,
    0,    0,    0,    0,  223,    0,  363,   16,    0,    0,
    6,    7,  211,    8,    9,   10,  225,   12,   13,    0,
  223,   16,  363,    0,   14,    0,    6,    7,  211,    8,
    9,   10,  225,   12,   13,    4,    0,    5,   16,  280,
   14,    6,  286,  245,    8,    0,    0,   11,   12,    4,
    0,    5,    0,    0,    0,    6,    7,    0,    8,    9,
   10,   11,   12,   13,    0,  280,  256,    0,    0,   14,
    4,    0,    5,    0,    0,    0,    6,    7,    0,    8,
    9,   10,   11,   12,   13,    0,    0,    0,  286,    4,
   14,    5,  329,    0,    0,    6,    7,    0,    8,    9,
   10,   11,   12,   13,  343,    0,    0,  339,    4,   14,
    5,    0,    0,    0,    6,    7,    0,    8,    9,   10,
   11,   12,   13,  384,    4,  256,    5,    0,   14,    0,
    6,    7,    0,    8,    9,   10,   11,   12,   13,    0,
  223,  286,  224,    0,   14,    0,    6,    7,  211,    8,
    9,   10,  225,   12,   13,    0,    0,    0,    0,    4,
   14,  210,    0,    0,    0,    6,    7,  211,    8,    9,
   10,   11,   12,   13,    0,    4,    0,    5,    0,   14,
    0,    6,    7,    0,    8,    9,   10,   11,   12,   13,
    0,    0,  223,    0,  363,   14,    0,    0,    6,    7,
  211,    8,    9,   10,  225,   12,   13,    0,    0,    4,
    0,    5,   14,    0,    0,    6,    7,    0,    8,    9,
   10,   11,   12,   13,  223,  277,  224,    0,    0,   14,
    6,    0,  211,    8,    0,    0,  225,   12,  223,    0,
  224,    0,    0,    0,    6,    0,  211,    8,  297,    0,
  225,   12,    0,    0,    0,  223,    0,  224,    0,    0,
    0,    6,    0,  211,    8,    0,    0,  225,   12,    0,
    0,    0,  318,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  277,  350,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  277,  277,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  277,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          3,
   45,   43,   36,   45,   40,   40,   54,   44,   41,   36,
   45,   15,   41,   44,   18,   18,   41,  210,   60,   61,
   62,    0,   59,  142,  116,   80,   40,  279,   59,   61,
  402,  224,   40,   40,  256,  272,  258,  257,  225,   58,
  317,   58,   61,  257,   61,   42,   58,  256,  420,   61,
   47,   40,  261,  267,   40,   40,   58,  271,  335,   61,
   45,   41,   66,   66,   68,   42,   43,   43,   45,   45,
   47,   31,   99,   40,   61,  262,  353,   59,  170,  256,
  256,  257,   59,   59,   56,  262,  338,  256,  256,  256,
   62,  333,  261,  262,   59,  262,  256,  100,  101,   60,
   61,   62,  262,   45,  256,  347,  348,  187,   59,  261,
  262,  364,  260,  261,  123,  123,  365,  256,  237,  396,
  307,   59,  261,  262,  256,   58,   59,  175,   59,  133,
  133,   59,  267,  188,   59,  258,  271,  390,  391,  388,
  389,  383,  176,   41,  123,   41,   44,  119,  401,  402,
  256,  154,  155,  233,   40,  158,  123,  256,  206,  412,
  409,  256,  256,  262,  417,  169,   41,  420,  262,   44,
  363,  424,   41,   43,   43,   45,   45,   40,  212,  139,
  260,   59,  142,  187,  211,   58,   59,  106,  107,  192,
   59,  257,  195,   41,  257,   59,  257,  201,  202,  202,
  256,   58,  250,  256,  256,   40,  257,   40,  288,  289,
   59,   58,  257,  258,  269,   41,  262,  189,  252,  256,
  257,  255,  257,  258,  269,  256,  253,   59,  257,  233,
  310,  273,  274,  275,   40,  260,  272,  269,  267,  272,
  244,  244,  271,  257,  278,  279,  294,  327,  296,  257,
  257,  259,  260,  261,  256,  263,  258,  276,  266,  276,
  123,  269,  270,  343,  276,  313,  314,  301,  257,  349,
  176,  257,  257,  258,  276,  257,  256,  237,  358,  256,
  256,  187,  269,  317,  364,  365,  320,  261,  123,  261,
  257,  256,  259,  260,  342,   15,  263,  256,  265,  266,
  258,  335,  269,  270,  338,  256,  212,  258,  388,  389,
  390,  391,  273,  274,  275,  257,  258,  123,  256,  353,
  354,  401,  402,  256,  257,  256,  260,  233,  256,  409,
   40,  256,  412,   61,   41,  258,   43,  417,   45,   41,
  420,   59,  256,   59,  424,  349,  252,  256,   68,  255,
  257,  256,   59,  187,  260,  257,  123,  257,  269,  258,
  364,  365,  396,   59,  187,   59,  176,   59,   59,   59,
   59,  258,  278,  279,  256,   59,  256,  187,   58,  256,
   59,  125,  288,  289,  388,  389,  390,  391,  256,  256,
  256,  256,   59,   59,  257,  301,  259,  401,  402,  233,
  263,  256,  212,  266,  310,  409,  269,  270,  412,   41,
  233,  317,  258,  417,  320,  125,  420,  257,   59,   58,
  424,  327,  257,  233,  259,  256,  260,  257,  263,  335,
  265,  266,  338,   59,  269,  270,   40,  343,   59,   40,
  256,  258,  252,  349,  257,  255,   59,  353,  354,  169,
  260,  257,  358,  259,  288,  289,   59,  263,  364,  365,
  266,  257,  176,  269,  270,   59,  289,   59,  278,  279,
   59,   59,   58,  187,  256,   41,  310,  257,  288,  289,
  256,  201,  388,  389,  390,  391,   59,  310,   59,   59,
  396,  301,   41,  327,   41,  401,  402,  256,  212,  256,
  310,   41,  256,  409,  327,  256,  412,  317,   41,  343,
  320,  417,    0,  256,  420,  256,   59,  327,  424,  233,
  343,  125,   59,   59,  358,  335,  123,   59,  338,  125,
  130,  158,  343,  343,  103,  358,  288,  100,  252,  349,
  401,  255,  278,  353,  354,   53,  260,  257,  358,  259,
   39,   -1,   98,  263,  364,  365,  266,   -1,  176,  269,
  270,   -1,   -1,   -1,  278,  279,   -1,   -1,   -1,  187,
   -1,   -1,   -1,   -1,  288,  289,   -1,   -1,  388,  389,
  390,  391,   -1,   -1,   -1,   -1,  396,  301,   -1,   -1,
   -1,  401,  402,   -1,  212,   -1,  310,   40,   41,  409,
   -1,   -1,  412,  317,   -1,   -1,  320,  417,   -1,   -1,
  420,   -1,   -1,  327,  424,  233,   -1,   -1,   -1,   -1,
   -1,  335,   40,   -1,  338,   -1,   -1,   -1,   -1,  343,
   -1,   -1,   -1,   -1,  252,  349,   -1,  255,   -1,  353,
  354,   40,  260,   -1,  358,   -1,   -1,   -1,   -1,   -1,
  364,  365,   -1,  257,   -1,  259,   40,   -1,   -1,  263,
  278,  279,  266,   -1,   -1,  269,  270,   -1,   -1,   -1,
  288,  289,   -1,   -1,  388,  389,  390,  391,   40,   41,
  123,   -1,  396,  301,   -1,   -1,   -1,  401,  402,   -1,
   -1,   -1,  310,   40,   -1,  409,   -1,   -1,  412,  317,
   -1,   -1,  320,  417,   -1,  123,  420,   40,   41,  327,
  424,   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,   -1,
  338,   -1,   -1,   -1,  123,  343,   -1,   -1,   -1,   40,
   41,  349,   43,   -1,   45,  353,  354,   -1,   -1,  123,
  358,   -1,   -1,   -1,   -1,   -1,  364,  365,   59,   60,
   61,   62,   -1,   -1,   -1,   40,   41,   -1,   43,   -1,
   45,  123,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  388,  389,  390,  391,   59,   60,   61,   62,  396,   -1,
   40,   -1,   -1,  401,  402,   -1,   -1,   -1,   -1,   -1,
  123,  409,   -1,   -1,  412,   -1,   -1,   -1,   -1,  417,
   -1,   -1,  420,   -1,   -1,   40,  424,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  257,   -1,  259,  260,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   40,
   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,  123,  257,
   -1,  259,  260,  261,   40,  263,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,   -1,   -1,   -1,  257,  277,
  259,  260,  261,  123,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  257,   -1,  259,  260,   -1,  277,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  123,   -1,
   40,   -1,   -1,  277,   -1,  257,   -1,  259,   -1,   -1,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  257,   40,  259,   -1,  125,  277,  263,   -1,  265,  266,
   -1,   -1,  269,  270,  257,   -1,  259,   -1,   -1,  125,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   40,   -1,   -1,   -1,  277,  256,  257,   -1,  259,  260,
  261,   -1,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   -1,  273,  274,  275,   40,  277,   -1,   -1,   -1,
   -1,  256,  257,  123,  259,  260,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,  273,  274,
  275,   -1,  277,   40,   -1,   -1,  125,  257,   -1,  259,
  260,   -1,   -1,  263,  264,  265,  266,  267,  268,  269,
  270,  271,   40,   -1,   -1,   -1,   -1,  277,   -1,   -1,
   -1,   -1,  257,  123,  259,   -1,   -1,   40,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,
   -1,   -1,  277,   -1,   40,  256,  257,   -1,  259,   -1,
  125,   -1,  263,  264,   -1,  266,  267,  268,  269,  270,
  271,  257,   -1,  259,   -1,   -1,  277,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  123,   40,   -1,   -1,
   -1,  277,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   40,   -1,   -1,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   40,  259,
  123,   -1,   -1,  263,  264,  265,  266,  267,  268,  269,
  270,  271,   40,   -1,   -1,   -1,   -1,  277,  257,  125,
  259,   -1,   -1,   -1,  263,  264,  265,  266,  267,  268,
  269,  270,  271,   40,   -1,   -1,   -1,   -1,  277,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,  259,
  123,   -1,   40,  263,  264,  265,  266,  267,  268,  269,
  270,  271,   -1,   -1,   -1,   -1,   -1,  277,  125,   -1,
   -1,   40,  257,   -1,  259,   -1,   -1,   -1,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   40,   -1,   -1,
   -1,   -1,  277,   -1,   -1,  123,   -1,   -1,   -1,   -1,
  257,   -1,  259,   40,   -1,   -1,  263,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,   -1,   -1,  125,  257,
  277,  259,   40,   -1,   -1,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  257,   -1,  259,  125,   40,  277,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,  257,   -1,  259,  277,   40,  125,  263,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,   -1,
  123,  277,   40,   -1,   -1,   -1,   -1,   -1,   -1,  212,
   -1,   -1,   -1,   -1,  257,   -1,  259,   40,   -1,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
  257,   40,  259,   -1,  277,   -1,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  257,   -1,  259,   40,  252,
  277,  263,  255,  125,  266,   -1,   -1,  269,  270,  257,
   -1,  259,   -1,   -1,   -1,  263,  264,   -1,  266,  267,
  268,  269,  270,  271,   -1,  278,  279,   -1,   -1,  277,
  257,   -1,  259,   -1,   -1,   -1,  263,  264,   -1,  266,
  267,  268,  269,  270,  271,   -1,   -1,   -1,  301,  257,
  277,  259,  125,   -1,   -1,  263,  264,   -1,  266,  267,
  268,  269,  270,  271,  123,   -1,   -1,  320,  257,  277,
  259,   -1,   -1,   -1,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,  125,  257,  338,  259,   -1,  277,   -1,
  263,  264,   -1,  266,  267,  268,  269,  270,  271,   -1,
  257,  354,  259,   -1,  277,   -1,  263,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,   -1,   -1,   -1,  257,
  277,  259,   -1,   -1,   -1,  263,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,  257,   -1,  259,   -1,  277,
   -1,  263,  264,   -1,  266,  267,  268,  269,  270,  271,
   -1,   -1,  257,   -1,  259,  277,   -1,   -1,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,  257,
   -1,  259,  277,   -1,   -1,  263,  264,   -1,  266,  267,
  268,  269,  270,  271,  257,  251,  259,   -1,   -1,  277,
  263,   -1,  265,  266,   -1,   -1,  269,  270,  257,   -1,
  259,   -1,   -1,   -1,  263,   -1,  265,  266,  274,   -1,
  269,  270,   -1,   -1,   -1,  257,   -1,  259,   -1,   -1,
   -1,  263,   -1,  265,  266,   -1,   -1,  269,  270,   -1,
   -1,   -1,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,  334,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  347,  348,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  383,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=277;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"id","cte","If","then","Else","end_if","out",
"fun","Return","BREAK","i32","when","For","CONTINUE","f32","cadena",
"menorigual","mayorigual","distinto","opasignacion","Const",
};
final static String yyrule[] = {
"$accept : programa",
"programa : encabezado_prog bloque_sentencias",
"encabezado_prog : id",
"bloque_sentencias : bloque_sentencias '{' sentencia '}'",
"bloque_sentencias : '{' sentencia '}'",
"bloque_sentencias : '{' sentencia",
"bloque_sentencias : sentencia '}'",
"declaracion_const : Const lista_de_asignacion_const ';'",
"declaracion_const : Const lista_de_asignacion_const error",
"declaracion_const : Const ';' error",
"lista_de_asignacion_const : decl_const",
"lista_de_asignacion_const : lista_de_asignacion_const ',' decl_const",
"decl_const : id op_asignacion cte",
"decl_const : id op_asignacion error",
"decl_const : id cte error",
"decl_const : id error",
"bloque_sentencias_For : sentencias_For",
"bloque_sentencias_For : bloque_sentencias_For sentencias_For",
"sentencia : declarativas",
"sentencia : ejecutables",
"sentencia : sentencia declarativas",
"sentencia : sentencia ejecutables",
"declarativas : tipo lista_de_variables ';'",
"declarativas : tipo lista_de_variables error",
"declarativas : tipo error",
"declarativas : declaracion_func",
"declarativas : declaracion_const",
"declarativas : sentencia_when",
"bloque_ejecutables : bloque_ejecutables ejecutables",
"bloque_ejecutables : ejecutables",
"ejecutables : asignacion",
"ejecutables : salida",
"ejecutables : sentencia_If",
"ejecutables : expresion_For",
"ejecutables : sentencia_BREAK error",
"ejecutables : sentencia_CONTINUE error",
"lista_de_variables : id",
"lista_de_variables : lista_de_variables ',' id",
"lista_de_variables : lista_de_variables id error",
"encabezado_func : fun id '('",
"encabezado_func : fun '(' error",
"parametro : tipo id",
"parametro : id error",
"asig_fun : ':' tipo",
"asig_fun :",
"cola_func : ')' asig_fun '{' cuerpo_fun '}'",
"declaracion_func : encabezado_func parametro cola_func",
"declaracion_func : encabezado_func parametro ',' parametro cola_func",
"declaracion_func : encabezado_func parametro ',' parametro ',' parametro cola_func",
"declaracion_func : encabezado_func cola_func",
"ret_fun : Return '(' expresion ')' ';'",
"ret_fun : Return expresion ')' ';'",
"ret_fun : Return '(' expresion ';'",
"ret_fun : Return expresion ';'",
"ret_fun : Return '(' expresion ')' error",
"cuerpo_fun : bloque_sentencias_funcion",
"ejecutables_funcion : asignacion",
"ejecutables_funcion : sentencia_if_funcion",
"ejecutables_funcion : salida",
"ejecutables_funcion : sentencia_for_funcion",
"ejecutables_funcion : ret_fun",
"ejecutables_funcion : sentencia_BREAK error",
"ejecutables_funcion : sentencia_CONTINUE error",
"bloque_sentencias_ejecutables_funcion : bloque_sentencias_ejecutables_funcion ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion : ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion declarativas",
"bloque_sentencias_funcion : ejecutables_funcion",
"bloque_sentencias_funcion : declarativas",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion end_if ';'",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion Else cuerpo_Else_funcion end_if ';'",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion Else cuerpo_Else_funcion end_if error",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion error",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion Else cuerpo_Else_funcion error ';'",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion error",
"cuerpo_If_funcion : '{' bloque_sentencias_ejecutables_funcion '}'",
"cuerpo_If_funcion : ejecutables_funcion",
"cuerpo_Else_funcion : '{' bloque_sentencias_ejecutables_funcion '}'",
"cuerpo_Else_funcion : ejecutables_funcion",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion end_if ';'",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion Else cuerpo_Else_for_funcion end_if ';'",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion Else cuerpo_Else_for_funcion end_if error",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion error",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion Else cuerpo_Else_for_funcion error ';'",
"sentencia_if_for_funcion : If condicion_if cuerpo_If_for_funcion error",
"cuerpo_If_for_funcion : '{' bloque_sentencias_For_funcion '}'",
"cuerpo_If_for_funcion : sentencias_For_funcion",
"cuerpo_Else_for_funcion : '{' bloque_sentencias_For_funcion '}'",
"cuerpo_Else_for_funcion : sentencias_For_funcion",
"cola_For_funcion : '{' bloque_sentencias_For_funcion '}' ';'",
"cola_For_funcion : sentencias_For_funcion",
"sentencia_for_funcion : For '(' asignacion_for ';' condicion_for ';' operacion_for ')' cola_For_funcion",
"sentencia_for_funcion : For asignacion_for ';' condicion_for ';' operacion_for ')' cola_For_funcion error",
"sentencia_for_funcion : For asignacion_for ';' condicion_for ';' operacion_for cola_For_funcion error",
"sentencia_for_funcion : For '(' asignacion_for ':' condicion_for ':' operacion_for ')' cola_For_funcion error",
"sentencia_for_funcion : id ':' For '(' asignacion_for ';' condicion_for ';' operacion_for ')' cola_For_funcion",
"asignacion_for : id op_asignacion cte",
"operacion_for : signo id",
"sentencias_For_funcion : asignacion",
"sentencias_For_funcion : salida",
"sentencias_For_funcion : sentencia_for_funcion",
"sentencias_For_funcion : ret_fun",
"sentencias_For_funcion : sentencia_BREAK",
"sentencias_For_funcion : sentencia_CONTINUE",
"sentencias_For_funcion : sentencia_if_for_funcion",
"sentencias_For_funcion : declarativas error",
"bloque_sentencias_For_funcion : sentencias_For_funcion",
"bloque_sentencias_For_funcion : bloque_sentencias_For_funcion sentencias_For_funcion",
"op_asignacion : opasignacion",
"op_asignacion : ':' '='",
"op_asignacion : '='",
"asignacion : id op_asignacion expresion ';'",
"asignacion : id op_asignacion expresion error",
"asignacion : id op_asignacion for_else_cte ';'",
"for_else_cte : expresion_For Else cte",
"for_else_cte : expresion_For error",
"salida : out '(' cadena ')' ';'",
"salida : out '(' cadena ')' error",
"salida : out '(' cadena error ';'",
"salida : out cadena error ';'",
"salida : '(' cadena error",
"salida : out '(' ')' error ';'",
"sentencia_If : If condicion_if cuerpo_If end_if ';'",
"sentencia_If : If condicion_if then cuerpo_If end_if error",
"sentencia_If : If condicion_if then cuerpo_If error",
"cuerpo_If : cuerpo_Then cuerpo_Else",
"cuerpo_If : cuerpo_Then",
"cuerpo_If : cuerpo_Else",
"cuerpo_Then : then '{' bloque_ejecutables '}'",
"cuerpo_Then : then ejecutables",
"cuerpo_Else : Else '{' bloque_ejecutables '}'",
"cuerpo_Else : Else ejecutables",
"sentencia_if_for : If condicion_if then cuerpo_If_for end_if ';'",
"sentencia_if_for : If condicion_if then cuerpo_If_for Else cuerpo_Else_for end_if ';'",
"sentencia_if_for : If condicion_if then cuerpo_If_for Else cuerpo_Else_for end_if error",
"sentencia_if_for : If condicion_if then cuerpo_If_for error",
"sentencia_if_for : If condicion_if then cuerpo_If_for Else cuerpo_Else_for error ';'",
"sentencia_if_for : If condicion_if cuerpo_If_for error",
"cuerpo_If_for : '{' bloque_sentencias_For '}'",
"cuerpo_If_for : sentencias_For",
"cuerpo_Else_for : '{' bloque_sentencias_For '}'",
"cuerpo_Else_for : sentencias_For",
"sentencia_when : when '(' condicion_for ')' cuerpo_when ';'",
"sentencia_when : when condicion_for ')' cuerpo_when ';' error",
"sentencia_when : when '(' condicion_for cuerpo_when ';' error",
"cuerpo_when : then '{' sentencia '}'",
"cuerpo_when : then '{' sentencia error",
"cuerpo_when : then sentencia '}' error",
"cola_For : '{' bloque_sentencias_For '}' ';'",
"cola_For : sentencias_For",
"encabezado_For : For '(' detalles_for ')' cola_For",
"encabezado_For : For id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For error",
"encabezado_For : For id op_asignacion cte ';' condicion_for ';' signo id cola_For error",
"encabezado_For : For '(' id op_asignacion cte ':' condicion_for ':' signo id ')' cola_For error",
"encabezado_For : id ':' For '(' id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For",
"detalles_for : asignacion_for ';' condicion_operacion_for",
"condicion_operacion_for : condicion_for ';' operacion_for",
"condicion_for : id comparador cte",
"signo : '+'",
"signo : '-'",
"sentencias_For : asignacion",
"sentencias_For : salida",
"sentencias_For : expresion_For",
"sentencias_For : sentencia_if_for",
"sentencias_For : sentencia_BREAK",
"sentencias_For : sentencia_CONTINUE",
"sentencias_For : declarativas error",
"sentencias_For : ret_fun error",
"expresion_For : encabezado_For",
"sentencia_BREAK : BREAK ';'",
"sentencia_BREAK : BREAK cte ';'",
"sentencia_BREAK : BREAK error",
"sentencia_CONTINUE : CONTINUE ';'",
"sentencia_CONTINUE : CONTINUE ':' id ';'",
"sentencia_CONTINUE : CONTINUE id ';' error",
"sentencia_CONTINUE : CONTINUE error",
"condicion_if : '(' expresion_relacional ')'",
"condicion_if : expresion_relacional ')'",
"condicion_if : '(' expresion_relacional",
"condicion_if : expresion_relacional",
"expresion_relacional : expresion comparador expresion",
"expresion : expresion signo termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : id",
"factor : cte",
"factor : '-' cte",
"comparador : '<'",
"comparador : '>'",
"comparador : menorigual",
"comparador : mayorigual",
"comparador : '='",
"comparador : distinto",
"tipo : i32",
"tipo : f32",
};

//#line 431 "gramatica.y"

private AnalizadorLexico lexico;
private AnalizadorSintactico sintactico;

public void setLexico(AnalizadorLexico lexico) { this.lexico = lexico; }

public void setSintactico(AnalizadorSintactico sintactico) { this.sintactico = sintactico; }

public AnalizadorLexico getLexico() { return this.lexico; }

public AnalizadorSintactico getSintactico() { return this.sintactico; }

public int yylex() {
    int token = lexico.procesarYylex();
    if (lexico.getRefTablaSimbolos() != -1)
        yylval = new ParserVal(lexico.getRefTablaSimbolos());
    return token;
}

public void yyerror(String string) {
	//sintactico.addErrorSintactico("par: " + string);
}


//#line 906 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 19 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("raiz", val_peek(0))); sintactico.setRaiz(yyval); }
break;
case 3:
//#line 26 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("primera_sentencia", val_peek(1)));}
break;
case 4:
//#line 27 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("primera_sentencia", val_peek(1)));}
break;
case 5:
//#line 28 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar el bloque.");}
break;
case 6:
//#line 29 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir el bloque.");}
break;
case 7:
//#line 32 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una declaración de CONSTANTE. (Línea " + AnalizadorLexico.LINEA + ")");
							  yyval = new ParserVal(sintactico.crearNodoControl("lista_ctes", val_peek(1)));
							}
break;
case 8:
//#line 35 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ; al final de la declaracion de constantes.");}
break;
case 9:
//#line 36 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): No se reconoce una lista de constantes.");}
break;
case 10:
//#line 39 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("declaracion_constante", val_peek(0), null));}
break;
case 11:
//#line 40 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("declaracion_constante", val_peek(0), val_peek(2)));}
break;
case 12:
//#line 43 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("=:", new ParserVal(sintactico.crearHoja(val_peek(2).ival)), new ParserVal(sintactico.crearHoja(val_peek(0).ival))));}
break;
case 13:
//#line 44 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta constante luego de la asignacion.");}
break;
case 14:
//#line 45 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta el operador asignacion luego del identificador.");}
break;
case 15:
//#line 46 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta la asignacion luego del identificador.");}
break;
case 16:
//#line 50 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 17:
//#line 51 "gramatica.y"
{ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
                                                              yyval = modificado;}
break;
case 18:
//#line 57 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 19:
//#line 58 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 20:
//#line 59 "gramatica.y"
{
							ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
							yyval = modificado;
						}
break;
case 21:
//#line 63 "gramatica.y"
{
							ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
							yyval = modificado;
						}
break;
case 22:
//#line 70 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una declaración de variable. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 23:
//#line 71 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): falta ';' al final de la declaración de variable."); }
break;
case 24:
//#line 72 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): falta el identificador de variable"); }
break;
case 28:
//#line 79 "gramatica.y"
{
							ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
							yyval = modificado;
						}
break;
case 29:
//#line 83 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 34:
//#line 90 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 35:
//#line 91 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 38:
//#line 96 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta una ',' entre identIficadores."); }
break;
case 39:
//#line 99 "gramatica.y"
{ sintactico.addAnalisis( "Se reconocio declaracion de funcion (Línea " + AnalizadorLexico.LINEA + ")" ); }
break;
case 40:
//#line 100 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. ENC_FUN (Línea " + AnalizadorLexico.LINEA + "): problema en la definición de la función."); }
break;
case 42:
//#line 104 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. PARAM(Línea " + AnalizadorLexico.LINEA + "): falta TIPO en parametros."); }
break;
case 44:
//#line 109 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. COLA_FUN(Línea " + AnalizadorLexico.LINEA + "): falta TIPO "); }
break;
case 45:
//#line 111 "gramatica.y"
{ sintactico.addAnalisis("Se reconoce TIPO funcion (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 48:
//#line 117 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. DECLARACION_FUN(Línea " + AnalizadorLexico.LINEA + "): no se permiten mas de 2 parametros "); }
break;
case 50:
//#line 121 "gramatica.y"
{ sintactico.addAnalisis("Se reconoce retorno de funcion(Línea " + AnalizadorLexico.LINEA + ") "); }
break;
case 51:
//#line 122 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN1 (Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 52:
//#line 123 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN2(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 53:
//#line 124 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN3(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 54:
//#line 125 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN4(Línea " + AnalizadorLexico.LINEA + "): falta ; "); }
break;
case 61:
//#line 136 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 62:
//#line 137 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 63:
//#line 141 "gramatica.y"
{
													ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
													yyval = modificado;
											 	}
break;
case 64:
//#line 145 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 65:
//#line 148 "gramatica.y"
{
										ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
										yyval = modificado;
									}
break;
case 66:
//#line 152 "gramatica.y"
{
									ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
									yyval = modificado;
								}
break;
case 67:
//#line 156 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 68:
//#line 157 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 69:
//#line 160 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 70:
//#line 161 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 71:
//#line 162 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 72:
//#line 163 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 73:
//#line 164 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 74:
//#line 165 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta la declaración de then."); }
break;
case 79:
//#line 176 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 80:
//#line 177 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 81:
//#line 178 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 82:
//#line 179 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 83:
//#line 180 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 84:
//#line 181 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta la declaración de then."); }
break;
case 91:
//#line 197 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 92:
//#line 198 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 93:
//#line 199 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 94:
//#line 200 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR3(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 95:
//#line 201 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 96:
//#line 204 "gramatica.y"
{	ParserVal identificador = new ParserVal(sintactico.crearHoja(val_peek(2).ival));
					ParserVal constante = new ParserVal(sintactico.crearHoja(val_peek(0).ival));
					yyval = new ParserVal(sintactico.crearNodoControl("asignacionFor",new ParserVal(sintactico.crearNodo("=:",identificador,constante))));}
break;
case 97:
//#line 209 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("operacionFor",new ParserVal(sintactico.crearNodo(val_peek(1).sval,new ParserVal(sintactico.crearHoja(val_peek(0).ival)),null))));}
break;
case 105:
//#line 219 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 106:
//#line 223 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 107:
//#line 224 "gramatica.y"
{
										ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
										yyval = modificado;
									}
break;
case 108:
//#line 233 "gramatica.y"
{ yyval.sval = new String("=:"); }
break;
case 109:
//#line 234 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP1(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 110:
//#line 235 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 111:
//#line 239 "gramatica.y"
{	ParserVal identificador = new ParserVal(sintactico.crearHoja(val_peek(3).ival));
						yyval = new ParserVal(sintactico.crearNodo("=:", identificador , val_peek(1)));
					   }
break;
case 112:
//#line 242 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP(Línea " + (AnalizadorLexico.LINEA) + "): falta ';' luego de la ASIG."); }
break;
case 113:
//#line 243 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("=:", val_peek(3), val_peek(1)));}
break;
case 114:
//#line 247 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("else", val_peek(2), val_peek(0)));}
break;
case 115:
//#line 248 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): problema en devolver valor por defecto  ");}
break;
case 117:
//#line 252 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de la impresión de cadena."); }
break;
case 118:
//#line 253 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): cierre erróneo de la lista de parámetros de out."); }
break;
case 119:
//#line 254 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): los parámetros de out deben estar entre paréntesis."); }
break;
case 120:
//#line 255 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): se esperaba out, se encontró '('."); }
break;
case 121:
//#line 256 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta declarar una cadena para PRINT."); }
break;
case 122:
//#line 260 "gramatica.y"
{ 	yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));
										sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 123:
//#line 262 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 124:
//#line 263 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 125:
//#line 267 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo", val_peek(1), val_peek(0)));}
break;
case 126:
//#line 268 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo", val_peek(0), null));}
break;
case 127:
//#line 269 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta bloque then."); }
break;
case 128:
//#line 273 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(1)));}
break;
case 129:
//#line 274 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(0)));}
break;
case 130:
//#line 278 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(1)));}
break;
case 131:
//#line 279 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(0)));}
break;
case 132:
//#line 282 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 133:
//#line 283 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 134:
//#line 284 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 135:
//#line 285 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 136:
//#line 286 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 137:
//#line 287 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta la declaración de then."); }
break;
case 142:
//#line 300 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia when");
									yyval = new ParserVal(sintactico.crearNodo("when", val_peek(3), val_peek(1)));}
break;
case 143:
//#line 302 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta abrir paréntesis la condicion"); }
break;
case 144:
//#line 303 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta paréntesis de cierre en la condicion."); }
break;
case 145:
//#line 307 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1)));}
break;
case 146:
//#line 308 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar la llave del bloque."); }
break;
case 147:
//#line 309 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir la llave del bloque"); }
break;
case 148:
//#line 313 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(2)));}
break;
case 149:
//#line 314 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(0)));}
break;
case 150:
//#line 318 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")");
									yyval = new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)));
									}
break;
case 151:
//#line 321 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 152:
//#line 322 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 153:
//#line 323 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR3(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 154:
//#line 324 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 155:
//#line 327 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("encabezado for",val_peek(2), val_peek(0)));}
break;
case 156:
//#line 330 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("condicion y operacion for",  val_peek(2), val_peek(0)));}
break;
case 157:
//#line 333 "gramatica.y"
{	ParserVal identificador = new ParserVal(sintactico.crearHoja(val_peek(2).ival));
					ParserVal constante = new ParserVal(sintactico.crearHoja(val_peek(0).ival));
					yyval = new ParserVal(sintactico.crearNodoControl("cond", new ParserVal(sintactico.crearNodo(val_peek(1).sval,identificador,constante))));}
break;
case 158:
//#line 339 "gramatica.y"
{yyval.sval = new String("+");}
break;
case 159:
//#line 340 "gramatica.y"
{yyval.sval = new String("-");}
break;
case 166:
//#line 350 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 167:
//#line 351 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten retornos fuera de una funcion"); }
break;
case 169:
//#line 358 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia break (Línea " + AnalizadorLexico.LINEA + ")");
				yyval = new ParserVal(sintactico.crearNodoControl("break",null));}
break;
case 170:
//#line 360 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia break con retorno de valor (Línea " + AnalizadorLexico.LINEA + ")");
                		yyval = new ParserVal(sintactico.crearNodoControl("break", new ParserVal(sintactico.crearHoja(val_peek(1).ival))));}
break;
case 171:
//#line 362 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de BREAK."); }
break;
case 172:
//#line 365 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia continue (Línea " + AnalizadorLexico.LINEA + ")");
						yyval = new ParserVal(sintactico.crearNodoControl("continue",null));}
break;
case 173:
//#line 367 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia continue con etiquetado(Línea " + AnalizadorLexico.LINEA + ")");
                   				yyval = new ParserVal(sintactico.crearNodoControl("continue", new ParserVal(sintactico.crearHoja(val_peek(1).ival))));}
break;
case 174:
//#line 369 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ':'CONTINUE."); }
break;
case 175:
//#line 370 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego del CONTINUE "); }
break;
case 176:
//#line 374 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cond",val_peek(1)));}
break;
case 177:
//#line 375 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 178:
//#line 376 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 179:
//#line 377 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 180:
//#line 381 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodo(val_peek(1).sval, val_peek(2), val_peek(0)));}
break;
case 181:
//#line 385 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo(val_peek(1).sval, val_peek(2), val_peek(0))); }
break;
case 183:
//#line 390 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("*",val_peek(2),val_peek(0)));}
break;
case 184:
//#line 391 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("/",val_peek(2),val_peek(0)));}
break;
case 186:
//#line 396 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearHoja(val_peek(0).ival));}
break;
case 187:
//#line 397 "gramatica.y"
{
                        sintactico.setTipo(sintactico.getTipoFromTS(val_peek(0).ival));
                        if (sintactico.getTipo().equals("LONG"))
                             sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
                        yyval = new ParserVal(sintactico.crearHoja(val_peek(0).ival));
                  }
break;
case 188:
//#line 403 "gramatica.y"
{
                        sintactico.setNegativoTablaSimb(val_peek(0).ival);
                        yyval = new ParserVal(sintactico.crearHoja(val_peek(1).ival));
                    }
break;
case 189:
//#line 410 "gramatica.y"
{ yyval.sval = new String("<"); }
break;
case 190:
//#line 411 "gramatica.y"
{ yyval.sval = new String(">"); }
break;
case 191:
//#line 412 "gramatica.y"
{ yyval.sval = new String("<="); }
break;
case 192:
//#line 413 "gramatica.y"
{ yyval.sval = new String(">="); }
break;
case 193:
//#line 414 "gramatica.y"
{ yyval.sval = new String("="); }
break;
case 194:
//#line 415 "gramatica.y"
{ yyval.sval = new String("=!"); }
break;
case 195:
//#line 419 "gramatica.y"
{
                    sintactico.setTipo("i32");
                    yyval.sval = new String("i32");
                }
break;
case 196:
//#line 423 "gramatica.y"
{
                    sintactico.setTipo("f32");
                    yyval.sval = new String("f32");
                }
break;
//#line 1683 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
