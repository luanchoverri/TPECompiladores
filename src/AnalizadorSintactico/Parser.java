//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"

package AnalizadorSintactico;

import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import ArbolSintactico.NodoHijo;
import ArbolSintactico.Nodo;

import java.util.Stack;


//#line 29 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short id=257;
public final static short cte=258;
public final static short If=259;
public final static short then=260;
public final static short Else=261;
public final static short end_if=262;
public final static short out=263;
public final static short fun=264;
public final static short Return=265;
public final static short BREAK=266;
public final static short i32=267;
public final static short when=268;
public final static short For=269;
public final static short CONTINUE=270;
public final static short f32=271;
public final static short cadena=272;
public final static short menorigual=273;
public final static short mayorigual=274;
public final static short distinto=275;
public final static short opasignacion=276;
public final static short Const=277;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    2,    2,    2,    2,    4,    4,    4,    5,
    5,    5,    6,    6,    6,    6,    6,    8,    8,    3,
    3,    3,    3,   10,   10,   10,   10,   10,   16,   16,
   11,   11,   11,   11,   11,   11,   11,   13,   13,   13,
   24,   24,   25,   25,   26,   28,   28,   28,   29,   30,
   30,   14,   31,   31,   31,   31,   31,   27,   34,   34,
   34,   34,   34,   34,   34,   34,   37,   37,   33,   33,
   33,   33,    7,    7,    7,   17,   17,   17,   17,   38,
   38,   18,   18,   18,   18,   18,   18,   19,   19,   19,
   40,   40,   40,   40,   41,   41,   41,   44,   44,   45,
   45,   48,   48,   48,   49,   49,   49,   50,   50,   51,
   51,   35,   35,   35,   52,   52,   52,   53,   53,   54,
   54,   55,   55,   55,   56,   56,   56,   57,   57,   58,
   58,   46,   47,   42,   15,   15,   15,   61,   62,   62,
   62,   20,   20,   20,   20,   39,   39,   39,   63,   66,
   67,   67,   64,   64,   64,   71,   71,    9,    9,    9,
    9,    9,    9,    9,    9,    9,   72,   72,   72,   36,
   36,   36,   36,   65,   68,   68,   60,   60,   60,   60,
   60,   60,   60,   60,   60,   59,   59,   59,   22,   22,
   22,   23,   23,   23,   23,   21,   73,   73,   73,   43,
   32,   32,   74,   74,   74,   70,   70,   70,   69,   69,
   69,   69,   69,   69,   12,   12,
};
final static short yylen[] = {                            2,
    2,    1,    4,    3,    2,    2,    3,    3,    3,    1,
    3,    3,    3,    4,    3,    3,    2,    1,    2,    1,
    1,    2,    2,    3,    3,    1,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    2,    2,    2,    3,    1,
    2,    2,    2,    0,    3,    0,    1,    3,    2,    5,
    6,    2,    5,    5,    5,    4,    5,    1,    1,    1,
    1,    1,    1,    1,    2,    2,    2,    1,    2,    2,
    1,    1,    1,    3,    2,    4,    4,    3,    3,    4,
    2,    5,    5,    5,    4,    3,    5,    5,    6,    5,
    3,    2,    2,    1,    2,    1,    1,    4,    2,    4,
    2,    5,    5,    4,    2,    1,    2,    4,    2,    4,
    2,    5,    5,    4,    2,    1,    2,    4,    2,    4,
    2,    5,    5,    4,    2,    1,    2,    4,    2,    4,
    2,    1,    1,    1,    6,    6,    6,    1,    4,    4,
    4,    5,    5,    4,    7,    5,    5,    4,    3,    3,
    3,    5,    4,    1,    4,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    2,    4,    1,    4,    5,
    5,    4,    7,    3,    2,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    1,    2,    1,    2,    3,
    2,    2,    4,    4,    2,    5,    0,    3,    1,    3,
    3,    1,    3,    3,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,
};
final static short yydefred[] = {                         0,
    2,    0,    0,    0,    0,    0,    0,    0,  215,    0,
    0,    0,  216,    0,    0,    0,    0,    0,   27,   20,
   21,    0,    0,   26,   28,   31,   32,   33,   34,   35,
    0,    0,    0,    0,    0,   73,    0,    0,    0,    0,
    0,   38,  206,  207,    0,    0,    0,    0,    0,  205,
    0,    0,    0,   49,    0,  191,    0,  189,    0,  138,
    0,    0,    0,    0,    0,  195,    0,  192,    0,    0,
    0,    0,   10,    0,    0,    0,    6,   22,   23,    0,
    0,   36,   37,    0,    0,   52,   39,    0,    0,    0,
    0,   75,    0,    0,   79,    0,   78,    0,  208,    0,
  211,  212,  214,  157,  213,  156,  209,  210,    0,    0,
    0,  133,    0,    0,   97,    0,    0,   92,    0,    0,
    0,    0,    0,    0,    0,   47,    0,  190,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  154,    0,  158,
  159,  160,  162,  163,  164,    0,  161,    0,    0,    0,
    0,   17,    0,    0,    9,    8,    7,    0,    0,    4,
   86,    0,   24,   25,    0,    0,    0,    0,   72,   59,
   61,   62,    0,    0,    0,   64,    0,   71,   60,   63,
    0,   74,    0,    0,    0,    0,   77,   76,   81,    0,
   91,    0,    0,  132,    0,  134,    0,   95,    0,    0,
   99,    0,  101,  203,  204,   85,    0,    0,    0,   42,
   41,    0,    0,    0,    0,    0,  174,    0,    0,    0,
    0,    0,   18,    0,  165,  166,  144,    0,  149,    0,
  194,  193,   16,   15,   13,    0,   11,   12,    3,    0,
    0,    0,    0,    0,   65,   66,   45,   70,   69,    0,
  198,  196,    0,    0,    0,    0,   90,    0,   88,   30,
    0,    0,   84,   83,   82,   87,   48,    0,    0,    0,
    0,    0,    0,  142,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   19,  143,    0,    0,   14,   50,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  177,  178,  181,  182,  183,  180,  179,  184,  168,    0,
    0,    0,    0,  148,   80,   89,   98,   29,  100,   43,
   51,  137,  135,    0,    0,  136,    0,  109,    0,  111,
  104,    0,  105,  107,    0,    0,   56,    0,  155,  153,
    0,  151,    0,  150,    0,    0,    0,    0,  119,    0,
  121,  114,    0,  115,  117,    0,    0,  188,    0,  186,
    0,  185,  172,  145,  146,  147,  140,  139,  141,    0,
    0,  103,  102,   55,   57,   53,   54,    0,  176,  175,
    0,   68,    0,    0,  113,  112,  170,    0,    0,    0,
    0,    0,    0,  187,  171,  108,  110,  152,    0,  118,
   67,  120,    0,  129,    0,  131,  124,    0,  125,  127,
  169,  167,  173,    0,    0,  123,  122,  128,  130,
};
final static short yydgoto[] = {                          2,
    3,   17,   18,   19,   72,   73,   41,  222,  138,  139,
   21,   22,   23,   24,   25,  261,   26,   27,   28,   29,
   30,   31,   32,  126,  269,   86,  175,  127,   33,   34,
  146,   47,  177,  382,  179,  307,  383,   97,   98,   48,
  113,  197,   49,  114,  115,  116,  117,  147,  277,  278,
  279,  293,  294,  295,  308,  390,  391,  392,  359,  309,
   61,  216,   64,  148,   65,  229,  230,  344,  109,   50,
  110,  310,   91,   51,
};
final static short yysindex[] = {                      -207,
    0,    0,  922,  -30,  -18,  -27,  -20,   83,    0,   20,
    7,  -41,    0,  -36, 1093, -214,  -44,  952,    0,    0,
    0, -190,   44,    0,    0,    0,    0,    0,    0,    0,
 -161, -146,   91,   72,   43,    0, -190,  -52,   49,  -57,
   36,    0,    0,    0,  -47,   49,  141,  -85,  167,    0,
   33,   -2,  -39,    0, -149,    0,  166,    0,   49,    0,
  187,  -28,   16,  507,  170,    0,  258,    0,   65,  -32,
  111,   76,    0,  975,  115, 1093,    0,    0,    0,  288,
  123,    0,    0, -149,  999,    0,    0,  349,  135,  351,
  357,    0,  361,   17,    0,   95,    0, -224,    0,  369,
    0,    0,    0,    0,    0,    0,    0,    0,   49,   49,
  133,    0,  155,  152,    0,  599, 1127,    0,   49,   49,
  363,   29,  171,  172,  177,    0,   92,    0,  396,  184,
  385,  189,  407,  -18,   23, 1023,  656,    0,  204,    0,
    0,    0,    0,    0,    0,  205,    0,  206,  207,  210,
  404,    0,  211,   94,    0,    0,    0,  213,  212,    0,
    0, 1055,    0,    0,  112,  -19,  -18,   34,    0,    0,
    0,    0,  215,  218,  353,    0,  999,    0,    0,    0,
   16,    0,   49,  420,   16,  619,    0,    0,    0,  222,
    0,   74,   33,    0, -208,    0,  423,    0,   -6,  523,
    0,  523,    0,    0,    0,    0,  424,   27,  427,    0,
    0, -149,  429,  184, 1039,  430,    0,  656,  133,   49,
  126,  672,    0,  235,    0,    0,    0,   54,    0,  435,
    0,    0,    0,    0,    0,  238,    0,    0,    0,  429,
  -50,  133,   16,  640,    0,    0,    0,    0,    0,  457,
    0,    0,  460,  656,  246,  449,    0,  253,    0,    0,
  448,  467,    0,    0,    0,    0,    0,  -78,  254,   62,
 1093, 1076,  255,    0,  689,  704, -179,  152,  259,  151,
  261,  462,   67,    0,    0,   45,   57,    0,    0,  479,
  257, 1108, -178,  152,  273,  483,  -18,  720,  741,  275,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  277,
  656,  656,  278,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  767,  279,    0, 1023,    0, 1023,    0,
    0,   84,    0,    0,  280,   86,    0,  283,    0,    0,
   49,    0,  284,    0,  274,   16,    3,  107,    0,  107,
    0,    0,  101,    0,    0,  741,  133,    0,  791,    0,
  285,    0,    0,    0,    0,    0,    0,    0,    0,  819,
  840,    0,    0,    0,    0,    0,    0,  268,    0,    0,
  503,    0,  173,  296,    0,    0,    0,  855,  872, -163,
  152,  289,  102,    0,    0,    0,    0,    0,  741,    0,
    0,    0,  720,    0,  720,    0,    0,  104,    0,    0,
    0,    0,    0,  888,  907,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,  487,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  550,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  487,    0,    0,    0,  511,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  143,    0,
  347,    0,    0,    0,  124,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  124,    0,    0,    0,    0,    0,  515,
    0,    0,   64,    0,    0,    0,    0,    0,    0,  164,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1154,    0,    0, -132,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  487,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  433,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -38,  390,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  311,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  445,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -105,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -92,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -90,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,  -10,    0,    0,  -26,  -11, -129,  -95,   -3,
  -12,  -15,  468,    0,    0,  367,   70,  201,    0,  -45,
  -40,  320,  440,  370,  335,    0,    0,  495,    0,    0,
  458,  -37,    0,  -29,    0,  -49,  231,    0,    0, -118,
  472,  188,  103,    0,  473, -166,  276,    0,    0,    0,
  308,    0,    0,  294,    0,    0,    0,  200, -185,  239,
  534,  380,  -56,  443,    0,    0,    0,    0,  371,  -31,
  310, -255,    0,  491,
};
final static int YYTABLESIZE=1424;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         20,
   95,  123,  200,   96,   74,   79,  133,   90,   89,   39,
   89,   20,   53,   37,   78,  219,   69,   68,  142,   55,
   39,   46,   71,  143,   37,  131,   45,   38,   40,  131,
   40,  189,   40,   39,    5,  180,  190,  186,  241,  125,
  223,   40,   39,  361,  172,  159,   63,  257,  242,    1,
  132,   38,  275,  196,   40,  178,  185,   75,  154,   59,
  241,   79,  220,   40,   45,  162,   35,   45,  125,  208,
   78,  192,   20,  243,  119,  291,  331,  352,   76,  120,
   45,  169,  196,  196,  341,  265,   37,  204,  205,   45,
  142,  142,  407,   45,   82,  143,  143,  221,  196,  106,
  387,  104,   81,  201,  203,  206,  206,  124,  206,   83,
  206,  244,   60,  107,  105,  108,  106,    9,  104,  158,
  323,   13,  206,   96,  250,  340,  284,  180,  253,   96,
   84,  237,  213,  140,  157,  212,  172,  106,  236,  104,
  142,   58,  373,  413,  376,  143,   16,  249,  100,   79,
  106,  251,  240,  188,  170,  212,  106,    5,   78,  386,
  412,   60,  417,  116,   46,  126,  282,   46,  106,  116,
  104,  126,  142,  248,  111,  112,  142,  143,  357,  328,
  330,  143,  280,  106,  281,  104,  296,  260,    9,  260,
  388,  336,   13,  106,   85,  104,  125,  370,   92,  371,
  107,  105,  108,  303,  272,  140,  140,  118,  142,  335,
   99,   20,   16,  143,   66,   67,   88,  414,  290,  415,
   70,  200,  200,  152,  128,  153,   35,  130,  149,  142,
  142,  223,  122,  223,  143,  143,   54,   35,   43,   44,
  300,  180,  180,   36,   52,   36,  170,   36,  318,  318,
  172,  172,  320,  121,  342,  140,   36,  303,  303,   79,
  324,  349,  351,   62,  141,  142,  142,   20,   78,   36,
  143,  143,   62,   62,  284,  284,   43,   44,   36,   43,
   44,  142,  264,  142,  207,  171,  143,  140,  143,  381,
   62,  140,   93,   44,  300,  300,   16,  400,  180,   35,
  180,   43,   44,  378,   94,   43,   44,  172,  398,  172,
  106,   79,  104,  301,  343,  303,  150,  322,  303,  206,
   78,  151,  339,  140,  142,  142,  101,  102,  103,  143,
  143,  156,   70,  180,  180,   16,  141,  141,   56,  372,
   57,  375,  172,  172,  140,  140,  163,  303,  303,  234,
  187,  235,  300,  401,  401,  300,  385,  411,  303,  416,
  170,  170,  303,  347,  303,  167,  155,  301,  301,    6,
  161,  135,    8,  303,  303,  168,   12,  171,  164,  348,
  140,  140,  258,  144,  300,  300,  141,  202,  181,  202,
  182,  202,  194,  112,  183,  300,  140,  184,  140,  300,
   39,  300,   94,   94,  173,  202,  202,  202,  202,  191,
  300,  300,  112,  101,  102,  103,  196,  170,  141,  170,
  402,  206,  141,   93,   93,  301,  209,  210,  301,  347,
  201,  167,  201,  211,  201,    6,  214,  135,    8,  140,
  140,  168,   12,  215,  302,   89,  217,  218,  201,  201,
  201,  201,  170,  170,  141,  144,  144,  301,  301,  225,
  226,  227,  232,  228,  332,  231,  233,  238,  301,   70,
  245,   42,  301,  246,  301,  141,  141,  247,  252,  256,
  353,  259,  263,  301,  301,  266,  268,   16,  273,   80,
  285,  171,  171,  287,  276,  288,  173,  311,  302,  302,
  312,  314,   42,  145,   87,  144,   16,  315,  316,  321,
  326,  141,  141,  347,  334,  167,  337,  292,  346,    6,
  338,  135,    8,  356,  174,  168,   12,  141,  355,  141,
  362,  380,  363,  366,  369,  374,  360,  144,  377,  379,
  395,  144,  176,  399,  410,   40,   16,  137,  171,    1,
  171,  197,  347,  276,  167,  199,  302,   58,    6,  302,
  135,    8,   16,  304,  168,   12,   44,   44,  262,  292,
  141,  141,  317,  144,  289,  145,  145,  408,  165,  224,
  384,  267,  195,  171,  171,  333,  198,  354,  302,  302,
  409,  319,  129,  270,  144,  144,  345,  394,  286,  302,
  193,    0,  202,  302,    0,  302,  202,  202,    0,    0,
  173,  173,    0,    0,  302,  302,  174,  304,  304,  202,
  202,  202,    0,    0,    0,  145,  404,  406,  255,  136,
  144,  144,  389,   42,  176,    0,    0,    0,   16,    0,
    0,  360,    0,  360,    0,  201,  144,    0,  144,  201,
  201,    0,  394,  394,    0,    0,    0,  145,   16,  254,
  274,  145,  201,  201,  201,    0,  389,  173,    0,  173,
    0,    0,    0,    0,    0,  304,    0,    0,  304,   16,
  299,    0,    0,  305,    0,    0,    0,    0,    0,  144,
  144,    0,    0,  145,    0,   16,  313,    0,    0,    0,
    0,  306,  173,  173,  199,    0,    5,  304,  304,    0,
    6,   16,    0,    8,  145,  145,   11,   12,  304,    0,
    0,  200,  304,  199,  304,    5,    0,    0,   16,    6,
  174,  174,    8,  304,  304,   11,   12,  305,  305,    0,
    0,  136,    0,   16,    0,    0,    0,    0,  176,  176,
  145,  145,    0,  364,  365,  306,  306,    0,    0,   16,
    0,    0,  298,    4,    0,  134,  145,    0,  145,    6,
    7,  135,    8,    9,   10,   11,   12,   13,  136,  199,
   16,    5,    0,   14,    0,    6,    0,  174,    8,  174,
    0,   11,   12,    0,    0,  305,  283,    0,  305,    0,
    0,    0,    0,    0,    0,  176,   16,  176,    0,  145,
  145,  327,    0,  306,    0,    0,  306,    0,    0,    0,
    0,    0,  174,  174,    0,    0,  329,  305,  305,    0,
   16,    0,    0,    0,    0,    0,    0,    0,  305,    0,
  176,  176,  305,    0,  305,  306,  306,    0,    0,    0,
    0,    0,    0,  305,  305,  199,  306,    5,   16,    0,
  306,    6,  306,  298,    8,    0,    0,   11,   12,    0,
    0,  306,  306,    0,    0,    4,    0,  134,    0,   16,
    0,    6,    7,  135,    8,    9,   10,   11,   12,   13,
    0,  368,    0,    0,   16,   14,  166,    0,  297,    0,
    0,    0,    6,    7,  135,    8,    9,   10,  168,   12,
   13,   16,    4,    0,  134,  393,   14,    0,    6,    7,
  135,    8,    9,   10,   11,   12,   13,   16,    4,    0,
  134,    0,   14,    0,    6,    7,  135,    8,    9,   10,
   11,   12,   13,  396,    0,    4,   16,  134,   14,    0,
    0,    6,    7,  135,    8,    9,   10,   11,   12,   13,
    4,   16,  134,    0,  397,   14,    6,    7,  135,    8,
    9,   10,   11,   12,   13,  358,  166,  403,  297,    0,
   14,    0,    6,    7,  135,    8,    9,   10,  168,   12,
   13,   16,    0,    0,  405,    0,   14,  166,    0,  297,
    0,    0,    0,    6,    7,  135,    8,    9,   10,  168,
   12,   13,  418,    0,   16,    0,    0,   14,    0,    0,
    0,    0,  367,    4,    0,    5,    0,    0,    0,    6,
    7,  419,    8,    9,   10,   11,   12,   13,   16,    0,
    0,    0,    0,   14,   15,    0,    0,  166,    0,  297,
    0,    0,    0,    6,    7,  135,    8,    9,   10,  168,
   12,   13,   16,    0,    0,    0,    0,   14,    0,    0,
    0,    0,    0,    0,    0,    4,   77,  134,   16,    0,
    0,    6,    7,  135,    8,    9,   10,   11,   12,   13,
    0,    0,    0,    0,   16,   14,    4,    0,  134,  160,
    0,    0,    6,    7,  135,    8,    9,   10,   11,   12,
   13,  166,    0,  297,    0,   16,   14,    6,    7,  135,
    8,    9,   10,  168,   12,   13,    0,    0,  166,    0,
  297,   14,   16,    0,    6,    7,  135,    8,    9,   10,
  168,   12,   13,    0,  166,    0,  297,   16,   14,    0,
    6,    7,  135,    8,    9,   10,  168,   12,   13,    0,
    0,  271,    0,  166,   14,  297,   16,    0,    0,    6,
    7,  135,    8,    9,   10,  168,   12,   13,    4,  239,
    5,    0,    0,   14,    6,    7,    0,    8,    9,   10,
   11,   12,   13,  132,    0,    0,    0,    0,   14,    0,
  325,    0,    0,    0,    0,    0,    0,    0,    4,    0,
    5,    0,    0,    0,    6,    7,    0,    8,    9,   10,
   11,   12,   13,    0,    0,    0,    0,    0,   14,    0,
  350,    4,    0,    5,    0,    0,    0,    6,    7,    0,
    8,    9,   10,   11,   12,   13,    0,    0,    0,  202,
    0,   14,    0,    0,    0,  166,    0,  167,    0,    0,
    0,    6,    7,  135,    8,    9,   10,  168,   12,   13,
    0,    0,    0,    0,    0,   14,  132,    0,    0,    4,
    0,  134,    0,    0,    0,    6,    7,  135,    8,    9,
   10,   11,   12,   13,    0,    4,    0,    5,    0,   14,
    0,    6,    7,    0,    8,    9,   10,   11,   12,   13,
    0,    4,    0,    5,    0,   14,    0,    6,    7,    0,
    8,    9,   10,   11,   12,   13,    0,    0,    0,    0,
    0,   14,    4,    0,    5,    0,    0,    0,    6,    7,
    0,    8,    9,   10,   11,   12,   13,    0,    0,    4,
    0,    5,   14,    0,    0,    6,    7,    0,    8,    9,
   10,   11,   12,   13,  347,    0,  167,    0,    0,   14,
    6,    0,  135,    8,    0,    0,  168,   12,    0,    0,
    0,    0,    0,  199,    0,    5,    0,    0,    0,    6,
    0,    0,    8,    0,    0,   11,   12,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  132,    0,  132,    0,    0,    0,  132,    0,    0,  132,
    0,    0,  132,  132,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          3,
   41,   41,   41,   41,   15,   18,   63,   39,   61,   40,
   61,   15,   40,   44,   18,  134,   58,   59,   64,   40,
   40,   40,   59,   64,   44,   58,   45,   58,   61,   58,
   61,  256,   61,   40,    0,   85,  261,   94,   58,   55,
  136,   61,   40,  299,   85,   72,   40,  256,  167,  257,
   62,   58,  219,  262,   61,   85,   40,  272,   70,   40,
   58,   74,   40,   61,   45,   76,  257,   45,   84,   41,
   74,  109,   76,   40,   42,  242,  256,  256,  123,   47,
   45,   85,  262,  262,   40,   59,   44,  119,  120,   45,
  136,  137,  256,   45,  256,  136,  137,  135,  262,   43,
  356,   45,   59,  116,  117,   42,   43,  257,   45,  256,
   47,  168,   10,   60,   61,   62,   43,  267,   45,   44,
   59,  271,   59,  256,  181,   59,  222,  177,  185,  262,
   40,  158,   41,   64,   59,   44,  177,   43,   45,   45,
  186,   59,   59,  399,   59,  186,   40,  177,   46,  162,
  256,  183,   41,   59,   85,   44,  262,  123,  162,   59,
   59,   59,   59,  256,   41,  256,   41,   44,   43,  262,
   45,  262,  218,  177,  260,  261,  222,  218,  297,  275,
  276,  222,  220,   43,   59,   45,  243,  200,  267,  202,
  357,   41,  271,   43,  123,   45,  212,  327,  256,  329,
   60,   61,   62,  244,  215,  136,  137,   41,  254,   59,
  258,  215,   40,  254,  256,  257,  269,  403,  269,  405,
  257,  260,  261,  256,   59,  258,  257,   41,   59,  275,
  276,  327,  272,  329,  275,  276,  257,  257,  257,  258,
  244,  291,  292,  276,  272,  276,  177,  276,  261,  262,
  291,  292,  268,  256,  286,  186,  276,  298,  299,  272,
  271,  291,  292,  257,   64,  311,  312,  271,  272,  276,
  311,  312,  257,  257,  370,  371,  257,  258,  276,  257,
  258,  327,  256,  329,  256,   85,  327,  218,  329,  346,
  257,  222,  257,  258,  298,  299,   40,  125,  348,  257,
  350,  257,  258,  341,  269,  257,  258,  348,   41,  350,
   43,  324,   45,  244,  258,  356,   59,  256,  359,  256,
  324,  257,  256,  254,  370,  371,  273,  274,  275,  370,
  371,  256,  257,  383,  384,   40,  136,  137,  256,  256,
  258,  256,  383,  384,  275,  276,   59,  388,  389,  256,
  256,  258,  356,  383,  384,  359,  256,  256,  399,  256,
  291,  292,  403,  257,  405,  259,  256,  298,  299,  263,
  256,  265,  266,  414,  415,  269,  270,  177,  256,  123,
  311,  312,  195,   64,  388,  389,  186,   41,   40,   43,
  256,   45,  260,  261,   44,  399,  327,   41,  329,  403,
   40,  405,  260,  261,   85,   59,   60,   61,   62,   41,
  414,  415,  261,  273,  274,  275,  262,  348,  218,  350,
  125,   59,  222,  260,  261,  356,  256,  256,  359,  257,
   41,  259,   43,  257,   45,  263,   41,  265,  266,  370,
  371,  269,  270,  260,  244,   61,  258,   41,   59,   60,
   61,   62,  383,  384,  254,  136,  137,  388,  389,  256,
  256,  256,   59,  257,  277,  256,  256,  256,  399,  257,
  256,    4,  403,  256,  405,  275,  276,  125,   59,  258,
  293,   59,   59,  414,  415,   59,   58,   40,   59,   22,
  256,  291,  292,   59,  219,  258,  177,   41,  298,  299,
   41,  256,   35,   64,   37,  186,   40,   59,  256,  256,
  256,  311,  312,  257,  256,  259,  256,  242,   40,  263,
   59,  265,  266,   41,   85,  269,  270,  327,  256,  329,
  256,  258,  256,  256,  256,  256,  298,  218,  256,  256,
  256,  222,   85,   41,  256,   59,   40,   41,  348,    0,
  350,   41,  257,  278,  259,   41,  356,  125,  263,  359,
  265,  266,   40,  244,  269,  270,  256,  123,  202,  294,
  370,  371,  125,  254,  240,  136,  137,  390,   84,  137,
  350,  212,  111,  383,  384,  278,  114,  294,  388,  389,
  391,  125,   59,  214,  275,  276,  287,  359,  228,  399,
  110,   -1,  256,  403,   -1,  405,  260,  261,   -1,   -1,
  291,  292,   -1,   -1,  414,  415,  177,  298,  299,  273,
  274,  275,   -1,   -1,   -1,  186,  388,  389,  186,  123,
  311,  312,  357,  166,  177,   -1,   -1,   -1,   40,   -1,
   -1,  403,   -1,  405,   -1,  256,  327,   -1,  329,  260,
  261,   -1,  414,  415,   -1,   -1,   -1,  218,   40,   41,
  218,  222,  273,  274,  275,   -1,  391,  348,   -1,  350,
   -1,   -1,   -1,   -1,   -1,  356,   -1,   -1,  359,   40,
   41,   -1,   -1,  244,   -1,   -1,   -1,   -1,   -1,  370,
  371,   -1,   -1,  254,   -1,   40,  254,   -1,   -1,   -1,
   -1,  244,  383,  384,  257,   -1,  259,  388,  389,   -1,
  263,   40,   -1,  266,  275,  276,  269,  270,  399,   -1,
   -1,  123,  403,  257,  405,  259,   -1,   -1,   40,  263,
  291,  292,  266,  414,  415,  269,  270,  298,  299,   -1,
   -1,  123,   -1,   40,   -1,   -1,   -1,   -1,  291,  292,
  311,  312,   -1,  311,  312,  298,  299,   -1,   -1,   40,
   -1,   -1,  123,  257,   -1,  259,  327,   -1,  329,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  123,  257,
   40,  259,   -1,  277,   -1,  263,   -1,  348,  266,  350,
   -1,  269,  270,   -1,   -1,  356,  125,   -1,  359,   -1,
   -1,   -1,   -1,   -1,   -1,  348,   40,  350,   -1,  370,
  371,  123,   -1,  356,   -1,   -1,  359,   -1,   -1,   -1,
   -1,   -1,  383,  384,   -1,   -1,  123,  388,  389,   -1,
   40,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  399,   -1,
  383,  384,  403,   -1,  405,  388,  389,   -1,   -1,   -1,
   -1,   -1,   -1,  414,  415,  257,  399,  259,   40,   -1,
  403,  263,  405,  123,  266,   -1,   -1,  269,  270,   -1,
   -1,  414,  415,   -1,   -1,  257,   -1,  259,   -1,   40,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,  125,   -1,   -1,   40,  277,  257,   -1,  259,   -1,
   -1,   -1,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   40,  257,   -1,  259,  125,  277,   -1,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   40,  257,   -1,
  259,   -1,  277,   -1,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  125,   -1,  257,   40,  259,  277,   -1,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  257,   40,  259,   -1,  125,  277,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  256,  257,  123,  259,   -1,
  277,   -1,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   40,   -1,   -1,  123,   -1,  277,  257,   -1,  259,
   -1,   -1,   -1,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  125,   -1,   40,   -1,   -1,  277,   -1,   -1,
   -1,   -1,  256,  257,   -1,  259,   -1,   -1,   -1,  263,
  264,  125,  266,  267,  268,  269,  270,  271,   40,   -1,
   -1,   -1,   -1,  277,  123,   -1,   -1,  257,   -1,  259,
   -1,   -1,   -1,  263,  264,  265,  266,  267,  268,  269,
  270,  271,   40,   -1,   -1,   -1,   -1,  277,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  125,  259,   40,   -1,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,   -1,   -1,   -1,   40,  277,  257,   -1,  259,  125,
   -1,   -1,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  257,   -1,  259,   -1,   40,  277,  263,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,   -1,  257,   -1,
  259,  277,   40,   -1,  263,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,  257,   -1,  259,   40,  277,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,  123,   -1,  257,  277,  259,   40,   -1,   -1,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  257,  125,
  259,   -1,   -1,  277,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,   40,   -1,   -1,   -1,   -1,  277,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
  259,   -1,   -1,   -1,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,   -1,   -1,   -1,   -1,   -1,  277,   -1,
  123,  257,   -1,  259,   -1,   -1,   -1,  263,  264,   -1,
  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,  123,
   -1,  277,   -1,   -1,   -1,  257,   -1,  259,   -1,   -1,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,   -1,   -1,   -1,   -1,  277,  123,   -1,   -1,  257,
   -1,  259,   -1,   -1,   -1,  263,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,  257,   -1,  259,   -1,  277,
   -1,  263,  264,   -1,  266,  267,  268,  269,  270,  271,
   -1,  257,   -1,  259,   -1,  277,   -1,  263,  264,   -1,
  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,   -1,
   -1,  277,  257,   -1,  259,   -1,   -1,   -1,  263,  264,
   -1,  266,  267,  268,  269,  270,  271,   -1,   -1,  257,
   -1,  259,  277,   -1,   -1,  263,  264,   -1,  266,  267,
  268,  269,  270,  271,  257,   -1,  259,   -1,   -1,  277,
  263,   -1,  265,  266,   -1,   -1,  269,  270,   -1,   -1,
   -1,   -1,   -1,  257,   -1,  259,   -1,   -1,   -1,  263,
   -1,   -1,  266,   -1,   -1,  269,  270,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   -1,  259,   -1,   -1,   -1,  263,   -1,   -1,  266,
   -1,   -1,  269,  270,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=277;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"id","cte","If","then","Else","end_if","out",
"fun","Return","BREAK","i32","when","For","CONTINUE","f32","cadena",
"menorigual","mayorigual","distinto","opasignacion","Const",
};
final static String yyrule[] = {
"$accept : programa",
"programa : encabezado_prog bloque_sentencias",
"encabezado_prog : id",
"bloque_sentencias : bloque_sentencias '{' sentencia '}'",
"bloque_sentencias : '{' sentencia '}'",
"bloque_sentencias : '{' sentencia",
"bloque_sentencias : sentencia '}'",
"declaracion_const : Const lista_de_asignacion_const ';'",
"declaracion_const : Const lista_de_asignacion_const error",
"declaracion_const : Const ';' error",
"lista_de_asignacion_const : decl_const",
"lista_de_asignacion_const : lista_de_asignacion_const ',' decl_const",
"lista_de_asignacion_const : lista_de_asignacion_const decl_const error",
"decl_const : id op_asignacion cte",
"decl_const : id op_asignacion '-' cte",
"decl_const : id op_asignacion error",
"decl_const : id cte error",
"decl_const : id error",
"bloq_sentencias_For : sentencias_For",
"bloq_sentencias_For : bloq_sentencias_For sentencias_For",
"sentencia : declarativas",
"sentencia : ejecutables",
"sentencia : sentencia declarativas",
"sentencia : sentencia ejecutables",
"declarativas : tipo lista_de_variables ';'",
"declarativas : lista_de_variables ';' error",
"declarativas : declaracion_func",
"declarativas : declaracion_const",
"declarativas : sentencia_when",
"bloque_ejecutables : bloque_ejecutables ejecutables",
"bloque_ejecutables : ejecutables",
"ejecutables : asignacion",
"ejecutables : salida",
"ejecutables : sentencia_If",
"ejecutables : encabezado_For",
"ejecutables : invocacion_funcion",
"ejecutables : sentencia_BREAK error",
"ejecutables : sentencia_CONTINUE error",
"lista_de_variables : id lista_de_variables",
"lista_de_variables : id ',' lista_de_variables",
"lista_de_variables : id",
"parametro : tipo id",
"parametro : id error",
"asig_fun : ':' tipo",
"asig_fun :",
"cola_func : '{' cuerpo_fun '}'",
"lista_parametros :",
"lista_parametros : parametro",
"lista_parametros : lista_parametros ',' parametro",
"nombre_funcion : fun id",
"encab_fun : nombre_funcion '(' lista_parametros ')' asig_fun",
"encab_fun : fun '(' lista_parametros ')' asig_fun error",
"declaracion_func : encab_fun cola_func",
"ret_fun : Return '(' expresion ')' ';'",
"ret_fun : Return expresion ')' ';' error",
"ret_fun : Return '(' expresion ';' error",
"ret_fun : Return expresion ';' error",
"ret_fun : Return '(' expresion ')' error",
"cuerpo_fun : bloque_sentencias_funcion",
"ejecutables_funcion : asignacion",
"ejecutables_funcion : sentencia_if_funcion",
"ejecutables_funcion : salida",
"ejecutables_funcion : invocacion_funcion",
"ejecutables_funcion : sentencia_for_funcion",
"ejecutables_funcion : ret_fun",
"ejecutables_funcion : sentencia_BREAK error",
"ejecutables_funcion : sentencia_CONTINUE error",
"bloq_ejecutables_fun : bloq_ejecutables_fun ejecutables_funcion",
"bloq_ejecutables_fun : ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion declarativas",
"bloque_sentencias_funcion : ejecutables_funcion",
"bloque_sentencias_funcion : declarativas",
"op_asignacion : opasignacion",
"op_asignacion : ':' '=' error",
"op_asignacion : '=' error",
"asignacion : id op_asignacion expresion ';'",
"asignacion : id op_asignacion expresion error",
"asignacion : id op_asignacion for_else_cte",
"asignacion : id op_asignacion invocacion_funcion",
"for_else_cte : encab_For Else cte ';'",
"for_else_cte : encab_For error",
"salida : out '(' cadena ')' ';'",
"salida : out '(' cadena ')' error",
"salida : out '(' cadena error ';'",
"salida : out cadena error ';'",
"salida : '(' cadena error",
"salida : out '(' ')' error ';'",
"sentencia_If : If condicion_if cuerpo_If PR_end_if ';'",
"sentencia_If : If condicion_if then cuerpo_If PR_end_if error",
"sentencia_If : If condicion_if then cuerpo_If error",
"condicion_if : '(' expresion_relacional ')'",
"condicion_if : expresion_relacional ')'",
"condicion_if : '(' expresion_relacional",
"condicion_if : expresion_relacional",
"cuerpo_If : cuerpo_Then cuerpo_Else",
"cuerpo_If : cuerpo_Then",
"cuerpo_If : cuerpo_Else",
"cuerpo_Then : PR_then '{' bloque_ejecutables '}'",
"cuerpo_Then : PR_then ejecutables",
"cuerpo_Else : PR_else '{' bloque_ejecutables '}'",
"cuerpo_Else : PR_else ejecutables",
"sentencia_if_for : If condicion_if cuerpo_If_for PR_end_if ';'",
"sentencia_if_for : If condicion_if cuerpo_If_for PR_end_if error",
"sentencia_if_for : If condicion_if cuerpo_If_for error",
"cuerpo_If_for : cuerpo_then_for cuerpo_Else_for",
"cuerpo_If_for : cuerpo_then_for",
"cuerpo_If_for : cuerpo_Else_for error",
"cuerpo_then_for : PR_then '{' bloq_sentencias_For '}'",
"cuerpo_then_for : PR_then sentencias_For",
"cuerpo_Else_for : PR_else '{' bloq_sentencias_For '}'",
"cuerpo_Else_for : PR_else sentencias_For",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion PR_end_if ';'",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion PR_end_if error",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion error",
"cuerpo_If_funcion : cuerpo_then_funcion cuerpo_Else_funcion",
"cuerpo_If_funcion : cuerpo_then_funcion",
"cuerpo_If_funcion : cuerpo_Else_funcion error",
"cuerpo_then_funcion : PR_then '{' bloq_ejecutables_fun '}'",
"cuerpo_then_funcion : PR_then ejecutables_funcion",
"cuerpo_Else_funcion : PR_else '{' bloq_ejecutables_fun '}'",
"cuerpo_Else_funcion : PR_else ejecutables_funcion",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun PR_end_if ';'",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun PR_end_if error",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun error",
"cuerpo_If_for_fun : then_if_for_fun else_if_for_fun",
"cuerpo_If_for_fun : then_if_for_fun",
"cuerpo_If_for_fun : else_if_for_fun error",
"then_if_for_fun : PR_then '{' bloq_for_funcion '}'",
"then_if_for_fun : PR_then sentencias_For_funcion",
"else_if_for_fun : PR_else '{' bloq_for_funcion '}'",
"else_if_for_fun : PR_else sentencias_For_funcion",
"PR_then : then",
"PR_else : Else",
"PR_end_if : end_if",
"sentencia_when : when '(' condicion_when ')' cuerpo_when ';'",
"sentencia_when : when condicion_when ')' cuerpo_when ';' error",
"sentencia_when : when '(' condicion_when ')' cuerpo_when error",
"condicion_when : expresion_relacional",
"cuerpo_when : then '{' sentencia '}'",
"cuerpo_when : then '{' sentencia error",
"cuerpo_when : then sentencia '}' error",
"encabezado_For : For '(' detalles_for ')' cola_For",
"encabezado_For : For detalles_for ')' cola_For error",
"encabezado_For : For detalles_for cola_For error",
"encabezado_For : id ':' For '(' detalles_for ')' cola_For",
"encab_For : For '(' detalles_for ')' cola_For",
"encab_For : For detalles_for ')' cola_For error",
"encab_For : For detalles_for cola_For error",
"detalles_for : asignacion_for ';' cond_op_for",
"cond_op_for : condicion_for ';' operacion_for",
"condicion_for : id comparador factor",
"condicion_for : id comparador '(' expresion ')'",
"cola_For : '{' bloq_sentencias_For '}' ';'",
"cola_For : sentencias_For",
"cola_For : '{' bloq_sentencias_For '}' error",
"signo : '+'",
"signo : '-'",
"sentencias_For : asignacion",
"sentencias_For : salida",
"sentencias_For : encabezado_For",
"sentencias_For : sentencia_if_for",
"sentencias_For : invocacion_funcion",
"sentencias_For : sentencia_BREAK",
"sentencias_For : sentencia_CONTINUE",
"sentencias_For : declarativas error",
"sentencias_For : ret_fun error",
"cola_For_funcion : '{' bloq_for_funcion '}' ';'",
"cola_For_funcion : sentencias_For_funcion",
"cola_For_funcion : '{' bloq_for_funcion '}' error",
"sentencia_for_funcion : For '(' detalles_for ')' cola_For_funcion",
"sentencia_for_funcion : For detalles_for ')' cola_For_funcion error",
"sentencia_for_funcion : For detalles_for cola_For_funcion error",
"sentencia_for_funcion : id ':' For '(' detalles_for ')' cola_For_funcion",
"asignacion_for : id op_asignacion cte",
"operacion_for : signo cte",
"operacion_for : cte error",
"sentencias_For_funcion : asignacion",
"sentencias_For_funcion : salida",
"sentencias_For_funcion : sentencia_for_funcion",
"sentencias_For_funcion : ret_fun",
"sentencias_For_funcion : invocacion_funcion",
"sentencias_For_funcion : sentencia_BREAK",
"sentencias_For_funcion : sentencia_CONTINUE",
"sentencias_For_funcion : sentencia_if_for_fun",
"sentencias_For_funcion : declarativas error",
"bloq_for_funcion : sentencias_For_funcion",
"bloq_for_funcion : bloq_for_funcion sentencias_For_funcion",
"bloq_for_funcion : error",
"sentencia_BREAK : BREAK ';'",
"sentencia_BREAK : BREAK cte ';'",
"sentencia_BREAK : BREAK error",
"sentencia_CONTINUE : CONTINUE ';'",
"sentencia_CONTINUE : CONTINUE ':' id ';'",
"sentencia_CONTINUE : CONTINUE id ';' error",
"sentencia_CONTINUE : CONTINUE error",
"invocacion_funcion : id '(' list_parametros_Inv ')' ';'",
"list_parametros_Inv :",
"list_parametros_Inv : factor ',' factor",
"list_parametros_Inv : factor",
"expresion_relacional : expresion comparador expresion",
"expresion : expresion signo termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : id",
"factor : cte",
"factor : '-' cte",
"comparador : '<'",
"comparador : '>'",
"comparador : menorigual",
"comparador : mayorigual",
"comparador : '='",
"comparador : distinto",
"tipo : i32",
"tipo : f32",
};

//#line 913 "gramatica.y"

private AnalizadorLexico lexico;
private AnalizadorSintactico sintactico;
private String ambito;
private int contadorFor;
private int contadorIf;
private int contadorWhen;
private int contadorParam;
private String tipoBreak = new String();
private Stack<Integer> variablesFor;
private Stack<Integer> declaracionFunc;


public void activarAmbito(){this.ambito = "$"; this.contadorFor = 0; this.contadorIf = 0; this.contadorWhen = 0; variablesFor = new Stack<Integer>(); this.declaracionFunc = new Stack<Integer>();} // $ va a simblizar el ambito global.

public void setLexico(AnalizadorLexico lexico) { this.lexico = lexico; }

public void setSintactico(AnalizadorSintactico sintactico) { this.sintactico = sintactico; }

public AnalizadorLexico getLexico() { return this.lexico; }

public AnalizadorSintactico getSintactico() { return this.sintactico; }

public void agregarAmbito(String nuevo) {

	this.ambito = this.ambito + "_" + nuevo;

}

    public String tipoResultante(String tipo1, String tipo2, String op){

        if (tipo1 != null && tipo2 != null ) {
            if(tipo1.equals(tipo2)){
                return tipo1;
            }
            sintactico.addErrorSintactico("SemanticError."+" (Línea " + AnalizadorLexico.LINEA + ")" + " LOS TIPOS NO COINCIDEN - OPERACION: " + op );
        }
        return null;
    }

public String borrarAmbito(String ambito){
	if (ambito.length() > 1) { // si es 1 solo tiene el ambito global
		String [] aux = ambito.split("_"); // separo los elementos individuales del ambito
		String last = aux[aux.length - 1 ]; // obtengo el ultimo, el que tengo que eliminar
		return ambito.substring(0, ambito.length() - last.length() - 1);
	}
	return "$";
}

public int yylex() {
    int token = lexico.procesarYylex();
    if (lexico.getRefTablaSimbolos() != -1)
        yylval = new ParserVal(lexico.getRefTablaSimbolos());
    return token;
}

public void yyerror(String string) {
	//sintactico.addErrorSintactico("par: " + string);
}

// retorna -1 si no existe un identificador con el lexema dado en el ambito dado. Si existe, retorna el indice de la entrada existente.
public int enAmbito(ParserVal pv){

	String lexema = sintactico.getEntradaTablaSimb(pv.ival).getLexema();
	String ambitoAux = this.ambito;

	String [] aux = ambitoAux.split("_");
	for (int i = 0 ; i < aux.length ; i++){
		int existente = sintactico.getTS().existeEntrada(lexema + "@"+ambitoAux);
		if (existente >= 0 ){
			return existente;
		}
		ambitoAux = borrarAmbito(ambitoAux);
	}
	return -1;
}
//#line 939 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 21 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("raiz", val_peek(0))); sintactico.setRaiz(yyval); }
break;
case 2:
//#line 24 "gramatica.y"
{sintactico.setUsoEnIndex("program",val_peek(0).ival);}
break;
case 3:
//#line 27 "gramatica.y"
{yyval = val_peek(1);}
break;
case 4:
//#line 28 "gramatica.y"
{yyval = val_peek(1);}
break;
case 5:
//#line 29 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar el bloque.");}
break;
case 6:
//#line 30 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir el bloque.");}
break;
case 7:
//#line 33 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una declaración de CONSTANTE. (Línea " + AnalizadorLexico.LINEA + ")");
							  	  yyval = new ParserVal(sintactico.crearNodoControl("lista_ctes", val_peek(1)));}
break;
case 8:
//#line 35 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ; al final de la declaracion de constantes.");}
break;
case 9:
//#line 36 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): No se reconoce una lista de constantes.");}
break;
case 10:
//#line 39 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 11:
//#line 40 "gramatica.y"
{ParserVal modificado = sintactico.modificarHijo(val_peek(2), sintactico.crearNodo("sentencia", val_peek(0), null));
                                                                         yyval = modificado;}
break;
case 12:
//#line 42 "gramatica.y"
{{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): separar por coma la declaracion de constantes.");}}
break;
case 13:
//#line 46 "gramatica.y"
{
						int existente = enAmbito(val_peek(2));
						if (existente < 0) {
							int i = val_peek(2).ival;
							sintactico.setTipoEnIndex(sintactico.getTipoFromTS(val_peek(0).ival), i);
							String type = sintactico.getTipoFromTS(val_peek(0).ival);
                                                        if (type.equals("i32"))
                                                        	sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
														else
															sintactico.verificarRangoFlotante(val_peek(0).ival);
							sintactico.setUsoEnIndex("const", i);
							sintactico.setLexemaEnIndex(val_peek(2).ival, "@"+this.ambito);
							sintactico.setUsoEnIndex("cte",val_peek(0).ival);
							yyval = new ParserVal(sintactico.crearNodo("=:", new ParserVal(sintactico.crearHoja(val_peek(2).ival)), new ParserVal(sintactico.crearHoja(val_peek(0).ival))));
						} else {
							sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
						}

					}
break;
case 14:
//#line 65 "gramatica.y"
{
										int existente = enAmbito(val_peek(3));
											if (existente < 0) {
												int i = val_peek(3).ival;
												sintactico.setTipoEnIndex(sintactico.getTipoFromTS(val_peek(0).ival), i);
												sintactico.setNegativoTablaSimb(val_peek(0).ival);
												String type = sintactico.getTipoFromTS(val_peek(0).ival);
												if (type.equals("i32"))
													sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
												else
													sintactico.verificarRangoFlotante(val_peek(0).ival);
												sintactico.setUsoEnIndex("const", i);
												sintactico.setLexemaEnIndex(val_peek(3).ival, "@"+this.ambito);
												sintactico.setUsoEnIndex("cte neg",val_peek(0).ival);
												yyval = new ParserVal(sintactico.crearNodo("=:", new ParserVal(sintactico.crearHoja(val_peek(3).ival)), new ParserVal(sintactico.crearHoja(val_peek(0).ival))));
											} else {
												sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
											}
		   }
break;
case 15:
//#line 84 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta constante luego de la asignacion.");}
break;
case 16:
//#line 85 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta el operador asignacion luego del identificador.");}
break;
case 17:
//#line 86 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta la asignacion luego del identificador.");}
break;
case 18:
//#line 90 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 19:
//#line 91 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 20:
//#line 94 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("declarativa", val_peek(0), null));}
break;
case 21:
//#line 95 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 22:
//#line 96 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("declarativa", val_peek(0), null));}
break;
case 23:
//#line 97 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 24:
//#line 101 "gramatica.y"
{
							String type = val_peek(2).sval;
						 	sintactico.completarConTipos(type);
						 	sintactico.addAnalisis("Se reconoció declaraciónes de variable de tipo " + type + ". (Línea " + AnalizadorLexico.LINEA + ")");
						  }
break;
case 25:
//#line 106 "gramatica.y"
{
             						sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): falta el tipo de variable");
             					  	sintactico.addAnalisis("Se reconoció declaraciónes de variable SIN TIPO. (Línea " + (AnalizadorLexico.LINEA-1) + ")");
             					   	sintactico.vaciarListaVariables();
             					  }
break;
case 29:
//#line 117 "gramatica.y"
{
							ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
							yyval = modificado;
						     }
break;
case 30:
//#line 121 "gramatica.y"
{
							yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));
						     }
break;
case 36:
//#line 131 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 37:
//#line 132 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 38:
//#line 134 "gramatica.y"
{
							sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta una ',' entre identIficadores.");
						 	int existente = enAmbito(val_peek(1));
							if (existente < 0) {
								sintactico.setLexemaEnIndex(val_peek(1).ival, "@"+this.ambito);
								sintactico.addListaVariables(val_peek(1).ival);
								sintactico.setUsoEnIndex("var", val_peek(1).ival);
							} else {
								sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
							}
						}
break;
case 39:
//#line 145 "gramatica.y"
{
							int existente = enAmbito(val_peek(2));
							if (existente < 0) {
								sintactico.setLexemaEnIndex(val_peek(2).ival, "@"+this.ambito);

								sintactico.addListaVariables(val_peek(2).ival);
								sintactico.setUsoEnIndex("var", val_peek(2).ival);
							} else {
								sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
							}
						  }
break;
case 40:
//#line 156 "gramatica.y"
{
                   					int existente = enAmbito(val_peek(0));
                   					if (existente < 0) {
                   						sintactico.setLexemaEnIndex(val_peek(0).ival, "@"+this.ambito);

                   						sintactico.addListaVariables(val_peek(0).ival);
							    	sintactico.setUsoEnIndex("var", val_peek(0).ival);
                   					} else {
                   						sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
                   					}
                   				  }
break;
case 41:
//#line 171 "gramatica.y"
{	this.contadorParam++;
				int existente = enAmbito(val_peek(0));
				if (existente < 0) {
					sintactico.setTipoEnIndex(val_peek(1).sval, val_peek(0).ival);
					sintactico.setLexemaEnIndex(val_peek(0).ival, "@"+this.ambito);
					String lexFuncion = sintactico.getEntradaTablaSimb(this.declaracionFunc.peek()).getLexema().split("@")[0];
					sintactico.setUsoEnIndex("param@"+lexFuncion, val_peek(0).ival);

					sintactico.addListaVariables(val_peek(0).ival);

				} else {
					sintactico.addErrorSintactico("SemanticError. ENC_FUN/PARAMS (Línea " + AnalizadorLexico.LINEA + "): el identificador ya ha sido utilizado.");
				}
				if (this.contadorParam > 2) {
					sintactico.addErrorSintactico("SemanticError. (Linea " + AnalizadorLexico.LINEA + "): no se permiten mas de dos parametros por funcion");
				}
			}
break;
case 42:
//#line 189 "gramatica.y"
{ sintactico.addErrorSintactico("SemanticError. PARAM(Línea " + AnalizadorLexico.LINEA + "): falta TIPO en parametros."); }
break;
case 43:
//#line 192 "gramatica.y"
{
				sintactico.setTipoGlobal(val_peek(0).sval);
				sintactico.setTipoEnIndex(sintactico.getTipo(), this.declaracionFunc.peek());
			}
break;
case 44:
//#line 196 "gramatica.y"
{
				sintactico.addErrorSintactico("SemanticError. ENCAB_FUN(Línea " + AnalizadorLexico.LINEA + "): falta tipo de funcion ");
	 	 		sintactico.addAnalisis("Se reconoce declaracion de funcion pero falta tipo (Línea " + AnalizadorLexico.LINEA + ")");
			}
break;
case 45:
//#line 202 "gramatica.y"
{
					sintactico.addAnalisis("Se reconoce cuerpo de funcion (Línea " + AnalizadorLexico.LINEA + ")");
					this.ambito = borrarAmbito(this.ambito);
					sintactico.clearTipo();
 					yyval = val_peek(1);
 				}
break;
case 49:
//#line 215 "gramatica.y"
{
				String lexema = sintactico.getEntradaTablaSimb(val_peek(0).ival).getLexema();
				this.contadorParam = 0;

				int existente = enAmbito(val_peek(0));
				if (existente < 0) { /* no existe el id en el ambito*/
					this.declaracionFunc.push(val_peek(0).ival);

					sintactico.setLexemaEnIndex(val_peek(0).ival, "@"+this.ambito);
					sintactico.setUsoEnIndex("func", val_peek(0).ival);
					agregarAmbito(lexema);
					sintactico.setUsoParam(sintactico.getEntradaTablaSimb(val_peek(0).ival).getLexema());
					sintactico.vaciarListaVariables();
					yyval = new ParserVal(val_peek(0).ival);

				} else {
					sintactico.addErrorSintactico("SematicError. ENC_FUN (Línea " + AnalizadorLexico.LINEA + "): el identificador ya ha sido utilizado.");
				}
			}
break;
case 50:
//#line 236 "gramatica.y"
{
								sintactico.addAnalisis( "Se reconocio declaracion de funcion (Línea " + AnalizadorLexico.LINEA + ")" );
								yyval = val_peek(4);


							}
break;
case 51:
//#line 242 "gramatica.y"
{
	 								sintactico.addAnalisis("Se reconoce declaracion de funcion pero falta identificacion (Línea " + AnalizadorLexico.LINEA + ")");
							   		sintactico.addErrorSintactico("SemanticError. ENC_FUN (Línea " + AnalizadorLexico.LINEA + "): funcion sin identificar.");
								}
break;
case 52:
//#line 248 "gramatica.y"
{
						Token t = sintactico.getEntradaTablaSimb(val_peek(1).ival);
						Nodo n = sintactico.crearNodoControl(t.getLexema(), val_peek(0));
						n.setTipo(t.getTipo());
						sintactico.agregarArbolFuncion(new ParserVal(n),t.getLexema());
						sintactico.clearTipo();
					}
break;
case 53:
//#line 258 "gramatica.y"
{ sintactico.addAnalisis("Se reconoce retorno de funcion(Línea " + AnalizadorLexico.LINEA + ") ");
						   	  sintactico.checkRetorno(val_peek(2), sintactico.getTipo());
						   	  Nodo nodoRetorno = sintactico.crearNodoControl("return",val_peek(2));
						   	  Nodo n = (Nodo) val_peek(2).obj;
						   	  nodoRetorno.setTipo(n.getTipo());
						   	  yyval = new ParserVal(nodoRetorno);}
break;
case 54:
//#line 264 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN1 (Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 55:
//#line 265 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN2(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 56:
//#line 266 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN3(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 57:
//#line 267 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN4(Línea " + AnalizadorLexico.LINEA + "): falta ; "); }
break;
case 58:
//#line 270 "gramatica.y"
{this.declaracionFunc.pop();}
break;
case 65:
//#line 279 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 66:
//#line 280 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 67:
//#line 284 "gramatica.y"
{
									ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
									yyval = modificado;
								}
break;
case 68:
//#line 288 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 69:
//#line 291 "gramatica.y"
{
											ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
											yyval = modificado;
										}
break;
case 70:
//#line 295 "gramatica.y"
{
										ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("declarativa", val_peek(0), null));
										yyval = modificado;
									}
break;
case 71:
//#line 299 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 72:
//#line 300 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("declarativa", val_peek(0), null));}
break;
case 73:
//#line 305 "gramatica.y"
{ yyval.sval = new String("=:"); }
break;
case 74:
//#line 306 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP1(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 75:
//#line 307 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 76:
//#line 311 "gramatica.y"
{
							int existente = enAmbito(val_peek(3));

							if (existente >= 0) {
								Nodo op2 = (Nodo) val_peek(1).obj;
								String typeOP2 = op2.getTipo();
								String typeOP1 = sintactico.getTipoFromTS(existente);
								ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
								Nodo asignacion = sintactico.crearNodo("=:", identificador , val_peek(1));

								if (typeOP1.equals(typeOP2)) {
									asignacion.setTipo(typeOP1);
								}
								else {
									sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): no se puede realizar una asignacion de diferentes tipos.");
								}
								yyval = new ParserVal(asignacion);
                                                                sintactico.eliminarEntrada(val_peek(3).ival);


							} else {
								sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): variable no declarada.");
							}
					  	}
break;
case 77:
//#line 336 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP(Línea " + (AnalizadorLexico.LINEA) + "): falta ';' luego de la ASIG."); }
break;
case 78:
//#line 338 "gramatica.y"
{
						tipoBreak = null;
           					int existente = enAmbito(val_peek(2));
						if (existente >= 0) {
							ParserVal id = new ParserVal(sintactico.crearHoja(existente));
							Nodo asignacion = sintactico.crearNodo("=:", id , val_peek(0));
							asignacion.setTipo(tipoResultante( ((Nodo)id.obj).getTipo(), ((Nodo)val_peek(0).obj).getTipo(), "asignacion" ));
							yyval = new ParserVal(asignacion);
							sintactico.eliminarEntrada(val_peek(2).ival);
						} else {
							sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): variable no declarada.");
							}

						}
break;
case 79:
//#line 352 "gramatica.y"
{
	   						int existente = enAmbito(val_peek(2));
							if (existente >= 0) {
								ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
								yyval = new ParserVal(sintactico.crearNodo("=:", identificador , val_peek(0)));
								sintactico.eliminarEntrada(val_peek(2).ival);
							} else {
								sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): variable no declarada.");
							}
						 }
break;
case 80:
//#line 365 "gramatica.y"
{

					Nodo for_else = sintactico.crearNodo("for_else", val_peek(3), new ParserVal(sintactico.crearHoja(val_peek(1).ival)));
					String cteElse = sintactico.getTipoFromTS(val_peek(1).ival);
					for_else.setTipo(cteElse);
					yyval = new ParserVal(for_else);

					if (tipoBreak != null && !cteElse.equals(tipoBreak)) {
						sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "):  los tipos en el BREAK/ELSE del FOR no coinciden");
					}
					}
break;
case 81:
//#line 376 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): problema en devolver valor por defecto  ");}
break;
case 82:
//#line 379 "gramatica.y"
{
						sintactico.setUsoEnIndex("cadena",val_peek(2).ival);
						sintactico.addCadena(val_peek(2).ival);
						yyval = new ParserVal(sintactico.crearNodoControl("out", new ParserVal(sintactico.crearHoja(val_peek(2).ival))));}
break;
case 83:
//#line 383 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de la impresión de cadena."); }
break;
case 84:
//#line 384 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): cierre erróneo de la lista de parámetros de out."); }
break;
case 85:
//#line 385 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): los parámetros de out deben estar entre paréntesis."); }
break;
case 86:
//#line 386 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): se esperaba out, se encontró '('."); }
break;
case 87:
//#line 387 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta declarar una cadena para PRINT."); }
break;
case 88:
//#line 392 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));
									sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 89:
//#line 394 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 90:
//#line 395 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 91:
//#line 399 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("condicionIf",val_peek(1)));}
break;
case 92:
//#line 400 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 93:
//#line 401 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 94:
//#line 402 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 95:
//#line 406 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if", val_peek(1), val_peek(0)));}
break;
case 96:
//#line 407 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if", val_peek(0), null));}
break;
case 97:
//#line 408 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta bloque then."); }
break;
case 98:
//#line 412 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(1)));}
break;
case 99:
//#line 413 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(0)));}
break;
case 100:
//#line 417 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(1)));}
break;
case 101:
//#line 418 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(0)));}
break;
case 102:
//#line 421 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
								   yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));}
break;
case 103:
//#line 423 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 104:
//#line 424 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 105:
//#line 427 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(1),val_peek(0)));}
break;
case 106:
//#line 428 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(0),null));}
break;
case 107:
//#line 429 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 108:
//#line 432 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1)));}
break;
case 109:
//#line 433 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(0)));}
break;
case 110:
//#line 436 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(1)));}
break;
case 111:
//#line 437 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(0)));}
break;
case 112:
//#line 440 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
									   yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));}
break;
case 113:
//#line 442 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 114:
//#line 443 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 115:
//#line 446 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(1),val_peek(0)));}
break;
case 116:
//#line 447 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(0),null));}
break;
case 117:
//#line 448 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 118:
//#line 451 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1)));}
break;
case 119:
//#line 452 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(0)));}
break;
case 120:
//#line 455 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(1)));}
break;
case 121:
//#line 456 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(0)));}
break;
case 122:
//#line 459 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
									  yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));
									}
break;
case 123:
//#line 462 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 124:
//#line 463 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 125:
//#line 466 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(1),val_peek(0)));}
break;
case 126:
//#line 467 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(0),null));}
break;
case 127:
//#line 468 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 128:
//#line 471 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(1)));}
break;
case 129:
//#line 472 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(0)));}
break;
case 130:
//#line 475 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(1)));}
break;
case 131:
//#line 476 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(0)));}
break;
case 132:
//#line 478 "gramatica.y"
{this.contadorIf++; agregarAmbito("ifthen"+contadorIf);}
break;
case 133:
//#line 481 "gramatica.y"
{this.ambito = borrarAmbito(this.ambito); agregarAmbito("ifelse"+this.contadorIf);}
break;
case 134:
//#line 484 "gramatica.y"
{this.ambito = borrarAmbito(this.ambito);}
break;
case 135:
//#line 491 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia when");
								  yyval = new ParserVal(sintactico.crearNodo("when", val_peek(3), val_peek(1)));}
break;
case 136:
//#line 493 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta abrir paréntesis la condicion"); }
break;
case 137:
//#line 494 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta punto y coma pero se reconoce sentencia when."); }
break;
case 138:
//#line 497 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("condicionWhen",val_peek(0))); agregarAmbito("when"+this.contadorWhen); this.contadorWhen++;}
break;
case 139:
//#line 501 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1))); this.ambito = borrarAmbito(this.ambito); }
break;
case 140:
//#line 502 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar la llave del bloque."); }
break;
case 141:
//#line 503 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir la llave del bloque"); }
break;
case 142:
//#line 510 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")");
							  	yyval = new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)));
							  	this.ambito = borrarAmbito(this.ambito);
							}
break;
case 143:
//#line 514 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 144:
//#line 515 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 145:
//#line 516 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");

									int existente = sintactico.encontrarTag(val_peek(6).ival, this.ambito);
									if (existente >= 0) {
										if (sintactico.getEntradaTablaSimb(existente).getUso().equals("tag")) {
											ParserVal nodoTag = new ParserVal(sintactico.crearNodoControl("etiqueta", new ParserVal(sintactico.crearHoja(existente))));
											yyval = new ParserVal( sintactico.crearNodo("for-etiquetado", nodoTag , new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)))));
											sintactico.eliminarEntrada(val_peek(6).ival);
										} else {
											sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): el identificador utilizado no es una etiqueta.");
										}
									} else {
										sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): etiqueta invalida");
									}
									this.ambito = borrarAmbito(this.ambito);
								}
break;
case 146:
//#line 534 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")");
							 yyval = new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)));
							 this.ambito = borrarAmbito(this.ambito);
						}
break;
case 147:
//#line 538 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 148:
//#line 539 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 149:
//#line 543 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodo("encabezado for",val_peek(2), val_peek(0)));

						}
break;
case 150:
//#line 548 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("condicion y operacion for",  val_peek(2), val_peek(0)));}
break;
case 151:
//#line 552 "gramatica.y"
{
						int existente = enAmbito(val_peek(2));
						if (existente >= 0) {
							if (sintactico.getEntradaTablaSimb(existente).getUso().equals("for_var")) {
								String lexExistente = sintactico.getEntradaTablaSimb(existente).getLexema();
								String [] aux = lexExistente.split("@");

								String ambitoExistente = aux[1];

								if ( ambitoExistente.equals(this.ambito)) {
									sintactico.setUsoEnIndex("i32",val_peek(0).ival);
									Nodo op2 = (Nodo) val_peek(0).obj;
									String typeOP2 = op2.getTipo();
                                                                        String typeOP1 = sintactico.getTipoFromTS(existente);
                                                                        if (typeOP1.equals(typeOP2)) {
										ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
										ParserVal constante = new ParserVal(op2);
										yyval = new ParserVal(sintactico.crearNodoControl("condicionFor", new ParserVal(sintactico.crearNodo(val_peek(1).sval,identificador,constante))));
										sintactico.eliminarEntrada(val_peek(2).ival);
									}else{
									sintactico.addErrorSintactico("SemanticError. se reconoce FOR pero hay un problema de tipos en la condicion " + AnalizadorLexico.LINEA);
									}
								} else {
									sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable utilizada no corresponde a este for loop");
								}
							} else {
								sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable utilizada en la condicion debe ser la declarada en el for loop.");
							}
						} else {
							sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable usada no ha sido declarada.");
						}
				     	}
break;
case 152:
//#line 584 "gramatica.y"
{
					int existente = enAmbito(val_peek(4));
					if (existente >= 0) {
						if (sintactico.getEntradaTablaSimb(existente).getUso().equals("for_var")) {
							String lexExistente = sintactico.getEntradaTablaSimb(existente).getLexema();
							String [] aux = lexExistente.split("@");

							String ambitoExistente = aux[1];

							if ( ambitoExistente.equals(this.ambito)) {
								/*sintactico.setUsoEnIndex("i32",$3.ival);*/
								Nodo op2 = (Nodo) val_peek(1).obj;
								String typeOP2 = op2.getTipo();
								String typeOP1 = sintactico.getTipoFromTS(existente);
								if (typeOP1.equals(typeOP2)) {

									ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
									ParserVal constante = new ParserVal(op2);
									Nodo comparacion = sintactico.crearNodo(val_peek(3).sval,identificador,constante);
									comparacion.setTipo("i32");
									yyval = new ParserVal(sintactico.crearNodoControl("condicionFor", new ParserVal(comparacion)));
									sintactico.eliminarEntrada(val_peek(4).ival);
								}else{
								sintactico.addErrorSintactico("SemanticError. se reconoce FOR pero hay un problema de tipos en la condicion " + AnalizadorLexico.LINEA);
								}
							} else {
								sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable utilizada no corresponde a este for loop");
							}
						} else {
							sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable utilizada en la condicion debe ser la declarada en el for loop.");
						}
					} else {
						sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable usada no ha sido declarada.");
					}
				}
break;
case 153:
//#line 621 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(2))); this.variablesFor.pop();}
break;
case 154:
//#line 622 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(0))); this.variablesFor.pop();}
break;
case 155:
//#line 623 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): Falta el ; al final del bloque del for");}
break;
case 156:
//#line 626 "gramatica.y"
{yyval.sval = new String("+");}
break;
case 157:
//#line 627 "gramatica.y"
{yyval.sval = new String("-");}
break;
case 165:
//#line 638 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 166:
//#line 639 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten retornos fuera de una funcion"); }
break;
case 167:
//#line 644 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(2)));}
break;
case 168:
//#line 645 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(0)));}
break;
case 169:
//#line 646 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): falta ; al final del bloque del for."); }
break;
case 170:
//#line 649 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")");
                        							yyval = new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)));
										this.ambito = borrarAmbito(this.ambito);
									}
break;
case 171:
//#line 653 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 172:
//#line 654 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 173:
//#line 655 "gramatica.y"
{
		       									sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");
											int existente = enAmbito(val_peek(6));
											if (existente >= 0) {
												if (sintactico.getEntradaTablaSimb(existente).getUso().equals("tag")) {
													yyval = new ParserVal( sintactico.crearNodo("for-etiquetado", new ParserVal(sintactico.crearHoja(existente)), new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)))));
													sintactico.eliminarEntrada(val_peek(6).ival);
												} else {
													sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): el identificador utilizado no es una etiqueta.");
												}
											} else {
												sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): etiqueta invalida");
											}
											this.ambito = borrarAmbito(this.ambito);
										}
break;
case 174:
//#line 674 "gramatica.y"
{
					agregarAmbito("for"+this.contadorFor);
					this.contadorFor++;
					int existente = enAmbito(val_peek(2));
					if (existente < 0){
						sintactico.setTipoEnIndex("i32", val_peek(2).ival);
						sintactico.setTipoEnIndex("i32", val_peek(0).ival);
						sintactico.setLexemaEnIndex(val_peek(2).ival, "@"+this.ambito);
						sintactico.setUsoEnIndex("for_var", val_peek(2).ival);
						this.variablesFor.push(val_peek(2).ival);
						ParserVal identificador = new ParserVal(sintactico.crearHoja(val_peek(2).ival));
						ParserVal constante = new ParserVal(sintactico.crearHoja(val_peek(0).ival));
						sintactico.setUsoEnIndex("cte",val_peek(0).ival);
						yyval = new ParserVal(sintactico.crearNodoControl("asignacionFor",new ParserVal(sintactico.crearNodo("=:",identificador,constante))));
					} else {
						sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): la variable utilizada para el for loop ya ha sido declarada.");
					}
				   }
break;
case 175:
//#line 694 "gramatica.y"
{
						String type = sintactico.getTipoFromTS(val_peek(0).ival);
						if (type.equals("i32")){
							ParserVal id = new ParserVal(sintactico.crearHoja(this.variablesFor.peek()));
							ParserVal cte = new ParserVal(sintactico.crearHoja(val_peek(0).ival));
							Nodo op = sintactico.crearNodo(val_peek(1).sval, id, cte);
							op.setTipo("i32");
							ParserVal ope = new ParserVal(op);
							ParserVal asig =  new ParserVal(sintactico.crearNodo("=:",id,ope));
							sintactico.setUsoEnIndex("cte",val_peek(0).ival);

							yyval = new ParserVal(sintactico.crearNodoControl("operacionFor", asig));
						} else {
						sintactico.addErrorSintactico("SemanicError. (Línea " + (AnalizadorLexico.LINEA) + ") no se permiten flotantes en el valor de incremento/decremento");
						}

					}
break;
case 176:
//#line 711 "gramatica.y"
{sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): Falta el signo en la operacion de incremento/decremento del for.");}
break;
case 185:
//#line 722 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 186:
//#line 726 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 187:
//#line 727 "gramatica.y"
{
									ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
									yyval = modificado;
								}
break;
case 188:
//#line 731 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): no se permiten cuerpos de for vacios.");}
break;
case 189:
//#line 736 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio una sentencia break (Línea " + AnalizadorLexico.LINEA + ")");
					yyval = new ParserVal(sintactico.crearNodoControl("break",null));}
break;
case 190:
//#line 738 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio una sentencia break con retorno de valor (Línea " + AnalizadorLexico.LINEA + ")");
                			yyval = new ParserVal(sintactico.crearNodoControl("breakValor", new ParserVal(sintactico.crearHoja(val_peek(1).ival))));
                			sintactico.setUsoEnIndex("cte",val_peek(1).ival);
                			tipoBreak = sintactico.getTipoFromTS(val_peek(1).ival);
                			}
break;
case 191:
//#line 744 "gramatica.y"
{	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de BREAK."); }
break;
case 192:
//#line 747 "gramatica.y"
{
							sintactico.addAnalisis("Se reconocio una sentencia continue (Línea " + AnalizadorLexico.LINEA + ")");
							yyval = new ParserVal(sintactico.crearNodoControl("continue",null));}
break;
case 193:
//#line 750 "gramatica.y"
{ 	sintactico.addAnalisis("Se reconocio una sentencia continue con etiquetado(Línea " + AnalizadorLexico.LINEA + ")");
                   					int existente = enAmbito(val_peek(1));
							if (existente < 0 ) {
								sintactico.setLexemaEnIndex(val_peek(1).ival,"@"+this.ambito);
								sintactico.setUsoEnIndex("tag",val_peek(1).ival);
								yyval = new ParserVal(sintactico.crearNodoControl("continue-etiqueta", new ParserVal(sintactico.crearHoja(val_peek(1).ival))));
							} else {
								sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): el identificador de la etiqueta ya ha sido utilizado.");
							}
                   					}
break;
case 194:
//#line 760 "gramatica.y"
{ 	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ':'CONTINUE."); }
break;
case 195:
//#line 761 "gramatica.y"
{ 	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego del CONTINUE "); }
break;
case 196:
//#line 764 "gramatica.y"
{
								int existente = enAmbito(val_peek(4));
								if (existente >= 0) {
									Token idFuncInvocada = sintactico.getEntradaTablaSimb(existente);
									if (idFuncInvocada.getUso().equals("func")) {
										sintactico.checkParametros(idFuncInvocada.getLexema());
										yyval = new ParserVal(sintactico.crearNodoFunc(existente, val_peek(2)));
										sintactico.eliminarEntrada(val_peek(4).ival);
									} else {
										sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): el identificador no corresponde a una funcion.");
									}
								} else {
									sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): funcion no declarada.");
								}

							}
break;
case 198:
//#line 797 "gramatica.y"
{
		    				yyval = new ParserVal(sintactico.crearNodoParam("paramInv", val_peek(2), val_peek(0)));
		    				NodoHijo aux = (NodoHijo)val_peek(2).obj;
						sintactico.addListaVariables(aux.getRefTablaSimbolos());
						NodoHijo aux1 = (NodoHijo)val_peek(0).obj;
                                                sintactico.addListaVariables(aux1.getRefTablaSimbolos());

					}
break;
case 199:
//#line 805 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodoParam("paramInv", val_peek(0), null));

		    				NodoHijo aux = (NodoHijo)val_peek(0).obj;
                                         	sintactico.addListaVariables(aux.getRefTablaSimbolos());

		 			   }
break;
case 200:
//#line 814 "gramatica.y"
{ Nodo expresion = sintactico.crearNodo(val_peek(1).sval, val_peek(2), val_peek(0));
                                                        expresion.setTipo(tipoResultante( ((Nodo)val_peek(2).obj).getTipo(),((Nodo)val_peek(0).obj).getTipo(), "comparacion por " + val_peek(1).sval ));
                                                        yyval = new ParserVal(expresion);
							}
break;
case 201:
//#line 821 "gramatica.y"
{	Nodo expresion = sintactico.crearNodo(val_peek(1).sval, val_peek(2), val_peek(0));
					expresion.setTipo(tipoResultante( ((Nodo)val_peek(2).obj).getTipo(),((Nodo)val_peek(0).obj).getTipo(), val_peek(1).sval ));
					yyval = new ParserVal(expresion);
					}
break;
case 203:
//#line 829 "gramatica.y"
{	Nodo n = sintactico.crearNodo("*",val_peek(2),val_peek(0));
					n.setTipo(tipoResultante( ((Nodo)val_peek(2).obj).getTipo(),((Nodo)val_peek(0).obj).getTipo(), "multiplicacion" ));
					yyval = new ParserVal(n);
				}
break;
case 204:
//#line 833 "gramatica.y"
{ Nodo n = sintactico.crearNodo("/",val_peek(2),val_peek(0));
				  n.setTipo(tipoResultante( ((Nodo)val_peek(2).obj).getTipo(),((Nodo)val_peek(0).obj).getTipo(), " division " ));
				  yyval = new ParserVal(n);}
break;
case 206:
//#line 839 "gramatica.y"
{
				int existente = enAmbito(val_peek(0));
				if (existente >= 0) {
					String type = sintactico.getTipoFromTS(existente);
					Nodo n = sintactico.crearHoja(existente);
					n.setTipo(type);
					yyval = new ParserVal(n);
					sintactico.eliminarEntrada(val_peek(0).ival);
				} else {
					Nodo n = new NodoHijo(null, "Error");
					n.setTipo("");
					yyval = new ParserVal(n);
					sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): variable no declarada.");
				}
				}
break;
case 207:
//#line 854 "gramatica.y"
{
				String lexema = sintactico.getEntradaTablaSimb(val_peek(0).ival).getLexema();
                                int existente = sintactico.getTS().existeEntrada(lexema);
				if (existente >= 0 && existente < val_peek(0).ival) {
					yyval = new ParserVal(sintactico.crearHoja(existente));
					sintactico.setUsoEnIndex("cte",existente);
					sintactico.eliminarEntrada(val_peek(0).ival);
				} else {
					String type = sintactico.getTipoFromTS(val_peek(0).ival);
					if (type.equals("i32"))
					     sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
					else
						sintactico.verificarRangoFlotante(val_peek(0).ival);

					sintactico.setUsoEnIndex("cte",val_peek(0).ival);
					Nodo n = sintactico.crearHoja(val_peek(0).ival);
					n.setTipo(type);

					yyval = new ParserVal(n);
				}
                  	}
break;
case 208:
//#line 875 "gramatica.y"
{
				sintactico.setNegativoTablaSimb(val_peek(0).ival);
				String lexema = sintactico.getEntradaTablaSimb(val_peek(0).ival).getLexema();
				int existente = sintactico.getTS().existeEntrada(lexema);
                                if (existente >= 0  && existente < val_peek(0).ival) {
                                	yyval = new ParserVal(sintactico.crearHoja(existente));
                                	sintactico.setUsoEnIndex("cte neg",existente);
                                        sintactico.eliminarEntrada(val_peek(0).ival);
                                }else{
                                	String type = sintactico.getTipoFromTS(val_peek(0).ival);
									if (type.equals("i32"))
					     				sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
									else
										sintactico.verificarRangoFlotante(val_peek(0).ival);

									Nodo n = sintactico.crearHoja(val_peek(0).ival);
									n.setTipo(type);
									yyval = new ParserVal(n);
									sintactico.setUsoEnIndex("cte neg",val_peek(0).ival);
								}
                   	}
break;
case 209:
//#line 899 "gramatica.y"
{ yyval.sval = new String("<") ; }
break;
case 210:
//#line 900 "gramatica.y"
{ yyval.sval = new String(">") ; }
break;
case 211:
//#line 901 "gramatica.y"
{ yyval.sval = new String("<="); }
break;
case 212:
//#line 902 "gramatica.y"
{ yyval.sval = new String(">="); }
break;
case 213:
//#line 903 "gramatica.y"
{ yyval.sval = new String("=") ; }
break;
case 214:
//#line 904 "gramatica.y"
{ yyval.sval = new String("=!"); }
break;
case 215:
//#line 908 "gramatica.y"
{ yyval.sval = new String("i32"); }
break;
case 216:
//#line 909 "gramatica.y"
{ yyval.sval = new String("f32"); }
break;
//#line 2279 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
