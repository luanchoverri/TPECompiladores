//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"

package AnalizadorSintactico;

import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import ArbolSintactico.NodoHijo;
import ArbolSintactico.Nodo;


//#line 27 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short id=257;
public final static short cte=258;
public final static short If=259;
public final static short then=260;
public final static short Else=261;
public final static short end_if=262;
public final static short out=263;
public final static short fun=264;
public final static short Return=265;
public final static short BREAK=266;
public final static short i32=267;
public final static short when=268;
public final static short For=269;
public final static short CONTINUE=270;
public final static short f32=271;
public final static short cadena=272;
public final static short menorigual=273;
public final static short mayorigual=274;
public final static short distinto=275;
public final static short opasignacion=276;
public final static short Const=277;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    2,    2,    2,    2,    4,    4,    4,    5,
<<<<<<< HEAD
    5,    5,    6,    6,    6,    6,    8,    8,    3,    3,
=======
    5,    6,    6,    6,    6,    6,    8,    8,    3,    3,
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
    3,    3,   10,   10,   10,   10,   10,   16,   16,   11,
   11,   11,   11,   11,   11,   11,   13,   13,   13,   24,
   24,   25,   25,   26,   28,   28,   28,   28,   29,   29,
   14,   30,   30,   30,   30,   30,   27,   33,   33,   33,
   33,   33,   33,   33,   33,   36,   36,   32,   32,   32,
   32,    7,    7,    7,   17,   17,   17,   17,   37,   37,
   18,   18,   18,   18,   18,   18,   19,   19,   19,   38,
   38,   38,   38,   39,   39,   39,   42,   42,   43,   43,
   46,   46,   46,   47,   47,   47,   48,   48,   49,   49,
   34,   34,   34,   50,   50,   50,   51,   51,   52,   52,
   53,   53,   53,   54,   54,   54,   55,   55,   56,   56,
   44,   45,   40,   15,   15,   15,   59,   60,   60,   60,
<<<<<<< HEAD
   61,   61,   61,   61,   62,   65,   66,   63,   63,   63,
   69,   69,    9,    9,    9,    9,    9,    9,    9,    9,
    9,   20,   70,   70,   70,   35,   35,   35,   35,   64,
   67,   58,   58,   58,   58,   58,   58,   58,   58,   58,
   57,   57,   57,   22,   22,   22,   23,   23,   23,   23,
   21,   71,   71,   71,   41,   31,   31,   73,   73,   73,
   72,   72,   72,   68,   68,   68,   68,   68,   68,   12,
   12,
};
final static short yylen[] = {                            2,
    2,    1,    4,    3,    2,    2,    3,    3,    3,    1,
    3,    3,    3,    3,    3,    2,    1,    2,    1,    1,
=======
   61,   61,   61,   61,   62,   65,   66,   66,   63,   63,
   63,   70,   70,    9,    9,    9,    9,    9,    9,    9,
    9,    9,   20,   71,   71,   71,   35,   35,   35,   35,
   64,   67,   67,   58,   58,   58,   58,   58,   58,   58,
   58,   58,   57,   57,   57,   22,   22,   22,   23,   23,
   23,   23,   21,   72,   72,   72,   41,   31,   31,   73,
   73,   73,   69,   69,   69,   68,   68,   68,   68,   68,
   68,   12,   12,
};
final static short yylen[] = {                            2,
    2,    1,    4,    3,    2,    2,    3,    3,    3,    1,
    3,    3,    4,    3,    3,    2,    1,    2,    1,    1,
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
    2,    2,    3,    3,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    2,    2,    2,    3,    1,    2,
    2,    2,    0,    3,    0,    1,    3,    1,    6,    6,
    2,    5,    5,    5,    4,    5,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    2,    1,    2,    2,    1,
    1,    1,    3,    2,    4,    4,    4,    3,    3,    2,
    5,    5,    5,    4,    3,    5,    5,    6,    5,    3,
    2,    2,    1,    2,    1,    1,    4,    2,    4,    2,
    5,    5,    4,    2,    1,    2,    4,    2,    4,    2,
    5,    5,    4,    2,    1,    2,    4,    2,    4,    2,
    5,    5,    4,    2,    1,    2,    4,    2,    4,    2,
    1,    1,    1,    6,    6,    6,    1,    4,    4,    4,
<<<<<<< HEAD
    5,    5,    4,    7,    3,    3,    3,    4,    1,    4,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    1,    4,    1,    4,    5,    5,    4,    7,    3,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    1,    2,    3,    2,    2,    4,    4,    2,
    5,    0,    3,    1,    3,    3,    1,    3,    3,    1,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,
};
final static short yydefred[] = {                         0,
    2,    0,    0,    0,    0,    0,    0,    0,  210,    0,
    0,    0,  211,    0,    0,    0,    0,    0,   26,   19,
   20,    0,    0,   25,   27,   30,   31,   32,   33,   34,
    0,    0,    0,  162,    0,   72,    0,    0,    0,    0,
    0,   37,  201,  202,    0,    0,    0,    0,    0,  200,
    0,    0,    0,    0,    0,  186,    0,  184,    0,  137,
    0,    0,    0,    0,    0,  190,    0,  187,    0,    0,
    0,    0,   10,    0,    0,    0,    6,   21,   22,    0,
    0,   35,   36,    0,   51,   38,    0,    0,    0,    0,
   74,    0,    0,   78,    0,    0,    0,  203,  206,  207,
  209,  208,  151,  152,  204,  205,    0,    0,    0,  132,
    0,    0,   96,    0,    0,   91,    0,    0,    0,    0,
    0,    0,   48,    0,    0,    0,    0,  185,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  149,    0,  153,
  154,  155,  157,  158,  159,    0,  156,    0,    0,    0,
    0,   16,    0,    0,    9,    8,    7,    0,    0,    4,
   85,    0,   23,   24,    0,    0,    0,   71,   58,   60,
   61,    0,    0,    0,   63,    0,   70,   59,   62,    0,
   73,    0,    0,    0,   80,    0,   76,   75,   77,   90,
    0,    0,  131,    0,  133,    0,   94,    0,    0,   98,
    0,  100,  198,  199,   84,    0,    0,    0,    0,   41,
   40,    0,    0,    0,    0,    0,  170,    0,    0,    0,
    0,    0,   17,    0,  160,  161,  143,    0,  145,    0,
  189,  188,   15,   14,   13,   11,   12,    3,    0,    0,
    0,    0,   64,   65,   44,   69,   68,    0,  191,  193,
   79,   89,    0,   87,   29,    0,    0,   83,   82,   81,
   86,    0,   47,    0,    0,    0,    0,    0,    0,  141,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   18,
  142,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  172,  173,  176,  177,  178,  175,
  174,  179,  164,    0,    0,   88,   97,   28,   99,   49,
   42,   50,  136,  134,    0,    0,  135,    0,  108,    0,
  110,  103,    0,  104,  106,    0,    0,   55,    0,  150,
  148,  147,  146,    0,    0,    0,    0,  118,    0,  120,
  113,    0,  114,  116,    0,    0,  183,    0,  181,    0,
  180,  168,  144,  139,  138,  140,    0,    0,  102,  101,
   54,   56,   52,   53,  171,    0,   67,    0,    0,  112,
  111,  166,    0,    0,    0,    0,    0,    0,  182,  167,
  107,  109,    0,  117,   66,  119,    0,  128,    0,  130,
  123,    0,  124,  126,  165,  163,  169,    0,    0,  122,
  121,  127,  129,
=======
    5,    5,    4,    7,    3,    3,    3,    5,    4,    1,
    4,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    1,    4,    1,    4,    5,    5,    4,    7,
    3,    2,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    1,    2,    1,    2,    3,    2,    2,    4,
    4,    2,    5,    0,    3,    1,    3,    3,    1,    3,
    3,    1,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,
};
final static short yydefred[] = {                         0,
    2,    0,    0,    0,    0,    0,    0,    0,  212,    0,
    0,    0,  213,    0,    0,    0,    0,    0,   26,   19,
   20,    0,    0,   25,   27,   30,   31,   32,   33,   34,
    0,    0,    0,  163,    0,   72,    0,    0,    0,    0,
    0,   37,  203,  204,    0,    0,    0,    0,    0,  202,
    0,    0,    0,    0,    0,  188,    0,  186,    0,  137,
    0,    0,    0,    0,    0,  192,    0,  189,    0,    0,
    0,    0,   10,    0,    0,    0,    6,   21,   22,    0,
    0,   35,   36,    0,   51,   38,    0,    0,    0,    0,
   74,    0,    0,   78,    0,    0,  205,    0,  208,  209,
  211,  153,  210,  152,  206,  207,    0,    0,    0,  132,
    0,    0,   96,    0,    0,   91,    0,    0,    0,    0,
    0,    0,   48,    0,    0,    0,    0,  187,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  150,    0,  154,
  155,  156,  158,  159,  160,    0,  157,    0,    0,    0,
    0,   16,    0,    0,    9,    8,    7,    0,    4,   85,
    0,   23,   24,    0,    0,    0,   71,   58,   60,   61,
    0,    0,    0,   63,    0,   70,   59,   62,    0,   73,
    0,    0,    0,   80,    0,   76,   75,   77,   90,    0,
    0,  131,    0,  133,    0,   94,    0,    0,   98,    0,
  100,  200,  201,   84,    0,    0,    0,    0,   41,   40,
    0,    0,    0,    0,    0,    0,  171,    0,    0,    0,
    0,    0,   17,    0,  161,  162,  143,    0,  145,    0,
  191,  190,   15,   14,   12,    0,   11,    3,    0,    0,
    0,    0,   64,   65,   44,   69,   68,    0,  195,  193,
   79,   89,    0,   87,   29,    0,    0,   83,   82,   81,
   86,    0,   47,    0,    0,    0,    0,    0,    0,    0,
  141,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   18,  142,    0,    0,   13,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  174,  175,  178,  179,
  180,  177,  176,  181,  165,    0,    0,   88,   97,   28,
   99,   49,   42,   50,    0,    0,  134,  136,  135,    0,
  108,    0,  110,  103,    0,  104,  106,    0,    0,   55,
    0,  151,  149,    0,  147,    0,  146,    0,    0,    0,
    0,  118,    0,  120,  113,    0,  114,  116,    0,    0,
  185,    0,  183,    0,  182,  169,  144,  139,  138,  140,
    0,    0,  102,  101,   54,   56,   52,   53,    0,  173,
  172,    0,   67,    0,    0,  112,  111,  167,    0,    0,
    0,    0,    0,    0,  184,  168,  107,  109,  148,    0,
  117,   66,  119,    0,  128,    0,  130,  123,    0,  124,
  126,  166,  164,  170,    0,    0,  122,  121,  127,  129,
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
};
final static short yydgoto[] = {                          2,
    3,   17,   18,   19,   72,   73,   41,  222,  138,  139,
   21,   22,   23,   24,   25,  256,   26,   27,   28,   29,
<<<<<<< HEAD
   30,   31,   32,  126,  265,   85,  174,  127,   33,  146,
   47,  176,  367,  178,  301,  368,   96,   48,  111,  196,
   49,  112,  113,  114,  115,  147,  273,  274,  275,  287,
  288,  289,  302,  375,  376,  377,  348,  303,   61,  216,
   34,   64,  148,   65,  229,  230,  333,  107,  108,  304,
   89,   50,   51,
};
final static short yysindex[] = {                      -210,
    0,    0,  831,  -26,   38,  -31,  -29,   30,    0,   59,
  -27,   57,    0,  -35, 1001, -195,   41,  862,    0,    0,
    0, -132,   46,    0,    0,    0,    0,    0,    0,    0,
 -106,  -88,   53,    0,   16,    0, -132,  -40,  -15,  -79,
  -44,    0,    0,    0,  -15,  -78,  -12, -192,  167,    0,
  118,  -45,  -38,  184, -101,    0,  221,    0,  -15,    0,
  256,  -18,   48,  134,  251,    0,  261,    0,   92,   18,
   97,   80,    0,  881,  100, 1001,    0,    0,    0,  288,
  101,    0,    0,  900,    0,    0,  275,  109,  317,  322,
    0,    6,  -59,    0,   29,  309,  328,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -15,  -15, -167,    0,
  110,  112,    0, 1038, 1052,    0,  -15,  -15,  316,   -5,
  121, -101,    0,  122,  124,  338,  344,    0,  347,  130,
  331,  136,  366,   38,   68,  917,  561,    0,  154,    0,
    0,    0,    0,    0,    0,  156,    0,  160,  158,  162,
  363,    0,  168, -201,    0,    0,    0,  166,  169,    0,
    0,  932,    0,    0,  -17,   38,  -20,    0,    0,    0,
    0,  172,  174,  306,    0,  900,    0,    0,    0,   48,
    0,  373,  -15,  165,    0,  181,    0,    0,    0,    0,
  144,  118,    0, -171,    0,  385,    0,  -32,  268,    0,
  268,    0,    0,    0,    0,  388,   21,  390,  407,    0,
    0, -140,  392,  130,  968,  394,    0,  561, -167,  -15,
  102,  576,    0,  195,    0,    0,    0,   58,    0,  395,
    0,    0,    0,    0,    0,    0,    0,    0,    2, -167,
   48,  511,    0,    0,    0,    0,    0,  414,    0,    0,
    0,    0,  201,    0,    0,  339, 1115,    0,    0,    0,
    0,  392,    0, -175,  204,   27, 1001,  984,  209,    0,
  595,  611, -124,  112,  210,  126,  213,  413,   36,    0,
    0,  215,  144,  438,  253,  484, -122,  112,  223,  439,
   38,  630,  660,  225,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  226,  561,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  679,  229,    0,  917,    0,  917,
    0,    0,   43,    0,    0,  230,   82,    0,  231,    0,
    0,    0,    0,  232,   48,  -24, 1132,    0, 1132,    0,
    0,   83,    0,    0,  660, -167,    0,  696,    0,  234,
    0,    0,    0,    0,    0,    0,  711,  726,    0,    0,
    0,    0,    0,    0,    0,  450,    0,  389, 1101,    0,
    0,    0,  750,  769, -105,  112,  236,   87,    0,    0,
    0,    0,  660,    0,    0,    0,  630,    0,  630,    0,
    0,   90,    0,    0,    0,    0,    0,  797,  816,    0,
    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,  436,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  497,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  436,    0,    0,    0,  457,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -61,    0,
 1075,    0,    0,    0,  458,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   39,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  459,
    0,   11,    0,    0,    0,    0,   91,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1153,    0,
    0, -104,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  458,    0,    0,    0,  460,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  436,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  377,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -34, 1232,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  247,    0,    0,    0,    0,    0,    0,    0,
=======
   30,   31,   32,  126,  265,   85,  173,  127,   33,  146,
   47,  175,  373,  177,  303,  374,   96,   48,  111,  195,
   49,  112,  113,  114,  115,  147,  274,  275,  276,  289,
  290,  291,  304,  381,  382,  383,  352,  305,   61,  215,
   34,   64,  148,   65,  229,  230,  337,  107,   50,  108,
  306,   90,   51,
};
final static short yysindex[] = {                      -177,
    0,    0,  860,  -14,   29,  -27,  -22,   26,    0,   63,
  -11,   82,    0,  -36,  992, -188,  -21,  883,    0,    0,
    0, -122,   86,    0,    0,    0,    0,    0,    0,    0,
 -107, -102,   50,    0,  -13,    0, -122,  -47,   87,  -75,
  -38,    0,    0,    0,  -66,   87,   32, -224,  143,    0,
   16,  -60,  -25,  165,  196,    0,  159,    0,   87,    0,
  184,   -4,  -29,  478,  170,    0,  173,    0,   17,   76,
   52,   55,    0,  906,   59,  992,    0,    0,    0,  257,
   77,    0,    0,  812,    0,    0,  291,   81,  327,  332,
    0,   -7, -173,    0,   68,  320,    0,  355,    0,    0,
    0,    0,    0,    0,    0,    0,   87,   87, -137,    0,
  144,  149,    0,  176,  238,    0,   87,   87,  354,   21,
  158,  196,    0,  164,  171,  371,  380,    0,  -30,  162,
  373,  174,  397,   29,   70,  921,  562,    0,  191,    0,
    0,    0,    0,    0,    0,  192,    0,  195,  200,  203,
  407,    0,  217,   98,    0,    0,    0,  218,    0,    0,
  945,    0,    0,   -6,   29,   19,    0,    0,    0,    0,
  222,  229,  362,    0,  812,    0,    0,    0,  -29,    0,
   87,  429,  220,    0,  232,    0,    0,    0,    0,  126,
   16,    0, -156,    0,  432,    0,  -34,  547,    0,  547,
    0,    0,    0,    0,  433,   53,  434,  453,    0,    0,
 -211,  440,  961,  162,  441,  446,    0,  562, -137,   87,
  415,  579,    0,  250,    0,    0,    0,  298,    0,  451,
    0,    0,    0,    0,    0,  254,    0,    0,  -42, -137,
  -29,  518,    0,    0,    0,    0,    0,  472,    0,    0,
    0,    0,  260,    0,    0,  274,  404,    0,    0,    0,
    0,  440,    0, -195,  264,  992,  977,  466,  279,  280,
    0,  594,  609, -134,  149,  283,  427,  286,  486,   62,
    0,    0,   85,   46,    0,  507,  115,  135, -114,  149,
  292,  508,   29,  628,  649,  296,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  297,  562,    0,    0,    0,
    0,    0,    0,    0,  671,  300,    0,    0,    0,  921,
    0,  921,    0,    0,   94,    0,    0,  301,   97,    0,
  305,    0,    0,   87,    0,  306,    0,  303,  -29,  -19,
 1032,    0, 1032,    0,    0,  109,    0,    0,  649, -137,
    0,  686,    0,  309,    0,    0,    0,    0,    0,    0,
  710,  729,    0,    0,    0,    0,    0,    0,  150,    0,
    0,  525,    0,  160,  258,    0,    0,    0,  759,  778,
 -110,  149,  311,  119,    0,    0,    0,    0,    0,  649,
    0,    0,    0,  628,    0,  628,    0,    0,  130,    0,
    0,    0,    0,    0,  797,  841,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,  516,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  578,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  516,    0,    0,    0,  539,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
 1054,    0,    0,    0,  540,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   43,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  541,    0,
    0,   23,    0,    0,    0,    0,    0,  148,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  494,    0,
    0,  -99,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  540,    0,    0,    0,  543,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  516,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  461,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -24,
 1223,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  333,    0,    0,    0,    0,    0,    0,    0,    0,
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
<<<<<<< HEAD
    0,  381,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -84,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -64,    0,    0,
=======
    0,  465,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -95,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -92,
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
<<<<<<< HEAD
    0,    0,    0,    0,    0,  -55,    0,    0,    0,    0,
=======
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -68,    0,    0,    0,    0,    0,    0,    0,    0,
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
<<<<<<< HEAD
    0,    0,  -11,    0,    0,  -10,    5, -206, 1068,   -3,
   -8,    4,  159,    0,    0,  304,   69,  191,    0,  -36,
  -39,  299,  357,  294,  245,    0,    0,  391,    0,  424,
  103,    0,  -65,    0,  -67,  176,    0,  -82,  411, -152,
   77,    0,  417, -158,  200,    0,    0,    0,  252,    0,
    0,  244,    0,    0,    0,  164, -172,   72,  476,  329,
    0,  -57, -115,    0,    0,    0,    0,  314,  262, -255,
    0,   12,  442,
};
final static int YYTABLESIZE=1507;
=======
    0,    0,  -12,    0,    0,  438,   -9, -123,  -96,   -3,
    4,   -5,  125,    0,    0,  390,   75,  189,    0,  -32,
  -39,  304,  418,  386,  338,    0,    0,  481,    0,  328,
  -40,    0,  -79,    0,  -74,  261,    0,  -86,  496, -158,
  128,    0,  495, -199,  224,    0,    0,    0,  334,    0,
    0,  318,    0,    0,    0,  228, -179,  900,  553,  -81,
    0,  -59, -109,    0,    0,    0,    0,  385,  -31,  330,
 -205,    0,  510,
};
final static int YYTABLESIZE=1498;
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         20,
<<<<<<< HEAD
   46,   94,  121,   74,   93,  133,  195,   39,   53,   79,
   55,   20,   63,   39,   78,   39,  179,   37,  177,  241,
   88,  224,   39,   71,  143,   38,   37,  142,   40,   46,
  103,   38,  104,  239,   40,  207,   40,  350,    5,  131,
  239,  253,   40,   40,  171,   39,    1,  105,  102,  106,
   90,  219,  201,  201,  234,  201,  235,  201,  125,   37,
  271,  159,   88,  184,  162,   79,  132,  109,  110,  201,
   78,  103,   20,  104,  154,  131,   75,   45,   40,  260,
  168,  285,   46,  240,  252,  314,   60,  188,   58,  372,
  195,    9,  193,  110,  331,   13,  143,  143,   59,  142,
  142,  360,  270,   46,   81,  200,  202,  220,  179,  242,
  247,  357,   46,  358,   69,   68,  124,  105,  102,  106,
  323,   97,  248,  158,   35,  125,    9,  397,  203,  204,
   13,  322,  140,  341,  342,   60,  171,  195,  157,  195,
  363,  371,  278,   95,  103,  396,  104,  236,  401,   82,
  391,   95,  169,   79,  123,  124,  195,   95,   78,  117,
  277,    5,   42,   76,  118,    9,  327,   83,  103,   13,
  104,  105,  246,   16,  137,   84,   91,  105,  143,   98,
   80,  142,  143,  290,  326,  142,  103,  373,  104,  353,
  255,  115,  255,   42,  250,   86,  185,  115,   93,   93,
  125,  186,  297,  268,  140,  140,  125,  116,  346,  191,
  119,   20,   92,   44,  398,  125,  399,  179,  179,  338,
  340,   70,  392,  122,   11,  195,  195,   54,   87,   62,
   35,  143,  143,  120,  142,  142,   62,  221,  294,   35,
   52,   43,   44,   36,  169,  171,  171,  308,  308,   36,
  206,   36,  297,  297,  141,  315,  136,   36,   36,   79,
   99,  100,  101,   20,   78,  143,  201,  311,  142,  179,
  284,  179,   35,  152,  170,  153,  259,  366,  143,  128,
  143,  142,  313,  142,  187,   56,  140,   57,  294,  294,
  140,  330,   16,   36,   43,   44,  130,  171,  359,  171,
  179,  179,  385,  385,   62,  297,   79,   16,  297,  149,
  295,   78,   66,   67,  180,   43,   44,  143,  143,  150,
  142,  142,  276,   42,   43,   44,  141,  141,  171,  171,
   99,  100,  101,  297,  297,  156,   70,  362,  370,  140,
  140,  294,  395,  297,  294,  400,  163,  297,  151,  297,
   92,   92,  155,  169,  169,  161,  164,  182,  297,  297,
  295,  295,  144,  349,  181,  183,  170,  189,  190,  294,
  294,  195,  110,  140,  205,  337,  208,  210,   16,  294,
  211,  212,  172,  294,  213,  294,  140,  214,  140,  215,
    4,   88,  134,  217,  294,  294,    6,    7,  135,    8,
    9,   10,   11,   12,   13,  169,  218,  169,  141,  225,
   14,  226,  141,  295,  228,  227,  295,  231,  272,  379,
  145,  232,   70,  233,  237,  140,  140,  243,   16,  244,
  245,  249,  296,   87,  144,  144,  169,  169,  251,  286,
  173,  295,  295,  254,  388,  390,  258,  262,  261,  264,
  281,  295,  269,  283,  305,  295,  306,  295,  349,  312,
  349,  141,  141,  307,  317,  325,  295,  295,  328,  379,
  379,  329,  332,  272,  172,  170,  170,  335,  344,  345,
  351,  352,  296,  296,  356,  361,  364,  286,  365,  380,
  383,  394,  145,  145,   39,  141,    1,  192,   45,  194,
   46,   57,   43,   43,  257,  263,  310,  175,  141,  336,
  141,  166,  209,  384,  369,    6,  144,  135,    8,  194,
  144,  167,   12,   16,  198,  324,    5,  170,  197,  170,
    6,  343,  173,    8,  129,  296,   11,   12,  296,  393,
  298,  282,  266,    0,  334,  374,    0,  141,  141,  192,
   16,  293,    0,    0,    0,    0,    0,    0,  170,  170,
    0,    0,    0,  296,  296,    0,    0,    0,    0,  144,
  144,    0,    0,  296,  145,  374,    0,  296,  145,  296,
    0,    0,    0,  172,  172,    0,    0,    0,  296,  296,
  298,  298,    0,    0,    0,  198,    0,    5,  299,  175,
   16,    6,    0,  144,    8,    0,  339,   11,   12,    0,
    0,    0,    0,    0,    0,   16,  144,    0,  144,    0,
    0,    0,    0,    0,    0,    0,    0,  145,  145,    0,
    0,    0,    0,  292,   16,  172,    0,  172,    0,    0,
    0,  173,  173,  298,    0,  336,  298,  166,  299,  299,
   16,    6,    0,  135,    8,  144,  144,  167,   12,    0,
    0,  145,    0,    0,    0,  300,  172,  172,    0,   16,
    0,  298,  298,    0,  145,    0,  145,    0,    0,    0,
    0,  298,    0,  136,    0,  298,    0,  298,    0,    0,
    0,    0,    0,  173,    0,  173,  298,  298,    0,   16,
  279,  299,    0,    0,  299,    0,    0,    0,  175,  175,
    0,    0,    0,  145,  145,  300,  300,  318,   16,    0,
    0,    0,    0,    0,  173,  173,    0,    0,    0,  299,
  299,    0,    0,  320,    0,   16,    0,    0,    0,  299,
  336,    0,  166,  299,    0,  299,    6,    0,  135,    8,
   16,    0,  167,   12,  299,  299,    0,    0,    0,    0,
  175,    0,  175,    0,    0,   16,    0,  165,  300,  291,
    0,  300,    0,    6,    7,  135,    8,    9,   10,  167,
   12,   13,  292,    0,    0,    0,    0,   14,    0,   16,
    0,  175,  175,    0,    0,    0,  300,  300,    0,    0,
    0,    0,    0,  355,    0,    0,  300,    0,   16,    0,
  300,    0,  300,    0,    0,    0,    0,    4,    0,  134,
  378,  300,  300,    6,    7,  135,    8,    9,   10,   11,
   12,   13,    4,    0,  134,  381,   16,   14,    6,    7,
  135,    8,    9,   10,   11,   12,   13,    0,    0,    0,
  382,    4,   14,  134,    0,   16,    0,    6,    7,  135,
    8,    9,   10,   11,   12,   13,    0,    4,    0,  134,
   16,   14,  387,    6,    7,  135,    8,    9,   10,   11,
   12,   13,    0,    0,    0,  347,  165,   14,  291,    0,
    0,  389,    6,    7,  135,    8,    9,   10,  167,   12,
   13,   16,    0,    0,    0,    0,   14,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  165,    0,  291,    0,
   16,  402,    6,    7,  135,    8,    9,   10,  167,   12,
   13,    0,    0,    0,  354,    4,   14,    5,    0,   16,
  403,    6,    7,    0,    8,    9,   10,   11,   12,   13,
    0,    0,  165,   15,  291,   14,   16,    0,    6,    7,
  135,    8,    9,   10,  167,   12,   13,    4,    0,  134,
    0,   16,   14,    6,    7,  135,    8,    9,   10,   11,
   12,   13,    4,    0,  134,    0,   77,   14,    6,    7,
  135,    8,    9,   10,   11,   12,   13,    0,    0,    0,
    0,    0,   14,    0,    0,  160,  165,   16,  291,    0,
    0,    0,    6,    7,  135,    8,    9,   10,  167,   12,
   13,    0,    0,   16,    0,  165,   14,  291,    0,    0,
    0,    6,    7,  135,    8,    9,   10,  167,   12,   13,
   16,    0,    0,    0,    0,   14,    0,    0,    0,    0,
    0,    0,    0,  165,    0,  291,  238,    0,    0,    6,
    7,  135,    8,    9,   10,  167,   12,   13,    0,    0,
    0,    0,  165,   14,  291,    0,    0,   16,    6,    7,
  135,    8,    9,   10,  167,   12,   13,    4,    0,    5,
  267,   16,   14,    6,    7,    0,    8,    9,   10,   11,
   12,   13,    0,    0,    0,    0,    0,   14,  316,    0,
    0,    0,    0,    0,    0,  197,    0,  197,    4,  197,
    5,    0,    0,    0,    6,    7,    0,    8,    9,   10,
   11,   12,   13,  197,  197,  197,  197,    4,   14,    5,
   16,    0,    0,    6,    7,    0,    8,    9,   10,   11,
   12,   13,    0,    0,   16,    0,  165,   14,  166,    0,
  199,    0,    6,    7,  135,    8,    9,   10,  167,   12,
   13,   16,    0,    4,  201,  134,   14,    0,    0,    6,
    7,  135,    8,    9,   10,   11,   12,   13,    4,    0,
    5,    0,  131,   14,    6,    7,    0,    8,    9,   10,
   11,   12,   13,  223,    0,    0,    0,    0,   14,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    4,  386,    5,    0,    0,    0,
    6,    7,    0,    8,    9,   10,   11,   12,   13,  309,
    4,    0,    5,    0,   14,    0,    6,    7,    0,    8,
    9,   10,   11,   12,   13,    0,    0,    4,    0,    5,
   14,    0,    0,    6,    7,    0,    8,    9,   10,   11,
   12,   13,  196,    0,  196,  131,  196,   14,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  280,
  196,  196,  196,  196,  198,    0,    5,    0,    0,    0,
    6,    0,    0,    8,    0,    0,   11,   12,  198,    0,
    5,    0,    0,    0,    6,    0,    0,    8,    0,    0,
   11,   12,    0,    0,    0,    0,    0,    0,    0,    0,
  197,    0,    0,    0,  197,  197,    0,    0,  319,  321,
    0,    0,    0,    0,    0,    0,    0,  197,  197,  197,
    0,    0,    0,    0,    0,    0,    0,  336,    0,  166,
    0,    0,    0,    6,    0,  135,    8,    0,    0,  167,
   12,  198,    0,    5,    0,    0,    0,    6,    0,    0,
    8,    0,    0,   11,   12,  223,    0,  223,  336,    0,
  166,    0,    0,    0,    6,    0,  135,    8,    0,    0,
  167,   12,    0,    0,    0,    0,    0,    0,    0,  131,
    0,  131,    0,    0,    0,  131,    0,    0,  131,    0,
    0,  131,  131,    0,  280,  280,    0,    0,    0,    0,
=======
   95,   94,   74,  133,  176,   39,   45,   89,   93,  178,
  214,   20,   53,   88,   78,  121,  197,   55,   88,  272,
   39,   79,   71,   38,  143,   39,   40,  224,   63,   37,
   37,  142,   39,   39,  253,  109,  110,   37,  239,  223,
  287,   40,    5,   38,  170,  124,   40,  219,  216,  125,
  183,  239,  132,  131,   40,    9,   40,  117,  241,   13,
  154,  206,  118,  161,  203,  203,  190,  203,   46,  203,
   78,    9,   20,   45,  104,   13,  102,   79,  240,    1,
  167,  203,  184,   75,   58,  202,  203,  185,  104,  354,
  102,  105,  103,  106,  221,  247,  143,  143,  158,  252,
  178,   76,   59,  142,  142,  194,  242,   45,  271,  220,
  104,  260,  102,  157,   45,  325,  125,  199,  201,  248,
  333,  324,  192,  110,  334,  281,  187,  194,   42,   45,
  346,   45,  268,  131,   35,  170,   40,   60,  140,   69,
   68,  345,  236,  378,   81,  398,   80,  194,   82,  249,
  379,  194,  364,   83,   16,  367,   95,   78,  168,   42,
  105,   86,   95,  115,   79,    5,  105,  377,  104,  115,
  102,  246,   84,   98,   16,  321,  323,  403,  143,  277,
   91,  292,  143,  116,  404,  142,   60,  125,  408,  142,
  389,   97,  104,  125,  102,  119,  361,  357,  362,   16,
  267,  255,  299,  255,  122,  125,  350,  342,  344,   20,
  140,  140,  178,  178,  405,   16,  406,  128,   92,   44,
   70,   87,  399,  223,  130,  223,  286,   62,  149,  213,
   11,  150,  143,  143,   54,  197,  197,  341,  296,  142,
  142,   36,   35,   35,   52,   62,  120,  170,  170,  168,
   35,  335,  141,  315,  299,  299,   36,  343,  313,  310,
  310,   36,   20,   78,  281,  281,  178,  143,  178,   36,
   79,   36,  169,  151,  142,   62,  205,   16,  203,  372,
  143,   56,  143,   57,  391,   43,   44,  142,   42,  142,
  296,  296,  140,  369,  392,  392,  140,   16,  198,  178,
  178,  170,  336,  170,   99,  100,  101,  155,  259,  299,
  156,   78,  299,   16,  160,  162,  297,  332,   79,   43,
   44,  143,  143,  186,  141,  141,   43,   44,  142,  142,
  179,  152,  163,  153,  170,  170,  180,   66,   67,  299,
  299,   43,   44,   43,   44,  296,  140,  140,  296,  363,
  299,   36,  366,  234,  299,  235,  299,  105,  103,  106,
  200,  168,  168,  169,  376,  299,  299,  144,  297,  297,
  181,  340,  182,  165,  402,  296,  296,    6,  188,  135,
    8,  140,  393,  166,   12,  407,  296,  171,   93,   93,
  296,  340,  296,  165,  140,  189,  140,    6,  309,  135,
    8,  296,  296,  166,   12,  194,  141,   92,   92,  110,
  141,  174,  204,  207,  211,  168,  340,  168,  165,  209,
  212,  213,    6,  297,  135,    8,  297,  210,  166,   12,
  298,  217,  197,   88,    5,  140,  140,  218,    6,  144,
  144,    8,  273,   16,   11,   12,  225,  226,  168,  168,
  227,  123,  124,  297,  297,  279,  228,  104,  231,  102,
  141,  141,    9,  288,  297,  232,   13,  329,  297,  104,
  297,  102,  233,  278,   70,  169,  169,  243,  171,  297,
  297,  145,  298,  298,  244,  328,  245,  250,   87,  251,
  254,  258,  261,  262,  197,  141,    5,  264,  273,  269,
    6,  172,  174,    8,  270,  282,   11,   12,  141,  284,
  141,  285,  307,  288,  340,  308,  165,   16,  137,  314,
    6,  144,  135,    8,  317,  144,  166,   12,  311,  169,
  197,  169,    5,  131,  318,  319,    6,  298,  327,    8,
  298,  330,   11,   12,  331,  300,  339,  348,  349,  141,
  141,  355,  356,  145,  145,  360,  365,   16,  295,  371,
  368,  370,  169,  169,  386,  390,  401,  298,  298,  302,
   99,  100,  101,  380,   39,  144,  144,    1,  298,  194,
   45,  196,  298,   46,  298,   57,   16,   43,   43,  257,
  171,  171,  172,  298,  298,  237,  263,  300,  300,  312,
  136,   16,  208,  375,  193,  380,  196,  347,  326,  400,
  144,  129,  283,  338,  174,  174,  131,  191,   16,    0,
    0,  302,  302,  144,    0,  144,    0,    0,    0,    0,
    0,    0,    0,   16,    0,  145,    0,    0,    0,  145,
  294,    0,    0,    0,  171,    0,  171,    0,   16,    0,
    0,    0,  300,    0,    0,  300,    0,    0,    0,  301,
  197,    0,    5,    0,  144,  144,    6,   16,  174,    8,
  174,    0,   11,   12,    0,    0,  302,  171,  171,  302,
    0,    0,  300,  300,  136,    0,    0,    0,   16,  145,
  145,    0,    0,  300,    0,    0,    0,  300,    0,  300,
    0,  174,  174,  280,  172,  172,  302,  302,  300,  300,
   16,  301,  301,    0,    0,    0,  320,  302,    0,    0,
    0,  302,    0,  302,  145,   16,    0,    0,    0,    0,
    0,  322,  302,  302,    4,    0,  134,  145,    0,  145,
    6,    7,  135,    8,    9,   10,   11,   12,   13,   16,
  131,    0,  131,    0,   14,    0,  131,    0,  172,  131,
  172,    0,  131,  131,    0,    0,  301,    0,   16,  301,
    0,  294,    0,    0,  164,    0,  293,    0,  145,  145,
    6,    7,  135,    8,    9,   10,  166,   12,   13,    0,
    0,  172,  172,    0,   14,  359,  301,  301,   16,    0,
    0,    0,    0,  197,    0,    5,    0,  301,    0,    6,
  384,  301,    8,  301,    0,   11,   12,   16,    4,    0,
  134,    0,  301,  301,    6,    7,  135,    8,    9,   10,
   11,   12,   13,    0,  387,    4,   16,  134,   14,    0,
    0,    6,    7,  135,    8,    9,   10,   11,   12,   13,
    4,   16,  134,  388,    0,   14,    6,    7,  135,    8,
    9,   10,   11,   12,   13,    4,    0,  134,    0,    0,
   14,    6,    7,  135,    8,    9,   10,   11,   12,   13,
   16,  394,    0,  351,  164,   14,  293,    0,    0,    0,
    6,    7,  135,    8,    9,   10,  166,   12,   13,   16,
  396,    0,    0,    0,   14,  164,    0,  293,    0,    0,
    0,    6,    7,  135,    8,    9,   10,  166,   12,   13,
    0,  409,   16,    0,    0,   14,  358,    4,    0,    5,
    0,    0,    0,    6,    7,    0,    8,    9,   10,   11,
   12,   13,  164,    0,  293,   16,    0,   14,    6,    7,
  135,    8,    9,   10,  166,   12,   13,    0,    0,    0,
   16,    0,   14,    0,    0,  410,    4,    0,  134,    0,
    0,    0,    6,    7,  135,    8,    9,   10,   11,   12,
   13,    0,   15,    0,   16,    4,   14,  134,    0,    0,
    0,    6,    7,  135,    8,    9,   10,   11,   12,   13,
   16,    0,    0,    0,    0,   14,    0,   77,    0,    0,
    0,    0,    0,    0,    0,  164,   16,  293,    0,    0,
    0,    6,    7,  135,    8,    9,   10,  166,   12,   13,
  159,   16,    0,    0,  164,   14,  293,    0,    0,    0,
    6,    7,  135,    8,    9,   10,  166,   12,   13,    0,
    0,    0,    0,  164,   14,  293,    0,    0,    0,    6,
    7,  135,    8,    9,   10,  166,   12,   13,  164,  238,
  165,   16,    0,   14,    6,    7,  135,    8,    9,   10,
  166,   12,   13,  266,    0,    0,    0,    0,   14,    0,
    0,    0,    0,    0,  199,    0,  199,  164,  199,  293,
    0,  316,    0,    6,    7,  135,    8,    9,   10,  166,
   12,   13,  199,  199,  199,  199,    4,   14,    5,    0,
    0,    0,    6,    7,    0,    8,    9,   10,   11,   12,
   13,    0,    0,    0,    0,    0,   14,    0,    0,    4,
    0,    5,    0,    0,    0,    6,    7,    0,    8,    9,
   10,   11,   12,   13,    0,    0,    0,    0,    0,   14,
    0,    0,    4,    0,    5,    0,    0,    0,    6,    7,
    0,    8,    9,   10,   11,   12,   13,    4,    0,  134,
    0,    0,   14,    6,    7,  135,    8,    9,   10,   11,
   12,   13,    0,  353,    0,    0,    0,   14,    0,    0,
    0,    4,    0,    5,    0,    0,    0,    6,    7,    0,
    8,    9,   10,   11,   12,   13,    0,    4,    0,    5,
    0,   14,    0,    6,    7,    0,    8,    9,   10,   11,
   12,   13,    0,    4,    0,    5,    0,   14,    0,    6,
    7,    0,    8,    9,   10,   11,   12,   13,    4,    0,
    5,  385,    0,   14,    6,    7,    0,    8,    9,   10,
   11,   12,   13,  198,    0,  198,    0,  198,   14,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  395,  397,
    0,  198,  198,  198,  198,    0,    0,    0,  340,    0,
  165,    0,    0,  353,    6,  353,  135,    8,    0,    0,
  166,   12,    0,    0,  385,  385,    0,    0,    0,  199,
    0,    0,    0,  199,  199,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  199,  199,  199,    0,
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
<<<<<<< HEAD
    0,    0,    0,    0,    0,    0,    0,  196,    0,    0,
    0,  196,  196,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  196,  196,  196,
=======
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  198,    0,
    0,    0,  198,  198,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  198,  198,  198,
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          3,
<<<<<<< HEAD
   45,   41,   41,   15,   41,   63,   41,   40,   40,   18,
   40,   15,   40,   40,   18,   40,   84,   44,   84,   40,
   61,  137,   40,   59,   64,   58,   44,   64,   61,   45,
   43,   58,   45,   58,   61,   41,   61,  293,    0,   58,
   58,  194,   61,   61,   84,   40,  257,   60,   61,   62,
   39,  134,   42,   43,  256,   45,  258,   47,   55,   44,
  219,   72,   61,   58,   76,   74,   62,  260,  261,   59,
   74,   43,   76,   45,   70,   58,  272,   40,   61,   59,
   84,  240,   45,  166,  256,   59,   10,   59,   59,  345,
  262,  267,  260,  261,   59,  271,  136,  137,   40,  136,
  137,   59,  218,   45,   59,  114,  115,   40,  176,  167,
  176,  318,   45,  320,   58,   59,  257,   60,   61,   62,
  273,   45,  180,   44,  257,  122,  267,  383,  117,  118,
  271,  256,   64,  256,  287,   59,  176,  262,   59,  262,
   59,   59,   41,   41,   43,   59,   45,  158,   59,  256,
  256,  256,   84,  162,  256,  257,  262,  262,  162,   42,
   59,  123,    4,  123,   47,  267,   41,  256,   43,  271,
   45,  256,  176,   40,   41,  123,  256,  262,  218,  258,
   22,  218,  222,  241,   59,  222,   43,  346,   45,  305,
  199,  256,  201,   35,  183,   37,  256,  262,  260,  261,
  256,  261,  242,  215,  136,  137,  262,   41,  291,  107,
  256,  215,  257,  258,  387,  212,  389,  285,  286,  285,
  286,  257,  375,   40,  269,  260,  261,  257,  269,  257,
  257,  271,  272,  272,  271,  272,  257,  135,  242,  257,
  272,  257,  258,  276,  176,  285,  286,  256,  257,  276,
  256,  276,  292,  293,   64,  267,  123,  276,  276,  268,
  273,  274,  275,  267,  268,  305,  256,  264,  305,  337,
  269,  339,  257,  256,   84,  258,  256,  335,  318,   59,
  320,  318,  256,  320,  256,  256,  218,  258,  292,  293,
  222,  256,   40,  276,  257,  258,   41,  337,  256,  339,
  368,  369,  368,  369,  257,  345,  315,   40,  348,   59,
  242,  315,  256,  257,   40,  257,  258,  357,  358,   59,
  357,  358,  220,  165,  257,  258,  136,  137,  368,  369,
  273,  274,  275,  373,  374,  256,  257,  256,  256,  271,
  272,  345,  256,  383,  348,  256,   59,  387,  257,  389,
  260,  261,  256,  285,  286,  256,  256,   41,  398,  399,
  292,  293,   64,  292,  256,   44,  176,   59,   41,  373,
  374,  262,  261,  305,   59,  123,  256,  256,   40,  383,
  257,   44,   84,  387,   41,  389,  318,   41,  320,  260,
  257,   61,  259,  258,  398,  399,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  337,   41,  339,  218,  256,
  277,  256,  222,  345,  257,  256,  348,  256,  219,  348,
   64,   59,  257,  256,  256,  357,  358,  256,   40,  256,
  125,   59,  242,  269,  136,  137,  368,  369,  258,  240,
   84,  373,  374,   59,  373,  374,   59,   41,   59,   58,
  256,  383,   59,   59,   41,  387,  256,  389,  387,  256,
  389,  271,  272,  125,  256,  256,  398,  399,  256,  398,
  399,   59,  258,  274,  176,  285,  286,   40,  256,   41,
  256,  256,  292,  293,  256,  256,  256,  288,  257,  256,
   41,  256,  136,  137,   59,  305,    0,   41,   41,   41,
   41,  125,  256,  123,  201,  212,  262,   84,  318,  257,
  320,  259,  122,  125,  339,  263,  218,  265,  266,  109,
  222,  269,  270,   40,  257,  274,  259,  337,  112,  339,
  263,  288,  176,  266,   59,  345,  269,  270,  348,  376,
  242,  228,  214,   -1,  283,  346,   -1,  357,  358,  108,
   40,   41,   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,
   -1,   -1,   -1,  373,  374,   -1,   -1,   -1,   -1,  271,
  272,   -1,   -1,  383,  218,  376,   -1,  387,  222,  389,
   -1,   -1,   -1,  285,  286,   -1,   -1,   -1,  398,  399,
  292,  293,   -1,   -1,   -1,  257,   -1,  259,  242,  176,
   40,  263,   -1,  305,  266,   -1,  123,  269,  270,   -1,
   -1,   -1,   -1,   -1,   -1,   40,  318,   -1,  320,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,
   -1,   -1,   -1,  123,   40,  337,   -1,  339,   -1,   -1,
   -1,  285,  286,  345,   -1,  257,  348,  259,  292,  293,
   40,  263,   -1,  265,  266,  357,  358,  269,  270,   -1,
   -1,  305,   -1,   -1,   -1,  242,  368,  369,   -1,   40,
   -1,  373,  374,   -1,  318,   -1,  320,   -1,   -1,   -1,
   -1,  383,   -1,  123,   -1,  387,   -1,  389,   -1,   -1,
   -1,   -1,   -1,  337,   -1,  339,  398,  399,   -1,   40,
  125,  345,   -1,   -1,  348,   -1,   -1,   -1,  285,  286,
   -1,   -1,   -1,  357,  358,  292,  293,  123,   40,   -1,
   -1,   -1,   -1,   -1,  368,  369,   -1,   -1,   -1,  373,
  374,   -1,   -1,  123,   -1,   40,   -1,   -1,   -1,  383,
  257,   -1,  259,  387,   -1,  389,  263,   -1,  265,  266,
   40,   -1,  269,  270,  398,  399,   -1,   -1,   -1,   -1,
  337,   -1,  339,   -1,   -1,   40,   -1,  257,  345,  259,
   -1,  348,   -1,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  123,   -1,   -1,   -1,   -1,  277,   -1,   40,
   -1,  368,  369,   -1,   -1,   -1,  373,  374,   -1,   -1,
   -1,   -1,   -1,  125,   -1,   -1,  383,   -1,   40,   -1,
  387,   -1,  389,   -1,   -1,   -1,   -1,  257,   -1,  259,
  125,  398,  399,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  257,   -1,  259,  125,   40,  277,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,
  125,  257,  277,  259,   -1,   40,   -1,  263,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,  257,   -1,  259,
   40,  277,  123,  263,  264,  265,  266,  267,  268,  269,
  270,  271,   -1,   -1,   -1,  256,  257,  277,  259,   -1,
   -1,  123,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   40,   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,  259,   -1,
   40,  125,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   -1,   -1,   -1,  256,  257,  277,  259,   -1,   40,
  125,  263,  264,   -1,  266,  267,  268,  269,  270,  271,
   -1,   -1,  257,  123,  259,  277,   40,   -1,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  257,   -1,  259,
   -1,   40,  277,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  257,   -1,  259,   -1,  125,  277,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,
   -1,   -1,  277,   -1,   -1,  125,  257,   40,  259,   -1,
   -1,   -1,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   -1,   -1,   40,   -1,  257,  277,  259,   -1,   -1,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   40,   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,  259,  125,   -1,   -1,  263,
  264,  265,  266,  267,  268,  269,  270,  271,   -1,   -1,
   -1,   -1,  257,  277,  259,   -1,   -1,   40,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  257,   -1,  259,
  123,   40,  277,  263,  264,   -1,  266,  267,  268,  269,
  270,  271,   -1,   -1,   -1,   -1,   -1,  277,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   43,  257,   45,
  259,   -1,   -1,   -1,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,   59,   60,   61,   62,  257,  277,  259,
   40,   -1,   -1,  263,  264,   -1,  266,  267,  268,  269,
  270,  271,   -1,   -1,   40,   -1,  257,  277,  259,   -1,
  123,   -1,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   40,   -1,  257,  123,  259,  277,   -1,   -1,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  257,   -1,
  259,   -1,   40,  277,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,  136,   -1,   -1,   -1,   -1,  277,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  125,  259,   -1,   -1,   -1,
  263,  264,   -1,  266,  267,  268,  269,  270,  271,  125,
  257,   -1,  259,   -1,  277,   -1,  263,  264,   -1,  266,
  267,  268,  269,  270,  271,   -1,   -1,  257,   -1,  259,
  277,   -1,   -1,  263,  264,   -1,  266,  267,  268,  269,
  270,  271,   41,   -1,   43,  123,   45,  277,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  222,
   59,   60,   61,   62,  257,   -1,  259,   -1,   -1,   -1,
  263,   -1,   -1,  266,   -1,   -1,  269,  270,  257,   -1,
  259,   -1,   -1,   -1,  263,   -1,   -1,  266,   -1,   -1,
  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,  260,  261,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,  275,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,  259,
   -1,   -1,   -1,  263,   -1,  265,  266,   -1,   -1,  269,
  270,  257,   -1,  259,   -1,   -1,   -1,  263,   -1,   -1,
  266,   -1,   -1,  269,  270,  318,   -1,  320,  257,   -1,
  259,   -1,   -1,   -1,  263,   -1,  265,  266,   -1,   -1,
  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,  259,   -1,   -1,   -1,  263,   -1,   -1,  266,   -1,
   -1,  269,  270,   -1,  357,  358,   -1,   -1,   -1,   -1,
=======
   41,   41,   15,   63,   84,   40,   45,   39,   41,   84,
   41,   15,   40,   61,   18,   41,   41,   40,   61,  219,
   40,   18,   59,   58,   64,   40,   61,  137,   40,   44,
   44,   64,   40,   40,  193,  260,  261,   44,   58,  136,
  240,   61,    0,   58,   84,  257,   61,  134,  130,   55,
   58,   58,   62,   58,   61,  267,   61,   42,   40,  271,
   70,   41,   47,   76,   42,   43,  107,   45,   40,   47,
   74,  267,   76,   45,   43,  271,   45,   74,  165,  257,
   84,   59,  256,  272,   59,  117,  118,  261,   43,  295,
   45,   60,   61,   62,  135,  175,  136,  137,   44,  256,
  175,  123,   40,  136,  137,  262,  166,   45,  218,   40,
   43,   59,   45,   59,   45,  274,  122,  114,  115,  179,
   59,  256,  260,  261,   40,  222,   59,  262,    4,   45,
  289,   45,  214,   58,  257,  175,   61,   10,   64,   58,
   59,  256,   45,  349,   59,  256,   22,  262,  256,  181,
  350,  262,   59,  256,   40,   59,  256,  161,   84,   35,
  256,   37,  262,  256,  161,  123,  262,   59,   43,  262,
   45,  175,  123,   46,   40,  272,  273,   59,  218,  220,
  256,  241,  222,   41,  390,  218,   59,  256,   59,  222,
   41,  258,   43,  262,   45,  256,  320,  307,  322,   40,
  213,  198,  242,  200,   40,  211,  293,  287,  288,  213,
  136,  137,  287,  288,  394,   40,  396,   59,  257,  258,
  257,  269,  381,  320,   41,  322,  269,  257,   59,  260,
  269,   59,  272,  273,  257,  260,  261,  123,  242,  272,
  273,  276,  257,  257,  272,  257,  272,  287,  288,  175,
  257,  283,   64,  266,  294,  295,  276,  123,  264,  256,
  257,  276,  266,  267,  361,  362,  341,  307,  343,  276,
  267,  276,   84,  257,  307,  257,  256,   40,  256,  339,
  320,  256,  322,  258,  125,  257,  258,  320,  164,  322,
  294,  295,  218,  334,  374,  375,  222,   40,  123,  374,
  375,  341,  257,  343,  273,  274,  275,  256,  256,  349,
  256,  315,  352,   40,  256,   59,  242,  256,  315,  257,
  258,  361,  362,  256,  136,  137,  257,  258,  361,  362,
   40,  256,  256,  258,  374,  375,  256,  256,  257,  379,
  380,  257,  258,  257,  258,  349,  272,  273,  352,  256,
  390,  276,  256,  256,  394,  258,  396,   60,   61,   62,
  123,  287,  288,  175,  256,  405,  406,   64,  294,  295,
   44,  257,   41,  259,  256,  379,  380,  263,   59,  265,
  266,  307,  125,  269,  270,  256,  390,   84,  260,  261,
  394,  257,  396,  259,  320,   41,  322,  263,  125,  265,
  266,  405,  406,  269,  270,  262,  218,  260,  261,  261,
  222,   84,   59,  256,   44,  341,  257,  343,  259,  256,
   41,  260,  263,  349,  265,  266,  352,  257,  269,  270,
  242,  258,  257,   61,  259,  361,  362,   41,  263,  136,
  137,  266,  219,   40,  269,  270,  256,  256,  374,  375,
  256,  256,  257,  379,  380,   41,  257,   43,  256,   45,
  272,  273,  267,  240,  390,   59,  271,   41,  394,   43,
  396,   45,  256,   59,  257,  287,  288,  256,  175,  405,
  406,   64,  294,  295,  256,   59,  125,   59,  269,  258,
   59,   59,   59,   41,  257,  307,  259,   58,  275,   59,
  263,   84,  175,  266,   59,  256,  269,  270,  320,   59,
  322,  258,   41,  290,  257,  256,  259,   40,   41,  256,
  263,  218,  265,  266,   59,  222,  269,  270,  125,  341,
  257,  343,  259,   40,  256,  256,  263,  349,  256,  266,
  352,  256,  269,  270,   59,  242,   40,  256,   41,  361,
  362,  256,  256,  136,  137,  256,  256,   40,   41,  257,
  256,  256,  374,  375,  256,   41,  256,  379,  380,  242,
  273,  274,  275,  350,   59,  272,  273,    0,  390,   41,
   41,   41,  394,   41,  396,  125,   40,  123,  256,  200,
  287,  288,  175,  405,  406,  158,  211,  294,  295,  262,
  123,   40,  122,  343,  109,  382,  112,  290,  275,  382,
  307,   59,  228,  284,  287,  288,  123,  108,   40,   -1,
   -1,  294,  295,  320,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   40,   -1,  218,   -1,   -1,   -1,  222,
  123,   -1,   -1,   -1,  341,   -1,  343,   -1,   40,   -1,
   -1,   -1,  349,   -1,   -1,  352,   -1,   -1,   -1,  242,
  257,   -1,  259,   -1,  361,  362,  263,   40,  341,  266,
  343,   -1,  269,  270,   -1,   -1,  349,  374,  375,  352,
   -1,   -1,  379,  380,  123,   -1,   -1,   -1,   40,  272,
  273,   -1,   -1,  390,   -1,   -1,   -1,  394,   -1,  396,
   -1,  374,  375,  125,  287,  288,  379,  380,  405,  406,
   40,  294,  295,   -1,   -1,   -1,  123,  390,   -1,   -1,
   -1,  394,   -1,  396,  307,   40,   -1,   -1,   -1,   -1,
   -1,  123,  405,  406,  257,   -1,  259,  320,   -1,  322,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   40,
  257,   -1,  259,   -1,  277,   -1,  263,   -1,  341,  266,
  343,   -1,  269,  270,   -1,   -1,  349,   -1,   40,  352,
   -1,  123,   -1,   -1,  257,   -1,  259,   -1,  361,  362,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,  374,  375,   -1,  277,  125,  379,  380,   40,   -1,
   -1,   -1,   -1,  257,   -1,  259,   -1,  390,   -1,  263,
  125,  394,  266,  396,   -1,  269,  270,   40,  257,   -1,
  259,   -1,  405,  406,  263,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,  125,  257,   40,  259,  277,   -1,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  257,   40,  259,  125,   -1,  277,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  257,   -1,  259,   -1,   -1,
  277,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   40,  123,   -1,  256,  257,  277,  259,   -1,   -1,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   40,
  123,   -1,   -1,   -1,  277,  257,   -1,  259,   -1,   -1,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,  125,   40,   -1,   -1,  277,  256,  257,   -1,  259,
   -1,   -1,   -1,  263,  264,   -1,  266,  267,  268,  269,
  270,  271,  257,   -1,  259,   40,   -1,  277,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,
   40,   -1,  277,   -1,   -1,  125,  257,   -1,  259,   -1,
   -1,   -1,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   -1,  123,   -1,   40,  257,  277,  259,   -1,   -1,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   40,   -1,   -1,   -1,   -1,  277,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   40,  259,   -1,   -1,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  125,   40,   -1,   -1,  257,  277,  259,   -1,   -1,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,   -1,   -1,  257,  277,  259,   -1,   -1,   -1,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  257,  125,
  259,   40,   -1,  277,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  123,   -1,   -1,   -1,   -1,  277,   -1,
   -1,   -1,   -1,   -1,   41,   -1,   43,  257,   45,  259,
   -1,  125,   -1,  263,  264,  265,  266,  267,  268,  269,
  270,  271,   59,   60,   61,   62,  257,  277,  259,   -1,
   -1,   -1,  263,  264,   -1,  266,  267,  268,  269,  270,
  271,   -1,   -1,   -1,   -1,   -1,  277,   -1,   -1,  257,
   -1,  259,   -1,   -1,   -1,  263,  264,   -1,  266,  267,
  268,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,  277,
   -1,   -1,  257,   -1,  259,   -1,   -1,   -1,  263,  264,
   -1,  266,  267,  268,  269,  270,  271,  257,   -1,  259,
   -1,   -1,  277,  263,  264,  265,  266,  267,  268,  269,
  270,  271,   -1,  294,   -1,   -1,   -1,  277,   -1,   -1,
   -1,  257,   -1,  259,   -1,   -1,   -1,  263,  264,   -1,
  266,  267,  268,  269,  270,  271,   -1,  257,   -1,  259,
   -1,  277,   -1,  263,  264,   -1,  266,  267,  268,  269,
  270,  271,   -1,  257,   -1,  259,   -1,  277,   -1,  263,
  264,   -1,  266,  267,  268,  269,  270,  271,  257,   -1,
  259,  352,   -1,  277,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,   41,   -1,   43,   -1,   45,  277,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  379,  380,
   -1,   59,   60,   61,   62,   -1,   -1,   -1,  257,   -1,
  259,   -1,   -1,  394,  263,  396,  265,  266,   -1,   -1,
  269,  270,   -1,   -1,  405,  406,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  260,  261,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,  275,   -1,
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
<<<<<<< HEAD
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  260,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,  275,
=======
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  260,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,  274,  275,
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=277;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"id","cte","If","then","Else","end_if","out",
"fun","Return","BREAK","i32","when","For","CONTINUE","f32","cadena",
"menorigual","mayorigual","distinto","opasignacion","Const",
};
final static String yyrule[] = {
"$accept : programa",
"programa : encabezado_prog bloque_sentencias",
"encabezado_prog : id",
"bloque_sentencias : bloque_sentencias '{' sentencia '}'",
"bloque_sentencias : '{' sentencia '}'",
"bloque_sentencias : '{' sentencia",
"bloque_sentencias : sentencia '}'",
"declaracion_const : Const lista_de_asignacion_const ';'",
"declaracion_const : Const lista_de_asignacion_const error",
"declaracion_const : Const ';' error",
"lista_de_asignacion_const : decl_const",
"lista_de_asignacion_const : lista_de_asignacion_const ',' decl_const",
"lista_de_asignacion_const : lista_de_asignacion_const decl_const error",
"decl_const : id op_asignacion cte",
"decl_const : id op_asignacion '-' cte",
"decl_const : id op_asignacion error",
"decl_const : id cte error",
"decl_const : id error",
"bloq_sentencias_For : sentencias_For",
"bloq_sentencias_For : bloq_sentencias_For sentencias_For",
"sentencia : declarativas",
"sentencia : ejecutables",
"sentencia : sentencia declarativas",
"sentencia : sentencia ejecutables",
"declarativas : tipo lista_de_variables ';'",
"declarativas : lista_de_variables ';' error",
"declarativas : declaracion_func",
"declarativas : declaracion_const",
"declarativas : sentencia_when",
"bloque_ejecutables : bloque_ejecutables ejecutables",
"bloque_ejecutables : ejecutables",
"ejecutables : asignacion",
"ejecutables : salida",
"ejecutables : sentencia_If",
"ejecutables : expresion_For",
"ejecutables : invocacion_funcion",
"ejecutables : sentencia_BREAK error",
"ejecutables : sentencia_CONTINUE error",
"lista_de_variables : id lista_de_variables",
"lista_de_variables : id ',' lista_de_variables",
"lista_de_variables : id",
"parametro : tipo id",
"parametro : id error",
"asig_fun : ':' tipo",
"asig_fun :",
"cola_func : '{' cuerpo_fun '}'",
"lista_parametros :",
"lista_parametros : parametro",
"lista_parametros : parametro ',' parametro",
"lista_parametros : error",
"encab_fun : fun id '(' lista_parametros ')' asig_fun",
"encab_fun : fun '(' lista_parametros ')' asig_fun error",
"declaracion_func : encab_fun cola_func",
"ret_fun : Return '(' expresion ')' ';'",
"ret_fun : Return expresion ')' ';' error",
"ret_fun : Return '(' expresion ';' error",
"ret_fun : Return expresion ';' error",
"ret_fun : Return '(' expresion ')' error",
"cuerpo_fun : bloque_sentencias_funcion",
"ejecutables_funcion : asignacion",
"ejecutables_funcion : sentencia_if_funcion",
"ejecutables_funcion : salida",
"ejecutables_funcion : invocacion_funcion",
"ejecutables_funcion : sentencia_for_funcion",
"ejecutables_funcion : ret_fun",
"ejecutables_funcion : sentencia_BREAK error",
"ejecutables_funcion : sentencia_CONTINUE error",
"bloq_ejecutables_fun : bloq_ejecutables_fun ejecutables_funcion",
"bloq_ejecutables_fun : ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion declarativas",
"bloque_sentencias_funcion : ejecutables_funcion",
"bloque_sentencias_funcion : declarativas",
"op_asignacion : opasignacion",
"op_asignacion : ':' '=' error",
"op_asignacion : '=' error",
"asignacion : id op_asignacion expresion ';'",
"asignacion : id op_asignacion expresion error",
"asignacion : id op_asignacion for_else_cte ';'",
"asignacion : id op_asignacion invocacion_funcion",
"for_else_cte : expresion_For Else cte",
"for_else_cte : expresion_For error",
"salida : out '(' cadena ')' ';'",
"salida : out '(' cadena ')' error",
"salida : out '(' cadena error ';'",
"salida : out cadena error ';'",
"salida : '(' cadena error",
"salida : out '(' ')' error ';'",
"sentencia_If : If condicion_if cuerpo_If PR_end_if ';'",
"sentencia_If : If condicion_if then cuerpo_If PR_end_if error",
"sentencia_If : If condicion_if then cuerpo_If error",
"condicion_if : '(' expresion_relacional ')'",
"condicion_if : expresion_relacional ')'",
"condicion_if : '(' expresion_relacional",
"condicion_if : expresion_relacional",
"cuerpo_If : cuerpo_Then cuerpo_Else",
"cuerpo_If : cuerpo_Then",
"cuerpo_If : cuerpo_Else",
"cuerpo_Then : PR_then '{' bloque_ejecutables '}'",
"cuerpo_Then : PR_then ejecutables",
"cuerpo_Else : PR_else '{' bloque_ejecutables '}'",
"cuerpo_Else : PR_else ejecutables",
"sentencia_if_for : If condicion_if cuerpo_If_for PR_end_if ';'",
"sentencia_if_for : If condicion_if cuerpo_If_for PR_end_if error",
"sentencia_if_for : If condicion_if cuerpo_If_for error",
"cuerpo_If_for : cuerpo_then_for cuerpo_Else_for",
"cuerpo_If_for : cuerpo_then_for",
"cuerpo_If_for : cuerpo_Else_for error",
"cuerpo_then_for : PR_then '{' bloq_sentencias_For '}'",
"cuerpo_then_for : PR_then sentencias_For",
"cuerpo_Else_for : PR_else '{' bloq_sentencias_For '}'",
"cuerpo_Else_for : PR_else sentencias_For",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion PR_end_if ';'",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion PR_end_if error",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion error",
"cuerpo_If_funcion : cuerpo_then_funcion cuerpo_Else_funcion",
"cuerpo_If_funcion : cuerpo_then_funcion",
"cuerpo_If_funcion : cuerpo_Else_funcion error",
"cuerpo_then_funcion : PR_then '{' bloq_ejecutables_fun '}'",
"cuerpo_then_funcion : PR_then ejecutables_funcion",
"cuerpo_Else_funcion : PR_else '{' bloq_ejecutables_fun '}'",
"cuerpo_Else_funcion : PR_else ejecutables_funcion",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun PR_end_if ';'",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun PR_end_if error",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun error",
"cuerpo_If_for_fun : then_if_for_fun else_if_for_fun",
"cuerpo_If_for_fun : then_if_for_fun",
"cuerpo_If_for_fun : else_if_for_fun error",
"then_if_for_fun : PR_then '{' bloq_for_funcion '}'",
"then_if_for_fun : PR_then sentencias_For_funcion",
"else_if_for_fun : PR_else '{' bloq_for_funcion '}'",
"else_if_for_fun : PR_else sentencias_For_funcion",
"PR_then : then",
"PR_else : Else",
"PR_end_if : end_if",
"sentencia_when : when '(' condicion_when ')' cuerpo_when ';'",
"sentencia_when : when condicion_when ')' cuerpo_when ';' error",
"sentencia_when : when '(' condicion_when ')' cuerpo_when error",
"condicion_when : expresion_relacional",
"cuerpo_when : then '{' sentencia '}'",
"cuerpo_when : then '{' sentencia error",
"cuerpo_when : then sentencia '}' error",
"encabezado_For : For '(' detalles_for ')' cola_For",
"encabezado_For : For detalles_for ')' cola_For error",
"encabezado_For : For detalles_for cola_For error",
"encabezado_For : id ':' For '(' detalles_for ')' cola_For",
"detalles_for : asignacion_for ';' cond_op_for",
"cond_op_for : condicion_for ';' operacion_for",
"condicion_for : id comparador factor",
"condicion_for : id comparador '(' expresion ')'",
"cola_For : '{' bloq_sentencias_For '}' ';'",
"cola_For : sentencias_For",
"cola_For : '{' bloq_sentencias_For '}' error",
"signo : '+'",
"signo : '-'",
"sentencias_For : asignacion",
"sentencias_For : salida",
"sentencias_For : expresion_For",
"sentencias_For : sentencia_if_for",
"sentencias_For : invocacion_funcion",
"sentencias_For : sentencia_BREAK",
"sentencias_For : sentencia_CONTINUE",
"sentencias_For : declarativas error",
"sentencias_For : ret_fun error",
"expresion_For : encabezado_For",
"cola_For_funcion : '{' bloq_for_funcion '}' ';'",
"cola_For_funcion : sentencias_For_funcion",
"cola_For_funcion : '{' bloq_for_funcion '}' error",
"sentencia_for_funcion : For '(' detalles_for ')' cola_For_funcion",
"sentencia_for_funcion : For detalles_for ')' cola_For_funcion error",
"sentencia_for_funcion : For detalles_for cola_For_funcion error",
"sentencia_for_funcion : id ':' For '(' detalles_for ')' cola_For_funcion",
"asignacion_for : id op_asignacion cte",
"operacion_for : signo id",
"operacion_for : id error",
"sentencias_For_funcion : asignacion",
"sentencias_For_funcion : salida",
"sentencias_For_funcion : sentencia_for_funcion",
"sentencias_For_funcion : ret_fun",
"sentencias_For_funcion : invocacion_funcion",
"sentencias_For_funcion : sentencia_BREAK",
"sentencias_For_funcion : sentencia_CONTINUE",
"sentencias_For_funcion : sentencia_if_for_fun",
"sentencias_For_funcion : declarativas error",
"bloq_for_funcion : sentencias_For_funcion",
"bloq_for_funcion : bloq_for_funcion sentencias_For_funcion",
"bloq_for_funcion : error",
"sentencia_BREAK : BREAK ';'",
"sentencia_BREAK : BREAK cte ';'",
"sentencia_BREAK : BREAK error",
"sentencia_CONTINUE : CONTINUE ';'",
"sentencia_CONTINUE : CONTINUE ':' id ';'",
"sentencia_CONTINUE : CONTINUE id ';' error",
"sentencia_CONTINUE : CONTINUE error",
"invocacion_funcion : id '(' list_parametros_Inv ')' ';'",
"list_parametros_Inv :",
"list_parametros_Inv : factor ',' factor",
"list_parametros_Inv : factor",
"expresion_relacional : expresion comparador expresion",
"expresion : expresion signo termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : id",
"factor : cte",
"factor : '-' cte",
"comparador : '<'",
"comparador : '>'",
"comparador : menorigual",
"comparador : mayorigual",
"comparador : '='",
"comparador : distinto",
"tipo : i32",
"tipo : f32",
};

<<<<<<< HEAD
//#line 798 "gramatica.y"
=======
//#line 860 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf

private AnalizadorLexico lexico;
private AnalizadorSintactico sintactico;
private String ambito;
private int contadorFor;
private int contadorIf;
private int contadorWhen;
private String tipoBreak = new String();


public void activarAmbito(){this.ambito = "$"; this.contadorFor = 0; this.contadorIf = 0; this.contadorWhen = 0;} // $ va a simblizar el ambito global.

public void setLexico(AnalizadorLexico lexico) { this.lexico = lexico; }

public void setSintactico(AnalizadorSintactico sintactico) { this.sintactico = sintactico; }

public AnalizadorLexico getLexico() { return this.lexico; }

public AnalizadorSintactico getSintactico() { return this.sintactico; }

public void agregarAmbito(String nuevo) {

	this.ambito = this.ambito + "_" + nuevo;

}

public String borrarAmbito(String ambito){
	if (ambito.length() > 1) { // si es 1 solo tiene el ambito global
		String [] aux = ambito.split("_"); // separo los elementos individuales del ambito
		String last = aux[aux.length - 1 ]; // obtengo el ultimo, el que tengo que eliminar
		return ambito.substring(0, ambito.length() - last.length() - 1);
	}
	return "$";
}

public int yylex() {
    int token = lexico.procesarYylex();
    if (lexico.getRefTablaSimbolos() != -1)
        yylval = new ParserVal(lexico.getRefTablaSimbolos());
    return token;
}

public void yyerror(String string) {
	//sintactico.addErrorSintactico("par: " + string);
}

// retorna -1 si no existe un identificador con el lexema dado en el ambito dado. Si existe, retorna el indice de la entrada existente.
public int enAmbito(ParserVal pv){

	String lexema = sintactico.getEntradaTablaSimb(pv.ival).getLexema();
	String ambitoAux = this.ambito;

	String [] aux = ambitoAux.split("_");
	for (int i = 0 ; i < aux.length ; i++){
		int existente = sintactico.getTS().existeEntrada(lexema + "@"+ambitoAux);
		if (existente >= 0 ){
			return existente;
		}
		ambitoAux = borrarAmbito(ambitoAux);
	}
	return -1;
}
//#line 931 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 19 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("raiz", val_peek(0))); sintactico.setRaiz(yyval); }
break;
case 2:
//#line 23 "gramatica.y"
{sintactico.setUsoEnIndex("program",val_peek(0).ival);}
break;
case 3:
//#line 26 "gramatica.y"
{yyval = val_peek(1);}
break;
case 4:
//#line 27 "gramatica.y"
{yyval = val_peek(1);}
break;
case 5:
//#line 28 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar el bloque.");}
break;
case 6:
//#line 29 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir el bloque.");}
break;
case 7:
//#line 32 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una declaración de CONSTANTE. (Línea " + AnalizadorLexico.LINEA + ")");
							  	  yyval = new ParserVal(sintactico.crearNodoControl("lista_ctes", val_peek(1)));}
break;
case 8:
//#line 34 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ; al final de la declaracion de constantes.");}
break;
case 9:
//#line 35 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): No se reconoce una lista de constantes.");}
break;
case 10:
//#line 38 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 11:
//#line 39 "gramatica.y"
{ParserVal modificado = sintactico.modificarHijo(val_peek(2), sintactico.crearNodo("sentencia", val_peek(0), null));
                                                                         yyval = modificado;}
break;
case 12:
//#line 41 "gramatica.y"
{{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): separar por coma la declaracion de constantes.");}}
break;
case 13:
//#line 45 "gramatica.y"
{
						int existente = enAmbito(val_peek(2));
						if (existente < 0) {
							int i = val_peek(2).ival;
							sintactico.setTipoEnIndex(sintactico.getTipoFromTS(val_peek(0).ival), i);
							String type = sintactico.getTipoFromTS(val_peek(0).ival);
                                                        if (type.equals("i32"))
                                                        	sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
							sintactico.setUsoEnIndex("const", i);
							sintactico.setLexemaEnIndex(val_peek(2).ival, "@"+this.ambito);
							sintactico.setUsoEnIndex("cte",val_peek(0).ival);
							yyval = new ParserVal(sintactico.crearNodo("=:", new ParserVal(sintactico.crearHoja(val_peek(2).ival)), new ParserVal(sintactico.crearHoja(val_peek(0).ival))));
						} else {
							sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
						}

					}
break;
<<<<<<< HEAD
case 14:
//#line 59 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta constante luego de la asignacion.");}
break;
case 15:
//#line 60 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta el operador asignacion luego del identificador.");}
break;
case 16:
//#line 61 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta la asignacion luego del identificador.");}
break;
case 17:
//#line 65 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 18:
//#line 66 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 19:
//#line 71 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("declarativa1", val_peek(0), null));}
break;
case 20:
//#line 72 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia2", val_peek(0), null));}
break;
case 21:
//#line 73 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("declarativa3", val_peek(0), null));}
=======
case 13:
//#line 61 "gramatica.y"
{
										int existente = enAmbito(val_peek(3));
											if (existente < 0) {
												int i = val_peek(3).ival;
												sintactico.setTipoEnIndex(sintactico.getTipoFromTS(val_peek(0).ival), i);
												sintactico.setNegativoTablaSimb(val_peek(0).ival);
												String type = sintactico.getTipoFromTS(val_peek(0).ival);
																			if (type.equals("i32"))
																				sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
												sintactico.setUsoEnIndex("const", i);
												sintactico.setLexemaEnIndex(val_peek(3).ival, "@"+this.ambito);
												sintactico.setUsoEnIndex("cte",val_peek(0).ival);
												yyval = new ParserVal(sintactico.crearNodo("=:", new ParserVal(sintactico.crearHoja(val_peek(3).ival)), new ParserVal(sintactico.crearHoja(val_peek(0).ival))));
											} else {
												sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
											}
		   }
break;
case 14:
//#line 78 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta constante luego de la asignacion.");}
break;
case 15:
//#line 79 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta el operador asignacion luego del identificador.");}
break;
case 16:
//#line 80 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta la asignacion luego del identificador.");}
break;
case 17:
//#line 84 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 18:
//#line 85 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));}
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
break;
case 19:
//#line 90 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("declarativa", val_peek(0), null));}
break;
case 20:
//#line 91 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 21:
//#line 92 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("declarativa", val_peek(0), null));}
break;
case 22:
<<<<<<< HEAD
//#line 74 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia4", val_peek(0), null));}
break;
case 23:
//#line 78 "gramatica.y"
=======
//#line 93 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 23:
//#line 97 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
							String type = val_peek(2).sval;
						 	sintactico.completarConTipos(type);
						 	sintactico.addAnalisis("Se reconoció declaraciónes de variable de tipo " + type + ". (Línea " + AnalizadorLexico.LINEA + ")");
						  }
break;
case 24:
<<<<<<< HEAD
//#line 83 "gramatica.y"
=======
//#line 102 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
             						sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): falta el tipo de variable");
             					  	sintactico.addAnalisis("Se reconoció declaraciónes de variable SIN TIPO. (Línea " + (AnalizadorLexico.LINEA-1) + ")");
             					   	sintactico.vaciarListaVariables();
             					  }
break;
case 28:
<<<<<<< HEAD
//#line 94 "gramatica.y"
=======
//#line 113 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
							ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
							yyval = modificado;
						     }
break;
case 29:
<<<<<<< HEAD
//#line 98 "gramatica.y"
=======
//#line 117 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
							yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));
						     }
break;
case 35:
<<<<<<< HEAD
//#line 108 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 36:
//#line 109 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 37:
//#line 113 "gramatica.y"
=======
//#line 127 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 36:
//#line 128 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 37:
//#line 132 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
							sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta una ',' entre identIficadores.");
						 	int existente = enAmbito(val_peek(1));
							if (existente < 0) {
								sintactico.setLexemaEnIndex(val_peek(1).ival, "@"+this.ambito);
								sintactico.addListaVariables(val_peek(1).ival);
								sintactico.setUsoEnIndex("var", val_peek(1).ival);
							} else {
								sintactico.addErrorSintactico("SematicError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
							}
						}
break;
case 38:
<<<<<<< HEAD
//#line 124 "gramatica.y"
=======
//#line 143 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
							int existente = enAmbito(val_peek(2));
							if (existente < 0) {
								sintactico.setLexemaEnIndex(val_peek(2).ival, "@"+this.ambito);

								sintactico.addListaVariables(val_peek(2).ival);
								sintactico.setUsoEnIndex("var", val_peek(2).ival);
							} else {
								sintactico.addErrorSintactico("SematicError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
							}
						  }
break;
case 39:
<<<<<<< HEAD
//#line 135 "gramatica.y"
=======
//#line 154 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
                   					int existente = enAmbito(val_peek(0));
                   					if (existente < 0) {
                   						sintactico.setLexemaEnIndex(val_peek(0).ival, "@"+this.ambito);

                   						sintactico.addListaVariables(val_peek(0).ival);
							    	sintactico.setUsoEnIndex("var", val_peek(0).ival);
                   					} else {
                   						sintactico.addErrorSintactico("SematicError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
                   					}
                   				  }
break;
case 40:
<<<<<<< HEAD
//#line 150 "gramatica.y"
=======
//#line 169 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
				int existente = enAmbito(val_peek(0));
				if (existente < 0) {
					sintactico.setTipoEnIndex(val_peek(1).sval, val_peek(0).ival);
					sintactico.setLexemaEnIndex(val_peek(0).ival, "@"+this.ambito);
					sintactico.setUsoEnIndex("param", val_peek(0).ival);

					sintactico.addListaVariables(val_peek(0).ival);

				} else {
					sintactico.addErrorSintactico("SematicError. ENC_FUN/PARAMS (Línea " + AnalizadorLexico.LINEA + "): el identificador ya ha sido utilizado.");
				}
			}
break;
case 41:
<<<<<<< HEAD
//#line 164 "gramatica.y"
{ sintactico.addErrorSintactico("SematicError. PARAM(Línea " + AnalizadorLexico.LINEA + "): falta TIPO en parametros."); }
break;
case 42:
//#line 168 "gramatica.y"
=======
//#line 183 "gramatica.y"
{ sintactico.addErrorSintactico("SematicError. PARAM(Línea " + AnalizadorLexico.LINEA + "): falta TIPO en parametros."); }
break;
case 42:
//#line 187 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
				sintactico.setTipoGlobal(val_peek(0).sval);
			}
break;
case 43:
<<<<<<< HEAD
//#line 171 "gramatica.y"
=======
//#line 190 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
				sintactico.addErrorSintactico("SematicError. ENCAB_FUN(Línea " + AnalizadorLexico.LINEA + "): falta tipo de funcion ");
	 	 		sintactico.addAnalisis("Se reconoce declaracion de funcion pero falta tipo (Línea " + AnalizadorLexico.LINEA + ")");
			}
break;
case 44:
<<<<<<< HEAD
//#line 177 "gramatica.y"
=======
//#line 196 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
					sintactico.addAnalisis("Se reconoce cuerpo de funcion (Línea " + AnalizadorLexico.LINEA + ")");
					this.ambito = borrarAmbito(this.ambito);
					sintactico.clearTipo();
 					yyval = val_peek(1);
 				}
break;
case 48:
<<<<<<< HEAD
//#line 188 "gramatica.y"
{ sintactico.addAnalisis("Se reconocen mas parametros de los deseados en la funcion (Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 49:
//#line 191 "gramatica.y"
=======
//#line 207 "gramatica.y"
{ sintactico.addAnalisis("Se reconocen mas parametros de los deseados en la funcion (Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 49:
//#line 210 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
								sintactico.addAnalisis( "Se reconocio declaracion de funcion (Línea " + AnalizadorLexico.LINEA + ")" );

								String lexema = sintactico.getEntradaTablaSimb(val_peek(4).ival).getLexema();

								int existente = enAmbito(val_peek(4));
								if (existente < 0) { /* no existe el id en el ambito*/
									sintactico.setTipoEnIndex(sintactico.getTipo(), val_peek(4).ival);
									sintactico.setLexemaEnIndex(val_peek(4).ival, "@"+this.ambito);
									sintactico.setUsoEnIndex("func", val_peek(4).ival);
									agregarAmbito(lexema);
									sintactico.setUsoParam(sintactico.getEntradaTablaSimb(val_peek(4).ival).getLexema());
									sintactico.vaciarListaVariables();
									yyval = new ParserVal(val_peek(4).ival);
								} else {
									sintactico.addErrorSintactico("SematicError. ENC_FUN (Línea " + AnalizadorLexico.LINEA + "): el identificador ya ha sido utilizado.");
								}

							}
break;
case 50:
<<<<<<< HEAD
//#line 210 "gramatica.y"
=======
//#line 229 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
	 								sintactico.addAnalisis("Se reconoce declaracion de funcion pero falta identificacion (Línea " + AnalizadorLexico.LINEA + ")");
							   		sintactico.addErrorSintactico("SematicError. ENC_FUN (Línea " + AnalizadorLexico.LINEA + "): funcion sin identificar.");
								}
break;
case 51:
<<<<<<< HEAD
//#line 216 "gramatica.y"
=======
//#line 235 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
						Token t = sintactico.getEntradaTablaSimb(val_peek(1).ival);
						Nodo n = sintactico.crearNodoControl(t.getLexema(), val_peek(0));
						n.setTipo(t.getTipo());
						sintactico.agregarArbolFuncion(new ParserVal(n),t.getLexema());
						sintactico.clearTipo();
					}
break;
case 52:
<<<<<<< HEAD
//#line 226 "gramatica.y"
=======
//#line 245 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{ sintactico.addAnalisis("Se reconoce retorno de funcion(Línea " + AnalizadorLexico.LINEA + ") ");
						   	  sintactico.checkRetorno(val_peek(2), sintactico.getTipo());
						   	  Nodo nodoRetorno = sintactico.crearNodoControl("return",val_peek(2));
						   	  Nodo n = (Nodo) val_peek(2).obj;
						   	  nodoRetorno.setTipo(n.getTipo());
						   	  yyval = new ParserVal(nodoRetorno);}
break;
case 53:
<<<<<<< HEAD
//#line 232 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN1 (Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 54:
//#line 233 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN2(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 55:
//#line 234 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN3(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 56:
//#line 235 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN4(Línea " + AnalizadorLexico.LINEA + "): falta ; "); }
break;
case 64:
//#line 247 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 65:
//#line 248 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 66:
//#line 252 "gramatica.y"
=======
//#line 251 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN1 (Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 54:
//#line 252 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN2(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 55:
//#line 253 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN3(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 56:
//#line 254 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN4(Línea " + AnalizadorLexico.LINEA + "): falta ; "); }
break;
case 64:
//#line 266 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 65:
//#line 267 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 66:
//#line 271 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
									ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
									yyval = modificado;
								}
break;
case 67:
<<<<<<< HEAD
//#line 256 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 68:
//#line 259 "gramatica.y"
=======
//#line 275 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 68:
//#line 278 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
											ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
											yyval = modificado;
										}
break;
case 69:
<<<<<<< HEAD
//#line 263 "gramatica.y"
=======
//#line 282 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
										ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("declarativa", val_peek(0), null));
										yyval = modificado;
									}
break;
case 70:
<<<<<<< HEAD
//#line 267 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 71:
//#line 268 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("declarativa", val_peek(0), null));}
break;
case 72:
//#line 273 "gramatica.y"
{ yyval.sval = new String("=:"); }
break;
case 73:
//#line 274 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP1(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 74:
//#line 275 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 75:
//#line 279 "gramatica.y"
=======
//#line 286 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 71:
//#line 287 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("declarativa", val_peek(0), null));}
break;
case 72:
//#line 292 "gramatica.y"
{ yyval.sval = new String("=:"); }
break;
case 73:
//#line 293 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP1(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 74:
//#line 294 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 75:
//#line 298 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
							int existente = enAmbito(val_peek(3));
							if (existente >= 0) {
								ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
								yyval = new ParserVal(sintactico.crearNodo("=:", identificador , val_peek(1)));
								sintactico.eliminarEntrada(val_peek(3).ival);
							} else {
								sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): variable no declarada.");
							}
					  	}
break;
case 76:
<<<<<<< HEAD
//#line 290 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP(Línea " + (AnalizadorLexico.LINEA) + "): falta ';' luego de la ASIG."); }
break;
case 77:
//#line 292 "gramatica.y"
=======
//#line 309 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP(Línea " + (AnalizadorLexico.LINEA) + "): falta ';' luego de la ASIG."); }
break;
case 77:
//#line 311 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
           					int existente = enAmbito(val_peek(3));
						if (existente >= 0) {
							ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
							yyval = new ParserVal(sintactico.crearNodo("=:", identificador , val_peek(1)));
							sintactico.eliminarEntrada(val_peek(3).ival);
						} else {
							sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): variable no declarada.");}
						}
break;
case 78:
<<<<<<< HEAD
//#line 301 "gramatica.y"
=======
//#line 320 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
	   						int existente = enAmbito(val_peek(2));
							if (existente >= 0) {
								ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
								yyval = new ParserVal(sintactico.crearNodo("=:", identificador , val_peek(0)));
								sintactico.eliminarEntrada(val_peek(2).ival);
							} else {
								sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): variable no declarada.");
							}
						 }
break;
case 79:
<<<<<<< HEAD
//#line 314 "gramatica.y"
=======
//#line 333 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{ 	Nodo for_else = sintactico.crearNodo("for_else", val_peek(2), new ParserVal(sintactico.crearHoja(val_peek(0).ival)));
						String cteElse = sintactico.getTipoFromTS(val_peek(0).ival);
						if (cteElse.equals(tipoBreak)) {
							for_else.setTipo(cteElse);
                                                	yyval = new ParserVal(for_else);
						}else{
                                               		sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "):  los tipos en el BREAK/ELSE del FOR no coinciden");
                                                }

					}
break;
case 80:
<<<<<<< HEAD
//#line 324 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): problema en devolver valor por defecto  ");}
break;
case 81:
//#line 327 "gramatica.y"
=======
//#line 343 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): problema en devolver valor por defecto  ");}
break;
case 81:
//#line 346 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
						sintactico.setUsoEnIndex("cadena",val_peek(2).ival);
						sintactico.addCadena(val_peek(2).ival);
						yyval = new ParserVal(sintactico.crearNodoControl("out", new ParserVal(sintactico.crearHoja(val_peek(2).ival))));}
break;
case 82:
<<<<<<< HEAD
//#line 331 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de la impresión de cadena."); }
break;
case 83:
//#line 332 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): cierre erróneo de la lista de parámetros de out."); }
break;
case 84:
//#line 333 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): los parámetros de out deben estar entre paréntesis."); }
break;
case 85:
//#line 334 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): se esperaba out, se encontró '('."); }
break;
case 86:
//#line 335 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta declarar una cadena para PRINT."); }
break;
case 87:
//#line 340 "gramatica.y"
=======
//#line 350 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de la impresión de cadena."); }
break;
case 83:
//#line 351 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): cierre erróneo de la lista de parámetros de out."); }
break;
case 84:
//#line 352 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): los parámetros de out deben estar entre paréntesis."); }
break;
case 85:
//#line 353 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): se esperaba out, se encontró '('."); }
break;
case 86:
//#line 354 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta declarar una cadena para PRINT."); }
break;
case 87:
//#line 359 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{	yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));
									sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 88:
<<<<<<< HEAD
//#line 342 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 89:
//#line 343 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 90:
//#line 347 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("condicionIf",val_peek(1)));}
break;
=======
//#line 361 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 89:
//#line 362 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 90:
//#line 366 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("condicionIf",val_peek(1)));}
break;
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
case 91:
//#line 367 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 92:
//#line 368 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 93:
<<<<<<< HEAD
//#line 350 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 94:
//#line 354 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if", val_peek(1), val_peek(0)));}
break;
case 95:
//#line 355 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if", val_peek(0), null));}
break;
case 96:
//#line 356 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta bloque then."); }
break;
case 97:
//#line 360 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(1)));}
break;
case 98:
//#line 361 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(0)));}
break;
case 99:
//#line 365 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(1)));}
break;
case 100:
//#line 366 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(0)));}
break;
case 101:
//#line 369 "gramatica.y"
=======
//#line 369 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 94:
//#line 373 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if", val_peek(1), val_peek(0)));}
break;
case 95:
//#line 374 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if", val_peek(0), null));}
break;
case 96:
//#line 375 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta bloque then."); }
break;
case 97:
//#line 379 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(1)));}
break;
case 98:
//#line 380 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(0)));}
break;
case 99:
//#line 384 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(1)));}
break;
case 100:
//#line 385 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(0)));}
break;
case 101:
//#line 388 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
								   yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));}
break;
case 102:
<<<<<<< HEAD
//#line 371 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 103:
//#line 372 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 104:
//#line 375 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(1),val_peek(0)));}
break;
case 105:
//#line 376 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(0),null));}
break;
case 106:
//#line 377 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 107:
//#line 380 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1)));}
break;
case 108:
//#line 381 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(0)));}
break;
case 109:
//#line 384 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(1)));}
break;
case 110:
//#line 385 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(0)));}
break;
case 111:
//#line 388 "gramatica.y"
=======
//#line 390 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 103:
//#line 391 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 104:
//#line 394 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(1),val_peek(0)));}
break;
case 105:
//#line 395 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(0),null));}
break;
case 106:
//#line 396 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 107:
//#line 399 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1)));}
break;
case 108:
//#line 400 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(0)));}
break;
case 109:
//#line 403 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(1)));}
break;
case 110:
//#line 404 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(0)));}
break;
case 111:
//#line 407 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
									   yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));}
break;
case 112:
<<<<<<< HEAD
//#line 390 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 113:
//#line 391 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 114:
//#line 394 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(1),val_peek(0)));}
break;
case 115:
//#line 395 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(0),null));}
break;
case 116:
//#line 396 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 117:
//#line 399 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1)));}
break;
case 118:
//#line 400 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(0)));}
break;
case 119:
//#line 403 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(1)));}
break;
case 120:
//#line 404 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(0)));}
break;
case 121:
//#line 407 "gramatica.y"
=======
//#line 409 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 113:
//#line 410 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 114:
//#line 413 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(1),val_peek(0)));}
break;
case 115:
//#line 414 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(0),null));}
break;
case 116:
//#line 415 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 117:
//#line 418 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1)));}
break;
case 118:
//#line 419 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(0)));}
break;
case 119:
//#line 422 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(1)));}
break;
case 120:
//#line 423 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(0)));}
break;
case 121:
//#line 426 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
									  yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));
									}
break;
case 122:
<<<<<<< HEAD
//#line 410 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 123:
//#line 411 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 124:
//#line 414 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(1),val_peek(0)));}
break;
case 125:
//#line 415 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(0),null));}
break;
case 126:
//#line 416 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 127:
//#line 419 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(1)));}
break;
case 128:
//#line 420 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(0)));}
break;
case 129:
//#line 423 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(1)));}
break;
case 130:
//#line 424 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(0)));}
break;
case 131:
//#line 426 "gramatica.y"
{this.contadorIf++; agregarAmbito("if-then"+contadorIf);}
break;
case 132:
//#line 429 "gramatica.y"
{this.ambito = borrarAmbito(this.ambito); agregarAmbito("if-else"+this.contadorIf);}
break;
case 133:
//#line 432 "gramatica.y"
{this.ambito = borrarAmbito(this.ambito);}
break;
case 134:
//#line 439 "gramatica.y"
=======
//#line 429 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 123:
//#line 430 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 124:
//#line 433 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(1),val_peek(0)));}
break;
case 125:
//#line 434 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(0),null));}
break;
case 126:
//#line 435 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 127:
//#line 438 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(1)));}
break;
case 128:
//#line 439 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(0)));}
break;
case 129:
//#line 442 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(1)));}
break;
case 130:
//#line 443 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(0)));}
break;
case 131:
//#line 445 "gramatica.y"
{this.contadorIf++; agregarAmbito("if-then"+contadorIf);}
break;
case 132:
//#line 448 "gramatica.y"
{this.ambito = borrarAmbito(this.ambito); agregarAmbito("if-else"+this.contadorIf);}
break;
case 133:
//#line 451 "gramatica.y"
{this.ambito = borrarAmbito(this.ambito);}
break;
case 134:
//#line 458 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{ sintactico.addAnalisis("Se reconocio una sentencia when");
								  yyval = new ParserVal(sintactico.crearNodo("when", val_peek(3), val_peek(1)));}
break;
case 135:
<<<<<<< HEAD
//#line 441 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta abrir paréntesis la condicion"); }
break;
case 136:
//#line 442 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta punto y coma pero se reconoce sentencia when."); }
break;
case 137:
//#line 445 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("condicionWhen",val_peek(0))); agregarAmbito("when"+this.contadorWhen); this.contadorWhen++;}
break;
case 138:
//#line 449 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1))); this.ambito = borrarAmbito(this.ambito); }
break;
case 139:
//#line 450 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar la llave del bloque."); }
break;
case 140:
//#line 451 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir la llave del bloque"); }
break;
case 141:
//#line 458 "gramatica.y"
=======
//#line 460 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta abrir paréntesis la condicion"); }
break;
case 136:
//#line 461 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta paréntesis de cierre en la condicion."); }
break;
case 137:
//#line 464 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("condicionWhen",val_peek(0))); agregarAmbito("when"+this.contadorWhen); this.contadorWhen++;}
break;
case 138:
//#line 468 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1))); this.ambito = borrarAmbito(this.ambito); }
break;
case 139:
//#line 469 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar la llave del bloque."); }
break;
case 140:
//#line 470 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir la llave del bloque"); }
break;
case 141:
//#line 477 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{	sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")");
							  	yyval = new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)));
							  	this.ambito = borrarAmbito(this.ambito);
							}
break;
case 142:
<<<<<<< HEAD
//#line 462 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 143:
//#line 463 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 144:
//#line 464 "gramatica.y"
=======
//#line 481 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 143:
//#line 482 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 144:
//#line 483 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{ sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");

									int existente = sintactico.encontrarTag(val_peek(6).ival, this.ambito);
									if (existente >= 0) {
										if (sintactico.getEntradaTablaSimb(existente).getUso().equals("tag")) {
											ParserVal nodoTag = new ParserVal(sintactico.crearNodoControl("etiqueta", new ParserVal(sintactico.crearHoja(existente))));
											yyval = new ParserVal( sintactico.crearNodo("for-etiquetado", nodoTag , new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)))));
											sintactico.eliminarEntrada(val_peek(6).ival);
										} else {
											sintactico.addErrorSintactico("SematicError. (Línea " + AnalizadorLexico.LINEA + "): el identificador utilizado no es una etiqueta.");
										}
									} else {
										sintactico.addErrorSintactico("SematicError. (Línea " + AnalizadorLexico.LINEA + "): etiqueta invalida");
									}
									this.ambito = borrarAmbito(this.ambito);
								}
break;
case 145:
<<<<<<< HEAD
//#line 483 "gramatica.y"
=======
//#line 502 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{	yyval = new ParserVal(sintactico.crearNodo("encabezado for",val_peek(2), val_peek(0)));

						}
break;
case 146:
<<<<<<< HEAD
//#line 488 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("condicion y operacion for",  val_peek(2), val_peek(0)));}
break;
case 147:
//#line 492 "gramatica.y"
=======
//#line 507 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("condicion y operacion for",  val_peek(2), val_peek(0)));}
break;
case 147:
//#line 511 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
						int existente = enAmbito(val_peek(2));
						if (existente >= 0) {
							if (sintactico.getEntradaTablaSimb(existente).getUso().equals("for_var")) {
								String lexExistente = sintactico.getEntradaTablaSimb(existente).getLexema();
								String [] aux = lexExistente.split("@");

								String ambitoExistente = aux[1];

								if ( ambitoExistente.equals(this.ambito)) {
									sintactico.setUsoEnIndex("i32",val_peek(0).ival);
									Nodo op2 = (Nodo) val_peek(0).obj;
									String typeOP2 = op2.getTipo();
                                                                        String typeOP1 = sintactico.getTipoFromTS(existente);
                                                                        if (typeOP1.equals(typeOP2)) {
										ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
										ParserVal constante = new ParserVal(op2);
										yyval = new ParserVal(sintactico.crearNodoControl("condicionFor", new ParserVal(sintactico.crearNodo(val_peek(1).sval,identificador,constante))));
										sintactico.eliminarEntrada(val_peek(2).ival);
									}else{
									sintactico.addErrorSintactico("SematicError. se reconoce FOR pero hay un problema de tipos en la condicion " + AnalizadorLexico.LINEA);
									}
								} else {
									sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable utilizada no corresponde a este for loop");
								}
							} else {
								sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable utilizada en la condicion debe ser la declarada en el for loop.");
							}
						} else {
							sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable usada no ha sido declarada.");
						}
				     	}
break;
case 148:
<<<<<<< HEAD
//#line 526 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(2)));}
break;
case 149:
//#line 527 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(0)));}
break;
case 150:
//#line 528 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): Falta el ; al final del bloque del for");}
break;
case 151:
//#line 531 "gramatica.y"
{yyval.sval = new String("+");}
break;
case 152:
//#line 532 "gramatica.y"
{yyval.sval = new String("-");}
break;
case 160:
//#line 543 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 161:
//#line 544 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten retornos fuera de una funcion"); }
break;
case 163:
//#line 550 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(2)));}
=======
//#line 543 "gramatica.y"
{
					int existente = enAmbito(val_peek(4));
					if (existente >= 0) {
						if (sintactico.getEntradaTablaSimb(existente).getUso().equals("for_var")) {
							String lexExistente = sintactico.getEntradaTablaSimb(existente).getLexema();
							String [] aux = lexExistente.split("@");

							String ambitoExistente = aux[1];

							if ( ambitoExistente.equals(this.ambito)) {
								/*sintactico.setUsoEnIndex("i32",$3.ival);*/
								Nodo op2 = (Nodo) val_peek(1).obj;
								String typeOP2 = op2.getTipo();
								String typeOP1 = sintactico.getTipoFromTS(existente);
								if (typeOP1.equals(typeOP2)) {
									ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
									ParserVal constante = new ParserVal(op2);
									yyval = new ParserVal(sintactico.crearNodoControl("condicionFor", new ParserVal(sintactico.crearNodo(val_peek(3).sval,identificador,constante))));
									sintactico.eliminarEntrada(val_peek(4).ival);
								}else{
								sintactico.addErrorSintactico("SematicError. se reconoce FOR pero hay un problema de tipos en la condicion " + AnalizadorLexico.LINEA);
								}
							} else {
								sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable utilizada no corresponde a este for loop");
							}
						} else {
							sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable utilizada en la condicion debe ser la declarada en el for loop.");
						}
					} else {
						sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable usada no ha sido declarada.");
					}
				}
break;
case 149:
//#line 577 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(2)));}
break;
case 150:
//#line 578 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(0)));}
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
break;
case 151:
//#line 579 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): Falta el ; al final del bloque del for");}
break;
case 152:
//#line 582 "gramatica.y"
{yyval.sval = new String("+");}
break;
case 153:
//#line 583 "gramatica.y"
{yyval.sval = new String("-");}
break;
case 161:
//#line 594 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 162:
//#line 595 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten retornos fuera de una funcion"); }
break;
case 164:
<<<<<<< HEAD
//#line 551 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(0)));}
break;
case 165:
//#line 552 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): falta ; al final del bloque del for."); }
break;
case 166:
//#line 555 "gramatica.y"
=======
//#line 601 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(2)));}
break;
case 165:
//#line 602 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(0)));}
break;
case 166:
//#line 603 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): falta ; al final del bloque del for."); }
break;
case 167:
//#line 606 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{	sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")");
                        							yyval = new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)));
										this.ambito = borrarAmbito(this.ambito);
									}
break;
<<<<<<< HEAD
case 167:
//#line 559 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 168:
//#line 560 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 169:
//#line 561 "gramatica.y"
=======
case 168:
//#line 610 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 169:
//#line 611 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 170:
//#line 612 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
		       									sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");
											int existente = enAmbito(val_peek(6));
											if (existente >= 0) {
												if (sintactico.getEntradaTablaSimb(existente).getUso().equals("tag")) {
													yyval = new ParserVal( sintactico.crearNodo("for-etiquetado", new ParserVal(sintactico.crearHoja(existente)), new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)))));
													sintactico.eliminarEntrada(val_peek(6).ival);
												} else {
													sintactico.addErrorSintactico("SematicError. (Línea " + AnalizadorLexico.LINEA + "): el identificador utilizado no es una etiqueta.");
												}
											} else {
												sintactico.addErrorSintactico("SematicError. (Línea " + AnalizadorLexico.LINEA + "): etiqueta invalida");
											}
											this.ambito = borrarAmbito(this.ambito);
										}
break;
<<<<<<< HEAD
case 170:
//#line 580 "gramatica.y"
=======
case 171:
//#line 631 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
					agregarAmbito("for"+this.contadorFor);
					this.contadorFor++;
					int existente = enAmbito(val_peek(2));
					if (existente < 0){
						sintactico.setTipoEnIndex("i32", val_peek(2).ival);
						sintactico.setTipoEnIndex("i32", val_peek(0).ival);
						sintactico.setLexemaEnIndex(val_peek(2).ival, "@"+this.ambito);
						sintactico.setUsoEnIndex("for_var", val_peek(2).ival);
						ParserVal identificador = new ParserVal(sintactico.crearHoja(val_peek(2).ival));
						ParserVal constante = new ParserVal(sintactico.crearHoja(val_peek(0).ival));
						sintactico.setUsoEnIndex("cte",val_peek(0).ival);
						yyval = new ParserVal(sintactico.crearNodoControl("asignacionFor",new ParserVal(sintactico.crearNodo("=:",identificador,constante))));
					} else {
						sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): la variable utilizada para el for loop ya ha sido declarada.");
					}
				   }
break;
<<<<<<< HEAD
case 171:
//#line 602 "gramatica.y"
=======
case 172:
//#line 653 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
					int existente = enAmbito(val_peek(0));
					if (existente >= 0) {
						if (sintactico.getEntradaTablaSimb(existente).getUso().equals("for_var")) {
							String lexExistente = sintactico.getEntradaTablaSimb(existente).getLexema();
							String [] aux = lexExistente.split("@");
                                                        String ambitoExistente = aux[1];
							if ( ambitoExistente.equals(this.ambito)) {
							 	ParserVal hoja = new ParserVal(sintactico.crearHoja(existente));/* variableFor*/
							 	Nodo n = sintactico.crearNodoControl("1",null);
							 	n.setTipo("i32");
							 	ParserVal uno = new ParserVal(n);
							 	ParserVal operacion = new ParserVal(sintactico.crearNodo(val_peek(1).sval, hoja, uno));
								yyval = new ParserVal(sintactico.crearNodoControl("operacionFor",new ParserVal(sintactico.crearNodo("=:",new ParserVal(sintactico.crearHoja(existente)),operacion))));
								sintactico.eliminarEntrada(val_peek(0).ival);
							} else {
								sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): OP la variable utilizada no corresponde a este for loop");
							}
						} else {
							sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): OP la variable utilizada en la condicion debe ser la declarada en el for loop.");
						}
					} else {
						sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): OP la variable usada no ha sido declarada.");
					}
					}
break;
<<<<<<< HEAD
case 180:
//#line 637 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 181:
//#line 641 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 182:
//#line 642 "gramatica.y"
=======
case 173:
//#line 678 "gramatica.y"
{sintactico.addErrorSintactico("SematicError. (Línea " + (AnalizadorLexico.LINEA) + "): Falta el signo en la operacion de incremento/decremento del for.");}
break;
case 182:
//#line 689 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 183:
//#line 693 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 184:
//#line 694 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
									ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
									yyval = modificado;
								}
break;
<<<<<<< HEAD
case 183:
//#line 646 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): no se permiten cuerpos de for vacios.");}
break;
case 184:
//#line 651 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio una sentencia break (Línea " + AnalizadorLexico.LINEA + ")");
					yyval = new ParserVal(sintactico.crearNodoControl("break",null));}
break;
case 185:
//#line 653 "gramatica.y"
=======
case 185:
//#line 698 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): no se permiten cuerpos de for vacios.");}
break;
case 186:
//#line 703 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio una sentencia break (Línea " + AnalizadorLexico.LINEA + ")");
					yyval = new ParserVal(sintactico.crearNodoControl("break",null));}
break;
case 187:
//#line 705 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{	sintactico.addAnalisis("Se reconocio una sentencia break con retorno de valor (Línea " + AnalizadorLexico.LINEA + ")");
                			yyval = new ParserVal(sintactico.crearNodoControl("breakValor", new ParserVal(sintactico.crearHoja(val_peek(1).ival))));
                			sintactico.setUsoEnIndex("cte",val_peek(1).ival);
                			tipoBreak = sintactico.getTipoFromTS(val_peek(1).ival);
                			}
break;
<<<<<<< HEAD
case 186:
//#line 659 "gramatica.y"
{	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de BREAK."); }
break;
case 187:
//#line 662 "gramatica.y"
=======
case 188:
//#line 711 "gramatica.y"
{	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de BREAK."); }
break;
case 189:
//#line 714 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
							sintactico.addAnalisis("Se reconocio una sentencia continue (Línea " + AnalizadorLexico.LINEA + ")");
							yyval = new ParserVal(sintactico.crearNodoControl("continue",null));}
break;
<<<<<<< HEAD
case 188:
//#line 665 "gramatica.y"
=======
case 190:
//#line 717 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{ 	sintactico.addAnalisis("Se reconocio una sentencia continue con etiquetado(Línea " + AnalizadorLexico.LINEA + ")");
                   					int existente = enAmbito(val_peek(1));
							if (existente < 0 ) {
								sintactico.setLexemaEnIndex(val_peek(1).ival,"@"+this.ambito);
								sintactico.setUsoEnIndex("tag",val_peek(1).ival);
								yyval = new ParserVal(sintactico.crearNodoControl("continue-etiqueta", new ParserVal(sintactico.crearHoja(val_peek(1).ival))));
							} else {
								sintactico.addErrorSintactico("SematicError. (Línea " + AnalizadorLexico.LINEA + "): el identificador de la etiqueta ya ha sido utilizado.");
							}
                   					}
break;
<<<<<<< HEAD
case 189:
//#line 675 "gramatica.y"
{ 	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ':'CONTINUE."); }
break;
case 190:
//#line 676 "gramatica.y"
{ 	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego del CONTINUE "); }
break;
case 191:
//#line 679 "gramatica.y"
=======
case 191:
//#line 727 "gramatica.y"
{ 	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ':'CONTINUE."); }
break;
case 192:
//#line 728 "gramatica.y"
{ 	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego del CONTINUE "); }
break;
case 193:
//#line 731 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
								int existente = enAmbito(val_peek(4));
								if (existente >= 0) {
									Token idFuncInvocada = sintactico.getEntradaTablaSimb(existente);
									if (idFuncInvocada.getUso().equals("func")) {
										sintactico.checkParametros(idFuncInvocada.getLexema());
										yyval = new ParserVal(sintactico.crearNodoFunc(existente, val_peek(2)));
										sintactico.eliminarEntrada(val_peek(4).ival);
									} else {
										sintactico.addErrorSintactico("SematicError. (Línea " + AnalizadorLexico.LINEA + "): el identificador no corresponde a una funcion.");
									}
								} else {
									sintactico.addErrorSintactico("SematicError. (Línea " + AnalizadorLexico.LINEA + "): funcion no declarada.");
								}

							}
break;
<<<<<<< HEAD
case 193:
//#line 712 "gramatica.y"
=======
case 195:
//#line 764 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
		    				yyval = new ParserVal(sintactico.crearNodoParam("paramInv", val_peek(2), val_peek(0)));
		    				NodoHijo aux = (NodoHijo)val_peek(2).obj;
						sintactico.addListaVariables(aux.getRefTablaSimbolos());
						NodoHijo aux1 = (NodoHijo)val_peek(0).obj;
                                                sintactico.addListaVariables(aux1.getRefTablaSimbolos());

					}
break;
<<<<<<< HEAD
case 194:
//#line 720 "gramatica.y"
=======
case 196:
//#line 772 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{	yyval = new ParserVal(sintactico.crearNodoParam("paramInv", val_peek(0), null));

		    				NodoHijo aux = (NodoHijo)val_peek(0).obj;
                                         	sintactico.addListaVariables(aux.getRefTablaSimbolos());

		 			   }
break;
<<<<<<< HEAD
case 195:
//#line 729 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodo(val_peek(1).sval, val_peek(2), val_peek(0)));}
break;
case 196:
//#line 733 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo(val_peek(1).sval, val_peek(2), val_peek(0))); }
break;
case 198:
//#line 738 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("*",val_peek(2),val_peek(0)));}
break;
case 199:
//#line 739 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("/",val_peek(2),val_peek(0)));}
break;
case 201:
//#line 743 "gramatica.y"
=======
case 197:
//#line 781 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodo(val_peek(1).sval, val_peek(2), val_peek(0)));}
break;
case 198:
//#line 785 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo(val_peek(1).sval, val_peek(2), val_peek(0))); }
break;
case 200:
//#line 790 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("*",val_peek(2),val_peek(0)));}
break;
case 201:
//#line 791 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("/",val_peek(2),val_peek(0)));}
break;
case 203:
//#line 795 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
				int existente = enAmbito(val_peek(0));
				if (existente >= 0) {
					String type = sintactico.getTipoFromTS(existente);
					Nodo n = sintactico.crearHoja(existente);
					n.setTipo(type);
					yyval = new ParserVal(n);
					sintactico.eliminarEntrada(val_peek(0).ival);
				} else {
					sintactico.addErrorSintactico("SematicError. (Línea " + AnalizadorLexico.LINEA + "): variable no declarada.");
				}
				}
break;
<<<<<<< HEAD
case 202:
//#line 753 "gramatica.y"
=======
case 204:
//#line 807 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
				String lexema = sintactico.getEntradaTablaSimb(val_peek(0).ival).getLexema();
                                int existente = sintactico.getTS().existeEntrada(lexema);
				if (existente >= 0 && existente < val_peek(0).ival) {
					yyval = new ParserVal(sintactico.crearHoja(existente));
					sintactico.setUsoEnIndex("cte",existente);
					sintactico.eliminarEntrada(val_peek(0).ival);
				} else {
					String type = sintactico.getTipoFromTS(val_peek(0).ival);
					if (type.equals("i32"))
					     sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
					sintactico.setUsoEnIndex("cte",val_peek(0).ival);
					Nodo n = sintactico.crearHoja(val_peek(0).ival);
					n.setTipo(type);
					System.out.println("!!!"+n.getLexema() + " // "+ n.getTipo());
					yyval = new ParserVal(n);
				}
                  	}
break;
<<<<<<< HEAD
case 203:
//#line 768 "gramatica.y"
=======
case 205:
//#line 825 "gramatica.y"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
{
				sintactico.setNegativoTablaSimb(val_peek(0).ival);
				String lexema = sintactico.getEntradaTablaSimb(val_peek(0).ival).getLexema();
				int existente = sintactico.getTS().existeEntrada(lexema);
                                if (existente >= 0  && existente < val_peek(0).ival) {
                                	yyval = new ParserVal(sintactico.crearHoja(existente));
                                	sintactico.setUsoEnIndex("cte neg",existente);
                                        sintactico.eliminarEntrada(val_peek(0).ival);
                                }else{
                                	String type = sintactico.getTipoFromTS(val_peek(0).ival);
									if (type.equals("i32"))
					     				sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
                                        Nodo n = sintactico.crearHoja(val_peek(0).ival);
					n.setTipo(type);
					yyval = new ParserVal(n);
					sintactico.setUsoEnIndex("cte neg",val_peek(0).ival);
				}
                   	}
break;
<<<<<<< HEAD
case 204:
//#line 784 "gramatica.y"
{ yyval.sval = new String("<") ; }
break;
case 205:
//#line 785 "gramatica.y"
{ yyval.sval = new String(">") ; }
break;
case 206:
//#line 786 "gramatica.y"
{ yyval.sval = new String("<="); }
break;
case 207:
//#line 787 "gramatica.y"
{ yyval.sval = new String(">="); }
break;
case 208:
//#line 788 "gramatica.y"
{ yyval.sval = new String("=") ; }
break;
case 209:
//#line 789 "gramatica.y"
{ yyval.sval = new String("=!"); }
break;
case 210:
//#line 793 "gramatica.y"
{ yyval.sval = new String("i32"); }
break;
case 211:
//#line 794 "gramatica.y"
{ yyval.sval = new String("f32"); }
break;
//#line 2130 "Parser.java"
=======
case 206:
//#line 846 "gramatica.y"
{ yyval.sval = new String("<") ; }
break;
case 207:
//#line 847 "gramatica.y"
{ yyval.sval = new String(">") ; }
break;
case 208:
//#line 848 "gramatica.y"
{ yyval.sval = new String("<="); }
break;
case 209:
//#line 849 "gramatica.y"
{ yyval.sval = new String(">="); }
break;
case 210:
//#line 850 "gramatica.y"
{ yyval.sval = new String("=") ; }
break;
case 211:
//#line 851 "gramatica.y"
{ yyval.sval = new String("=!"); }
break;
case 212:
//#line 855 "gramatica.y"
{ yyval.sval = new String("i32"); }
break;
case 213:
//#line 856 "gramatica.y"
{ yyval.sval = new String("f32"); }
break;
//#line 2198 "Parser.java"
>>>>>>> 61bc2f6372ca6126739d9f402e2b30162dce99bf
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
