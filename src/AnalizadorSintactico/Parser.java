//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"

package AnalizadorSintactico;

import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import ArbolSintactico.NodoHijo;
import ArbolSintactico.Nodo;

import java.util.Stack;


//#line 29 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short id=257;
public final static short cte=258;
public final static short If=259;
public final static short then=260;
public final static short Else=261;
public final static short end_if=262;
public final static short out=263;
public final static short fun=264;
public final static short Return=265;
public final static short BREAK=266;
public final static short i32=267;
public final static short when=268;
public final static short For=269;
public final static short CONTINUE=270;
public final static short f32=271;
public final static short cadena=272;
public final static short menorigual=273;
public final static short mayorigual=274;
public final static short distinto=275;
public final static short opasignacion=276;
public final static short Const=277;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    2,    2,    2,    2,    4,    4,    4,    5,
    5,    5,    6,    6,    6,    6,    6,    8,    8,    3,
    3,    3,    3,   10,   10,   10,   10,   10,   10,   16,
   16,   11,   11,   11,   11,   11,   11,   11,   13,   13,
   13,   24,   24,   25,   25,   26,   28,   28,   28,   29,
   30,   30,   14,   31,   31,   31,   31,   31,   27,   34,
   34,   34,   34,   34,   34,   34,   34,   37,   37,   33,
   33,   33,   33,    7,    7,    7,   17,   17,   17,   17,
   38,   38,   18,   18,   18,   18,   18,   18,   19,   19,
   19,   40,   40,   40,   40,   41,   41,   41,   44,   44,
   45,   45,   48,   48,   48,   49,   49,   49,   50,   50,
   51,   51,   35,   35,   35,   52,   52,   52,   53,   53,
   54,   54,   55,   55,   55,   56,   56,   56,   57,   57,
   58,   58,   46,   47,   42,   15,   15,   15,   61,   62,
   62,   62,   20,   20,   20,   20,   39,   39,   39,   63,
   66,   67,   67,   64,   64,   64,   71,   71,    9,    9,
    9,    9,    9,    9,    9,    9,    9,   72,   72,   72,
   36,   36,   36,   36,   65,   68,   68,   60,   60,   60,
   60,   60,   60,   60,   60,   60,   59,   59,   59,   22,
   22,   22,   23,   23,   23,   23,   21,   73,   73,   73,
   43,   32,   32,   74,   74,   74,   70,   70,   70,   69,
   69,   69,   69,   69,   69,   12,   12,
};
final static short yylen[] = {                            2,
    2,    1,    4,    3,    2,    2,    3,    3,    3,    1,
    3,    3,    3,    4,    3,    3,    2,    1,    2,    1,
    1,    2,    2,    3,    3,    3,    1,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    2,    2,    2,    3,
    1,    2,    2,    2,    0,    3,    0,    1,    3,    2,
    5,    6,    2,    5,    5,    5,    4,    5,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    2,    1,    2,
    2,    1,    1,    1,    3,    2,    4,    4,    3,    3,
    4,    2,    5,    5,    5,    4,    3,    5,    5,    6,
    5,    3,    2,    2,    1,    2,    1,    1,    4,    2,
    4,    2,    5,    5,    4,    2,    1,    2,    4,    2,
    4,    2,    5,    5,    4,    2,    1,    2,    4,    2,
    4,    2,    5,    5,    4,    2,    1,    2,    4,    2,
    4,    2,    1,    1,    1,    6,    6,    6,    1,    4,
    4,    4,    5,    5,    4,    7,    5,    5,    4,    3,
    3,    3,    5,    4,    1,    4,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    4,    1,    4,
    5,    5,    4,    7,    3,    2,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    2,    1,    2,    1,    2,
    3,    2,    2,    4,    4,    2,    5,    0,    3,    1,
    3,    3,    1,    3,    3,    1,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,
};
final static short yydefred[] = {                         0,
    2,    0,    0,    0,    0,    0,    0,    0,  216,    0,
    0,    0,  217,    0,    0,    0,    0,    0,   28,   20,
   21,    0,    0,   27,   29,   32,   33,   34,   35,   36,
    0,    0,    0,    0,    0,   74,    0,    0,    0,    0,
    0,   39,  207,  208,    0,    0,    0,    0,    0,  206,
    0,    0,    0,   50,    0,  192,    0,  190,    0,  139,
    0,    0,    0,    0,    0,  196,    0,  193,    0,    0,
    0,    0,   10,    0,    0,    0,    6,   22,   23,    0,
    0,   37,   38,    0,    0,   53,   40,    0,    0,    0,
    0,   76,    0,    0,   80,    0,   79,    0,  209,    0,
  212,  213,  215,  158,  214,  157,  210,  211,    0,    0,
    0,  134,    0,    0,   98,    0,    0,   93,    0,    0,
    0,    0,    0,    0,    0,   48,    0,  191,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  155,    0,  159,
  160,  161,  163,  164,  165,    0,  162,    0,    0,    0,
    0,   17,    0,    0,    9,    8,    7,    0,    0,    4,
   87,    0,   26,   24,   25,    0,    0,    0,    0,   73,
   60,   62,   63,    0,    0,    0,   65,    0,   72,   61,
   64,    0,   75,    0,    0,    0,    0,   78,   77,   82,
    0,   92,    0,    0,  133,    0,  135,    0,   96,    0,
    0,  100,    0,  102,  204,  205,   86,    0,    0,    0,
   43,   42,    0,    0,    0,    0,    0,  175,    0,    0,
    0,    0,    0,   18,    0,  166,  167,  145,    0,  150,
    0,  195,  194,   16,   15,   13,    0,   11,   12,    3,
    0,    0,    0,    0,    0,   66,   67,   46,   71,   70,
    0,  199,  197,    0,    0,    0,    0,   91,    0,   89,
   31,    0,    0,   85,   84,   83,   88,   49,    0,    0,
    0,    0,    0,    0,  143,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   19,  144,    0,    0,   14,   51,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  178,  179,  182,  183,  184,  181,  180,  185,  169,
    0,    0,    0,    0,  149,   81,   90,   99,   30,  101,
   44,   52,  138,  136,    0,    0,  137,    0,  110,    0,
  112,  105,    0,  106,  108,    0,    0,   57,    0,  156,
  154,    0,  152,    0,  151,    0,    0,    0,    0,  120,
    0,  122,  115,    0,  116,  118,    0,    0,  189,    0,
  187,    0,  186,  173,  146,  147,  148,  141,  140,  142,
    0,    0,  104,  103,   56,   58,   54,   55,    0,  177,
  176,    0,   69,    0,    0,  114,  113,  171,    0,    0,
    0,    0,    0,    0,  188,  172,  109,  111,  153,    0,
  119,   68,  121,    0,  130,    0,  132,  125,    0,  126,
  128,  170,  168,  174,    0,    0,  124,  123,  129,  131,
};
final static short yydgoto[] = {                          2,
    3,   17,   18,   19,   72,   73,   41,  223,  138,  139,
   21,   22,   23,   24,   25,  262,   26,   27,   28,   29,
   30,   31,   32,  126,  270,   86,  176,  127,   33,   34,
  146,   47,  178,  383,  180,  308,  384,   97,   98,   48,
  113,  198,   49,  114,  115,  116,  117,  147,  278,  279,
  280,  294,  295,  296,  309,  391,  392,  393,  360,  310,
   61,  217,   64,  148,   65,  230,  231,  345,  109,   50,
  110,  311,   91,   51,
};
final static short yysindex[] = {                      -182,
    0,    0,  883,  -35,   18,  -38,  -27,  160,    0,   71,
   -8,   62,    0,  -32, 1000, -186,   29,  921,    0,    0,
    0, -132,  106,    0,    0,    0,    0,    0,    0,    0,
  -79,  -74,  168,   88,   25,    0, -132,  -43,  254,  -36,
  -34,    0,    0,    0,  -46,  254,    4,  -60,  180,    0,
   90,  -11,  -25,    0, -157,    0,  170,    0,  254,    0,
  221,   19,   30,  396,  251,    0,  282,    0,  102,   45,
  124,   24,    0,  937,  128, 1000,    0,    0,    0,   48,
  140,    0,    0, -157,  952,    0,    0,  359,  166,  361,
  382,    0,  385,   14,    0,   56,    0,  -88,    0,  388,
    0,    0,    0,    0,    0,    0,    0,    0,  254,  254,
  -57,    0,  178,  183,    0,  294,  369,    0,  254,  254,
  372,  -16,  189,  191,  193,    0,   68,    0,  410,  192,
  392,  203,  421,   18,   82,  968,  603,    0,  207,    0,
    0,    0,    0,    0,    0,  208,    0,  209,  210,  212,
  412,    0,  213,  136,    0,    0,    0,  218,  224,    0,
    0,  985,    0,    0,    0,  149,  -30,   18,   27,    0,
    0,    0,    0,  226,  227,  362,    0,  952,    0,    0,
    0,   30,    0,  254,  429,   30,  432,    0,    0,    0,
  231,    0,   31,   90,    0, -203,    0,  437,    0,  -18,
 1141,    0, 1141,    0,    0,    0,    0,  438,   58,  439,
    0,    0, -157,  433,  192, 1021,  443,    0,  603,  -57,
  254,   -4,  628,    0,  234,    0,    0,    0,   33,    0,
  445,    0,    0,    0,    0,    0,  245,    0,    0,    0,
  433,  -41,  -57,   30,  501,    0,    0,    0,    0,    0,
  464,    0,    0,  465,  603,  253,  451,    0,  262,    0,
    0, 1058, 1099,    0,    0,    0,    0,    0, -143,  266,
   74, 1000, 1036,  269,    0,  650,  672, -154,  183,  270,
    1,  274,  461,   77,    0,    0,   95,   36,    0,    0,
  492,  169,  258, -102,  183,  277,  494,   18,  688,  705,
  280,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  281,  603,  603,  283,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  734,  289,    0,  968,    0,  968,
    0,    0,   86,    0,    0,  291,   87,    0,  292,    0,
    0,  254,    0,  293,    0,  296,   30,  -10,  145,    0,
  145,    0,    0,   92,    0,    0,  705,  -57,    0,  750,
    0,  300,    0,    0,    0,    0,    0,    0,    0,    0,
  765,  786,    0,    0,    0,    0,    0,    0,  153,    0,
    0,  497,    0,  108,  318,    0,    0,    0,  801,  823,
 -100,  183,  306,  105,    0,    0,    0,    0,    0,  705,
    0,    0,    0,  688,    0,  688,    0,    0,  112,    0,
    0,    0,    0,    0,  838,  860,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,  506,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  569,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  133,    0,    0,    0,  529,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -44,    0,
 1073,    0,    0,    0,  158,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  158,    0,    0,    0,    0,    0,  530,
    0,    0,  348,    0,    0,    0,    0,    0,    0,   63,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1127,    0,    0,  -93,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  506,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  453,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   -6, 1114,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  323,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  457,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -90,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -86,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -76,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,    2,    0,    0,  -39,   61, -243, -133,   -3,
  -12,  103,  444,    0,    0,  371,   70,  201,    0,  -45,
  -40,  321,  431,  376,  341,    0,    0,  508,    0,    0,
  449,  -37,    0,  -29,    0,  -49,  242,    0,    0,  -84,
  483,  155,   11,    0,  481, -191,  264,    0,    0,    0,
  317,    0,    0,  304,    0,    0,    0,  211, -265,  948,
  541,  387,  -56,  500,    0,    0,    0,    0,  377,  -31,
  320, -239,    0,  502,
};
final static int YYTABLESIZE=1411;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         20,
   95,   53,  224,   96,   39,   79,  133,   90,   37,   39,
   45,   20,   55,   37,   78,  123,   74,   89,  142,   89,
   60,   39,   38,  143,  209,   40,   71,  242,  276,   39,
   40,   63,  159,    5,  201,  181,  283,  187,  106,   38,
  104,  337,   40,  106,  173,  104,  106,  242,  104,  220,
   40,  292,  258,  186,  282,  179,  100,   46,  197,  336,
  362,   79,   45,  107,  105,  108,  244,  158,   37,   60,
   78,  193,   20,  106,    1,  104,  131,  162,  106,   40,
  104,  170,  157,  243,  371,   75,  372,  205,  206,  285,
  142,  142,  107,  105,  108,  143,  143,  222,  106,  124,
  104,  332,  131,  202,  204,   40,  164,  197,  214,    9,
   59,  213,  245,   13,  189,   45,  266,  388,  238,   69,
   68,  221,  132,    9,   35,  251,   45,   13,  181,  254,
  154,  119,  324,  140,  342,  341,  120,  173,  415,   45,
  416,  142,  329,  331,  374,  377,  143,   16,  250,   79,
  387,   76,  252,  353,  171,  408,    5,  125,   78,  197,
  414,  197,   97,  413,   81,  107,  389,  190,   97,  117,
  418,  107,  191,  142,  249,  117,   82,  142,  143,  127,
  237,   83,  143,  281,   16,  127,  125,  297,  261,  241,
  261,   41,  213,  399,  224,  106,  224,  104,   47,  111,
  112,   47,  195,  112,  304,  140,  140,   84,   16,  142,
   85,   99,   20,  358,  143,   95,   95,  273,   58,   92,
  118,   35,   93,   44,   70,   88,   35,  291,  128,   54,
  142,  142,  401,   52,   94,  143,  143,  285,  285,  208,
   36,  301,  181,  181,  121,   36,  122,  171,   62,  319,
  319,  173,  173,  201,  201,  343,  140,   36,  304,  304,
   79,  130,  350,  352,  141,   36,  142,  142,   20,   78,
   62,  143,  143,  325,   43,   44,  101,  102,  103,  156,
   70,   35,  142,   62,  142,  172,   62,  143,  140,  143,
  382,  349,  140,  344,   36,  301,  301,   16,   45,  181,
  152,  181,  153,  163,  379,  101,  102,  103,  173,  149,
  173,  188,   79,  265,  302,  125,  304,   66,   67,  304,
   36,   78,   94,   94,  140,  142,  142,   43,   44,  323,
  143,  143,  340,   16,  181,  181,  141,  141,   43,   44,
  150,  373,  376,  173,  173,  140,  140,  386,  304,  304,
  259,   43,   44,  301,  402,  402,  301,   16,  151,  304,
  412,  171,  171,  304,  348,  304,  168,  417,  302,  302,
    6,  321,  135,    8,  304,  304,  169,   12,  172,  155,
  351,  140,  140,  161,  144,  301,  301,  141,   41,  207,
  207,  235,  207,  236,  207,  165,  301,  140,  182,  140,
  301,  348,  301,  168,  184,  174,  207,    6,   16,  135,
    8,  301,  301,  169,   12,   56,  201,   57,  171,  141,
  171,  183,  185,  141,   39,  348,  302,  168,  192,  302,
  207,    6,  333,  135,    8,   16,  137,  169,   12,  197,
  140,  140,  403,  112,  210,  303,  211,   42,  354,  212,
  215,  216,   89,  171,  171,  141,  144,  144,  302,  302,
  218,  219,  226,  227,  228,   80,  229,  232,  234,  302,
  233,   16,  255,  302,   70,  302,  141,  141,   42,  239,
   87,  246,  247,  277,  302,  302,  248,  253,  257,  286,
  269,  203,  172,  172,  145,  260,  264,  267,  174,  303,
  303,  274,  289,  288,  312,  313,  293,  144,  315,  316,
   43,   44,  141,  141,  348,  175,  168,  317,  136,  339,
    6,  322,  135,    8,  327,  335,  169,   12,  141,  338,
  141,  347,  356,  177,  357,  363,  364,  400,  367,  144,
   16,  300,  277,  144,  370,  409,  375,  378,  380,  172,
  200,  172,    5,  381,  136,  396,    6,  303,  293,    8,
  303,  411,   11,   12,   41,  305,  145,  145,    1,  198,
  200,  141,  141,  263,  348,  144,  168,   59,   45,   45,
    6,  290,  135,    8,  172,  172,  169,   12,  268,  303,
  303,  166,  385,  196,  199,  334,  144,  144,  355,  129,
  303,  271,  410,  207,  303,  287,  303,  346,  175,    0,
   42,  194,  174,  174,    0,  303,  303,  145,    0,  305,
  305,  390,    0,  299,    0,  200,  177,    5,    0,    0,
    0,    6,  144,  144,    8,    0,  225,   11,   12,    0,
    0,    0,   16,    0,    0,    0,    0,    0,  144,  145,
  144,    0,    4,  145,  134,  390,    0,    0,    6,    7,
  135,    8,    9,   10,   11,   12,   13,   16,    0,  174,
    0,  174,   14,    0,    0,  306,    0,  305,    0,    0,
  305,    0,    0,    0,    0,  145,  256,    0,    4,   16,
  134,  144,  144,  307,    6,    7,  135,    8,    9,   10,
   11,   12,   13,    0,  174,  174,  145,  145,   14,  305,
  305,   16,    0,    0,    0,    0,    0,    0,  275,    0,
  305,    0,  175,  175,  305,  136,  305,   16,    0,  306,
  306,    0,    0,    0,    0,  305,  305,    0,    0,    0,
  177,  177,  145,  145,   16,    0,    0,  307,  307,    0,
    0,    0,  284,    0,  314,    0,    0,  167,  145,  298,
  145,    0,    0,    6,    7,  135,    8,    9,   10,  169,
   12,   13,  328,   16,    0,    0,    0,   14,    0,  175,
    0,  175,    0,    0,    0,    0,    0,  306,    0,   16,
  306,    0,    0,    0,  330,    0,    0,  177,    0,  177,
    0,  145,  145,    0,   16,  307,    0,    0,  307,    0,
    0,  365,  366,    0,  175,  175,    0,    0,    0,  306,
  306,    0,    0,    0,    0,   16,    0,  299,    0,    0,
  306,    0,  177,  177,  306,    0,  306,  307,  307,    0,
   16,    0,    0,    0,    0,  306,  306,    0,  307,    0,
    0,    0,  307,    0,  307,    0,    0,    0,  369,    4,
    0,  134,   16,  307,  307,    6,    7,  135,    8,    9,
   10,   11,   12,   13,  394,    0,    0,   16,    0,   14,
    0,    0,    0,    0,    4,    0,  134,    0,    0,  397,
    6,    7,  135,    8,    9,   10,   11,   12,   13,   16,
    0,    0,    0,    0,   14,    0,    4,    0,  134,    0,
  398,    0,    6,    7,  135,    8,    9,   10,   11,   12,
   13,    0,   16,  404,    0,    0,   14,    0,    4,    0,
  134,    0,    0,    0,    6,    7,  135,    8,    9,   10,
   11,   12,   13,  359,  167,  406,  298,    0,   14,    0,
    6,    7,  135,    8,    9,   10,  169,   12,   13,    0,
   16,  167,  419,  298,   14,    0,    0,    6,    7,  135,
    8,    9,   10,  169,   12,   13,   16,    0,    0,    0,
    0,   14,    0,    0,  420,    0,    0,    0,    0,  368,
    4,   16,    5,    0,    0,    0,    6,    7,    0,    8,
    9,   10,   11,   12,   13,   15,  167,   16,  298,    0,
   14,    0,    6,    7,  135,    8,    9,   10,  169,   12,
   13,    4,    0,  134,   16,    0,   14,    6,    7,  135,
    8,    9,   10,   11,   12,   13,    0,    0,    0,   16,
    0,   14,    4,    0,  134,   77,    0,    0,    6,    7,
  135,    8,    9,   10,   11,   12,   13,  167,    0,  298,
   16,  160,   14,    6,    7,  135,    8,    9,   10,  169,
   12,   13,    0,    0,    0,   16,    0,   14,    0,  167,
    0,  298,    0,    0,    0,    6,    7,  135,    8,    9,
   10,  169,   12,   13,  167,    0,  298,   16,    0,   14,
    6,    7,  135,    8,    9,   10,  169,   12,   13,  240,
    0,    0,    0,  203,   14,  203,  167,  203,  298,    0,
    0,    0,    6,    7,  135,    8,    9,   10,  169,   12,
   13,  203,  203,  203,  203,    0,   14,    0,   16,    4,
    0,    5,    0,  272,    0,    6,    7,    0,    8,    9,
   10,   11,   12,   13,  202,    0,  202,    0,  202,   14,
  326,    0,    0,    0,    0,    0,  133,    0,    0,    0,
    0,    0,  202,  202,  202,  202,    0,    4,    0,    5,
   16,    0,  318,    6,    7,    0,    8,    9,   10,   11,
   12,   13,    0,    4,    0,    5,    0,   14,    0,    6,
    7,    0,    8,    9,   10,   11,   12,   13,  167,    0,
  168,    0,    0,   14,    6,    7,  135,    8,    9,   10,
  169,   12,   13,  320,    4,    0,  134,    0,   14,    0,
    6,    7,  135,    8,    9,   10,   11,   12,   13,    0,
    0,    4,    0,    5,   14,    0,  361,    6,    7,  133,
    8,    9,   10,   11,   12,   13,    4,    0,    5,    0,
    0,   14,    6,    7,    0,    8,    9,   10,   11,   12,
   13,    0,    0,    0,    0,    0,   14,    4,    0,    5,
    0,    0,    0,    6,    7,    0,    8,    9,   10,   11,
   12,   13,    4,    0,    5,    0,    0,   14,    6,    7,
    0,    8,    9,   10,   11,   12,   13,  395,    0,    0,
    0,    0,   14,    0,  200,    0,    5,    0,    0,    0,
    6,    0,    0,    8,    0,    0,   11,   12,  203,    0,
    0,    0,  203,  203,    0,    0,  405,  407,    0,    0,
    0,    0,    0,    0,    0,  203,  203,  203,    0,    0,
    0,  361,    0,  361,    0,  200,    0,    5,    0,    0,
    0,    6,  395,  395,    8,    0,    0,   11,   12,  202,
    0,    0,    0,  202,  202,    0,    0,    0,    0,    0,
    0,    0,    0,  133,    0,  133,  202,  202,  202,  133,
    0,    0,  133,    0,    0,  133,  133,  200,    0,    5,
    0,    0,    0,    6,    0,    0,    8,    0,    0,   11,
   12,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          3,
   41,   40,  136,   41,   40,   18,   63,   39,   44,   40,
   45,   15,   40,   44,   18,   41,   15,   61,   64,   61,
   10,   40,   58,   64,   41,   61,   59,   58,  220,   40,
   61,   40,   72,    0,   41,   85,   41,   94,   43,   58,
   45,   41,   61,   43,   85,   45,   43,   58,   45,  134,
   61,  243,  256,   40,   59,   85,   46,   40,  262,   59,
  300,   74,   45,   60,   61,   62,   40,   44,   44,   59,
   74,  109,   76,   43,  257,   45,   58,   76,   43,   61,
   45,   85,   59,  168,  328,  272,  330,  119,  120,  223,
  136,  137,   60,   61,   62,  136,  137,  135,   43,  257,
   45,  256,   58,  116,  117,   61,   59,  262,   41,  267,
   40,   44,  169,  271,   59,   45,   59,  357,  158,   58,
   59,   40,   62,  267,  257,  182,   45,  271,  178,  186,
   70,   42,   59,   64,   40,   59,   47,  178,  404,   45,
  406,  187,  276,  277,   59,   59,  187,   40,  178,  162,
   59,  123,  184,  256,   85,  256,  123,   55,  162,  262,
  400,  262,  256,   59,   59,  256,  358,  256,  262,  256,
   59,  262,  261,  219,  178,  262,  256,  223,  219,  256,
   45,  256,  223,  221,   40,  262,   84,  244,  201,   41,
  203,   59,   44,   41,  328,   43,  330,   45,   41,  260,
  261,   44,  260,  261,  245,  136,  137,   40,   40,  255,
  123,  258,  216,  298,  255,  260,  261,  216,   59,  256,
   41,  257,  257,  258,  257,  269,  257,  269,   59,  257,
  276,  277,  125,  272,  269,  276,  277,  371,  372,  256,
  276,  245,  292,  293,  256,  276,  272,  178,  257,  262,
  263,  292,  293,  260,  261,  287,  187,  276,  299,  300,
  273,   41,  292,  293,   64,  276,  312,  313,  272,  273,
  257,  312,  313,  272,  257,  258,  273,  274,  275,  256,
  257,  257,  328,  257,  330,   85,  257,  328,  219,  330,
  347,  123,  223,  258,  276,  299,  300,   40,   45,  349,
  256,  351,  258,  256,  342,  273,  274,  275,  349,   59,
  351,  256,  325,  256,  245,  213,  357,  256,  257,  360,
  276,  325,  260,  261,  255,  371,  372,  257,  258,  256,
  371,  372,  256,   40,  384,  385,  136,  137,  257,  258,
   59,  256,  256,  384,  385,  276,  277,  256,  389,  390,
  196,  257,  258,  357,  384,  385,  360,   40,  257,  400,
  256,  292,  293,  404,  257,  406,  259,  256,  299,  300,
  263,  269,  265,  266,  415,  416,  269,  270,  178,  256,
  123,  312,  313,  256,   64,  389,  390,  187,  256,   42,
   43,  256,   45,  258,   47,  256,  400,  328,   40,  330,
  404,  257,  406,  259,   44,   85,   59,  263,   40,  265,
  266,  415,  416,  269,  270,  256,  123,  258,  349,  219,
  351,  256,   41,  223,   40,  257,  357,  259,   41,  360,
   59,  263,  278,  265,  266,   40,   41,  269,  270,  262,
  371,  372,  125,  261,  256,  245,  256,    4,  294,  257,
   41,  260,   61,  384,  385,  255,  136,  137,  389,  390,
  258,   41,  256,  256,  256,   22,  257,  256,  256,  400,
   59,   40,   41,  404,  257,  406,  276,  277,   35,  256,
   37,  256,  256,  220,  415,  416,  125,   59,  258,  256,
   58,  123,  292,  293,   64,   59,   59,   59,  178,  299,
  300,   59,  258,   59,   41,   41,  243,  187,  256,   59,
  257,  258,  312,  313,  257,   85,  259,  256,  123,   59,
  263,  256,  265,  266,  256,  256,  269,  270,  328,  256,
  330,   40,  256,   85,   41,  256,  256,   41,  256,  219,
   40,   41,  279,  223,  256,  391,  256,  256,  256,  349,
  257,  351,  259,  258,  123,  256,  263,  357,  295,  266,
  360,  256,  269,  270,   59,  245,  136,  137,    0,   41,
   41,  371,  372,  203,  257,  255,  259,  125,  256,  123,
  263,  241,  265,  266,  384,  385,  269,  270,  213,  389,
  390,   84,  351,  111,  114,  279,  276,  277,  295,   59,
  400,  215,  392,  256,  404,  229,  406,  288,  178,   -1,
  167,  110,  292,  293,   -1,  415,  416,  187,   -1,  299,
  300,  358,   -1,  123,   -1,  257,  178,  259,   -1,   -1,
   -1,  263,  312,  313,  266,   -1,  137,  269,  270,   -1,
   -1,   -1,   40,   -1,   -1,   -1,   -1,   -1,  328,  219,
  330,   -1,  257,  223,  259,  392,   -1,   -1,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   40,   -1,  349,
   -1,  351,  277,   -1,   -1,  245,   -1,  357,   -1,   -1,
  360,   -1,   -1,   -1,   -1,  255,  187,   -1,  257,   40,
  259,  371,  372,  245,  263,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,  384,  385,  276,  277,  277,  389,
  390,   40,   -1,   -1,   -1,   -1,   -1,   -1,  219,   -1,
  400,   -1,  292,  293,  404,  123,  406,   40,   -1,  299,
  300,   -1,   -1,   -1,   -1,  415,  416,   -1,   -1,   -1,
  292,  293,  312,  313,   40,   -1,   -1,  299,  300,   -1,
   -1,   -1,  125,   -1,  255,   -1,   -1,  257,  328,  259,
  330,   -1,   -1,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  123,   40,   -1,   -1,   -1,  277,   -1,  349,
   -1,  351,   -1,   -1,   -1,   -1,   -1,  357,   -1,   40,
  360,   -1,   -1,   -1,  123,   -1,   -1,  349,   -1,  351,
   -1,  371,  372,   -1,   40,  357,   -1,   -1,  360,   -1,
   -1,  312,  313,   -1,  384,  385,   -1,   -1,   -1,  389,
  390,   -1,   -1,   -1,   -1,   40,   -1,  123,   -1,   -1,
  400,   -1,  384,  385,  404,   -1,  406,  389,  390,   -1,
   40,   -1,   -1,   -1,   -1,  415,  416,   -1,  400,   -1,
   -1,   -1,  404,   -1,  406,   -1,   -1,   -1,  125,  257,
   -1,  259,   40,  415,  416,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  125,   -1,   -1,   40,   -1,  277,
   -1,   -1,   -1,   -1,  257,   -1,  259,   -1,   -1,  125,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   40,
   -1,   -1,   -1,   -1,  277,   -1,  257,   -1,  259,   -1,
  125,   -1,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   -1,   40,  123,   -1,   -1,  277,   -1,  257,   -1,
  259,   -1,   -1,   -1,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  256,  257,  123,  259,   -1,  277,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   40,  257,  125,  259,  277,   -1,   -1,  263,  264,  265,
  266,  267,  268,  269,  270,  271,   40,   -1,   -1,   -1,
   -1,  277,   -1,   -1,  125,   -1,   -1,   -1,   -1,  256,
  257,   40,  259,   -1,   -1,   -1,  263,  264,   -1,  266,
  267,  268,  269,  270,  271,  123,  257,   40,  259,   -1,
  277,   -1,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  257,   -1,  259,   40,   -1,  277,  263,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,   40,
   -1,  277,  257,   -1,  259,  125,   -1,   -1,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  257,   -1,  259,
   40,  125,  277,  263,  264,  265,  266,  267,  268,  269,
  270,  271,   -1,   -1,   -1,   40,   -1,  277,   -1,  257,
   -1,  259,   -1,   -1,   -1,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  257,   -1,  259,   40,   -1,  277,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  125,
   -1,   -1,   -1,   41,  277,   43,  257,   45,  259,   -1,
   -1,   -1,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   59,   60,   61,   62,   -1,  277,   -1,   40,  257,
   -1,  259,   -1,  123,   -1,  263,  264,   -1,  266,  267,
  268,  269,  270,  271,   41,   -1,   43,   -1,   45,  277,
  125,   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,   -1,
   -1,   -1,   59,   60,   61,   62,   -1,  257,   -1,  259,
   40,   -1,  125,  263,  264,   -1,  266,  267,  268,  269,
  270,  271,   -1,  257,   -1,  259,   -1,  277,   -1,  263,
  264,   -1,  266,  267,  268,  269,  270,  271,  257,   -1,
  259,   -1,   -1,  277,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  125,  257,   -1,  259,   -1,  277,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,  257,   -1,  259,  277,   -1,  299,  263,  264,  123,
  266,  267,  268,  269,  270,  271,  257,   -1,  259,   -1,
   -1,  277,  263,  264,   -1,  266,  267,  268,  269,  270,
  271,   -1,   -1,   -1,   -1,   -1,  277,  257,   -1,  259,
   -1,   -1,   -1,  263,  264,   -1,  266,  267,  268,  269,
  270,  271,  257,   -1,  259,   -1,   -1,  277,  263,  264,
   -1,  266,  267,  268,  269,  270,  271,  360,   -1,   -1,
   -1,   -1,  277,   -1,  257,   -1,  259,   -1,   -1,   -1,
  263,   -1,   -1,  266,   -1,   -1,  269,  270,  256,   -1,
   -1,   -1,  260,  261,   -1,   -1,  389,  390,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,  274,  275,   -1,   -1,
   -1,  404,   -1,  406,   -1,  257,   -1,  259,   -1,   -1,
   -1,  263,  415,  416,  266,   -1,   -1,  269,  270,  256,
   -1,   -1,   -1,  260,  261,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,  259,  273,  274,  275,  263,
   -1,   -1,  266,   -1,   -1,  269,  270,  257,   -1,  259,
   -1,   -1,   -1,  263,   -1,   -1,  266,   -1,   -1,  269,
  270,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=277;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"id","cte","If","then","Else","end_if","out",
"fun","Return","BREAK","i32","when","For","CONTINUE","f32","cadena",
"menorigual","mayorigual","distinto","opasignacion","Const",
};
final static String yyrule[] = {
"$accept : programa",
"programa : encabezado_prog bloque_sentencias",
"encabezado_prog : id",
"bloque_sentencias : bloque_sentencias '{' sentencia '}'",
"bloque_sentencias : '{' sentencia '}'",
"bloque_sentencias : '{' sentencia",
"bloque_sentencias : sentencia '}'",
"declaracion_const : Const lista_de_asignacion_const ';'",
"declaracion_const : Const lista_de_asignacion_const error",
"declaracion_const : Const ';' error",
"lista_de_asignacion_const : decl_const",
"lista_de_asignacion_const : lista_de_asignacion_const ',' decl_const",
"lista_de_asignacion_const : lista_de_asignacion_const decl_const error",
"decl_const : id op_asignacion cte",
"decl_const : id op_asignacion '-' cte",
"decl_const : id op_asignacion error",
"decl_const : id cte error",
"decl_const : id error",
"bloq_sentencias_For : sentencias_For",
"bloq_sentencias_For : bloq_sentencias_For sentencias_For",
"sentencia : declarativas",
"sentencia : ejecutables",
"sentencia : sentencia declarativas",
"sentencia : sentencia ejecutables",
"declarativas : tipo lista_de_variables ';'",
"declarativas : lista_de_variables ';' error",
"declarativas : tipo lista_de_variables error",
"declarativas : declaracion_func",
"declarativas : declaracion_const",
"declarativas : sentencia_when",
"bloque_ejecutables : bloque_ejecutables ejecutables",
"bloque_ejecutables : ejecutables",
"ejecutables : asignacion",
"ejecutables : salida",
"ejecutables : sentencia_If",
"ejecutables : encabezado_For",
"ejecutables : invocacion_funcion",
"ejecutables : sentencia_BREAK error",
"ejecutables : sentencia_CONTINUE error",
"lista_de_variables : id lista_de_variables",
"lista_de_variables : id ',' lista_de_variables",
"lista_de_variables : id",
"parametro : tipo id",
"parametro : id error",
"asig_fun : ':' tipo",
"asig_fun :",
"cola_func : '{' cuerpo_fun '}'",
"lista_parametros :",
"lista_parametros : parametro",
"lista_parametros : lista_parametros ',' parametro",
"nombre_funcion : fun id",
"encab_fun : nombre_funcion '(' lista_parametros ')' asig_fun",
"encab_fun : fun '(' lista_parametros ')' asig_fun error",
"declaracion_func : encab_fun cola_func",
"ret_fun : Return '(' expresion ')' ';'",
"ret_fun : Return expresion ')' ';' error",
"ret_fun : Return '(' expresion ';' error",
"ret_fun : Return expresion ';' error",
"ret_fun : Return '(' expresion ')' error",
"cuerpo_fun : bloque_sentencias_funcion",
"ejecutables_funcion : asignacion",
"ejecutables_funcion : sentencia_if_funcion",
"ejecutables_funcion : salida",
"ejecutables_funcion : invocacion_funcion",
"ejecutables_funcion : sentencia_for_funcion",
"ejecutables_funcion : ret_fun",
"ejecutables_funcion : sentencia_BREAK error",
"ejecutables_funcion : sentencia_CONTINUE error",
"bloq_ejecutables_fun : bloq_ejecutables_fun ejecutables_funcion",
"bloq_ejecutables_fun : ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion declarativas",
"bloque_sentencias_funcion : ejecutables_funcion",
"bloque_sentencias_funcion : declarativas",
"op_asignacion : opasignacion",
"op_asignacion : ':' '=' error",
"op_asignacion : '=' error",
"asignacion : id op_asignacion expresion ';'",
"asignacion : id op_asignacion expresion error",
"asignacion : id op_asignacion for_else_cte",
"asignacion : id op_asignacion invocacion_funcion",
"for_else_cte : encab_For Else cte ';'",
"for_else_cte : encab_For error",
"salida : out '(' cadena ')' ';'",
"salida : out '(' cadena ')' error",
"salida : out '(' cadena error ';'",
"salida : out cadena error ';'",
"salida : '(' cadena error",
"salida : out '(' ')' error ';'",
"sentencia_If : If condicion_if cuerpo_If PR_end_if ';'",
"sentencia_If : If condicion_if then cuerpo_If PR_end_if error",
"sentencia_If : If condicion_if then cuerpo_If error",
"condicion_if : '(' expresion_relacional ')'",
"condicion_if : expresion_relacional ')'",
"condicion_if : '(' expresion_relacional",
"condicion_if : expresion_relacional",
"cuerpo_If : cuerpo_Then cuerpo_Else",
"cuerpo_If : cuerpo_Then",
"cuerpo_If : cuerpo_Else",
"cuerpo_Then : PR_then '{' bloque_ejecutables '}'",
"cuerpo_Then : PR_then ejecutables",
"cuerpo_Else : PR_else '{' bloque_ejecutables '}'",
"cuerpo_Else : PR_else ejecutables",
"sentencia_if_for : If condicion_if cuerpo_If_for PR_end_if ';'",
"sentencia_if_for : If condicion_if cuerpo_If_for PR_end_if error",
"sentencia_if_for : If condicion_if cuerpo_If_for error",
"cuerpo_If_for : cuerpo_then_for cuerpo_Else_for",
"cuerpo_If_for : cuerpo_then_for",
"cuerpo_If_for : cuerpo_Else_for error",
"cuerpo_then_for : PR_then '{' bloq_sentencias_For '}'",
"cuerpo_then_for : PR_then sentencias_For",
"cuerpo_Else_for : PR_else '{' bloq_sentencias_For '}'",
"cuerpo_Else_for : PR_else sentencias_For",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion PR_end_if ';'",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion PR_end_if error",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion error",
"cuerpo_If_funcion : cuerpo_then_funcion cuerpo_Else_funcion",
"cuerpo_If_funcion : cuerpo_then_funcion",
"cuerpo_If_funcion : cuerpo_Else_funcion error",
"cuerpo_then_funcion : PR_then '{' bloq_ejecutables_fun '}'",
"cuerpo_then_funcion : PR_then ejecutables_funcion",
"cuerpo_Else_funcion : PR_else '{' bloq_ejecutables_fun '}'",
"cuerpo_Else_funcion : PR_else ejecutables_funcion",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun PR_end_if ';'",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun PR_end_if error",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun error",
"cuerpo_If_for_fun : then_if_for_fun else_if_for_fun",
"cuerpo_If_for_fun : then_if_for_fun",
"cuerpo_If_for_fun : else_if_for_fun error",
"then_if_for_fun : PR_then '{' bloq_for_funcion '}'",
"then_if_for_fun : PR_then sentencias_For_funcion",
"else_if_for_fun : PR_else '{' bloq_for_funcion '}'",
"else_if_for_fun : PR_else sentencias_For_funcion",
"PR_then : then",
"PR_else : Else",
"PR_end_if : end_if",
"sentencia_when : when '(' condicion_when ')' cuerpo_when ';'",
"sentencia_when : when condicion_when ')' cuerpo_when ';' error",
"sentencia_when : when '(' condicion_when ')' cuerpo_when error",
"condicion_when : expresion_relacional",
"cuerpo_when : then '{' sentencia '}'",
"cuerpo_when : then '{' sentencia error",
"cuerpo_when : then sentencia '}' error",
"encabezado_For : For '(' detalles_for ')' cola_For",
"encabezado_For : For detalles_for ')' cola_For error",
"encabezado_For : For detalles_for cola_For error",
"encabezado_For : id ':' For '(' detalles_for ')' cola_For",
"encab_For : For '(' detalles_for ')' cola_For",
"encab_For : For detalles_for ')' cola_For error",
"encab_For : For detalles_for cola_For error",
"detalles_for : asignacion_for ';' cond_op_for",
"cond_op_for : condicion_for ';' operacion_for",
"condicion_for : id comparador factor",
"condicion_for : id comparador '(' expresion ')'",
"cola_For : '{' bloq_sentencias_For '}' ';'",
"cola_For : sentencias_For",
"cola_For : '{' bloq_sentencias_For '}' error",
"signo : '+'",
"signo : '-'",
"sentencias_For : asignacion",
"sentencias_For : salida",
"sentencias_For : encabezado_For",
"sentencias_For : sentencia_if_for",
"sentencias_For : invocacion_funcion",
"sentencias_For : sentencia_BREAK",
"sentencias_For : sentencia_CONTINUE",
"sentencias_For : declarativas error",
"sentencias_For : ret_fun error",
"cola_For_funcion : '{' bloq_for_funcion '}' ';'",
"cola_For_funcion : sentencias_For_funcion",
"cola_For_funcion : '{' bloq_for_funcion '}' error",
"sentencia_for_funcion : For '(' detalles_for ')' cola_For_funcion",
"sentencia_for_funcion : For detalles_for ')' cola_For_funcion error",
"sentencia_for_funcion : For detalles_for cola_For_funcion error",
"sentencia_for_funcion : id ':' For '(' detalles_for ')' cola_For_funcion",
"asignacion_for : id op_asignacion cte",
"operacion_for : signo cte",
"operacion_for : cte error",
"sentencias_For_funcion : asignacion",
"sentencias_For_funcion : salida",
"sentencias_For_funcion : sentencia_for_funcion",
"sentencias_For_funcion : ret_fun",
"sentencias_For_funcion : invocacion_funcion",
"sentencias_For_funcion : sentencia_BREAK",
"sentencias_For_funcion : sentencia_CONTINUE",
"sentencias_For_funcion : sentencia_if_for_fun",
"sentencias_For_funcion : declarativas error",
"bloq_for_funcion : sentencias_For_funcion",
"bloq_for_funcion : bloq_for_funcion sentencias_For_funcion",
"bloq_for_funcion : error",
"sentencia_BREAK : BREAK ';'",
"sentencia_BREAK : BREAK cte ';'",
"sentencia_BREAK : BREAK error",
"sentencia_CONTINUE : CONTINUE ';'",
"sentencia_CONTINUE : CONTINUE ':' id ';'",
"sentencia_CONTINUE : CONTINUE id ';' error",
"sentencia_CONTINUE : CONTINUE error",
"invocacion_funcion : id '(' list_parametros_Inv ')' ';'",
"list_parametros_Inv :",
"list_parametros_Inv : factor ',' factor",
"list_parametros_Inv : factor",
"expresion_relacional : expresion comparador expresion",
"expresion : expresion signo termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : id",
"factor : cte",
"factor : '-' cte",
"comparador : '<'",
"comparador : '>'",
"comparador : menorigual",
"comparador : mayorigual",
"comparador : '='",
"comparador : distinto",
"tipo : i32",
"tipo : f32",
};

//#line 932 "gramatica.y"

private AnalizadorLexico lexico;
private AnalizadorSintactico sintactico;
private String ambito;
private int contadorFor;
private int contadorIf;
private int contadorWhen;
private int contadorParam;
private String tipoBreak = new String();
private Stack<Integer> variablesFor;
private Stack<Integer> declaracionFunc;


public void activarAmbito(){this.ambito = "$"; this.contadorFor = 0; this.contadorIf = 0; this.contadorWhen = 0; variablesFor = new Stack<Integer>(); this.declaracionFunc = new Stack<Integer>();} // $ va a simblizar el ambito global.

public void setLexico(AnalizadorLexico lexico) { this.lexico = lexico; }

public void setSintactico(AnalizadorSintactico sintactico) { this.sintactico = sintactico; }

public AnalizadorLexico getLexico() { return this.lexico; }

public AnalizadorSintactico getSintactico() { return this.sintactico; }

public void agregarAmbito(String nuevo) {

	this.ambito = this.ambito + "_" + nuevo;

}

    public String tipoResultante(String tipo1, String tipo2, String op){

        if (tipo1 != null && tipo2 != null ) {
            if(tipo1.equals(tipo2)){
                return tipo1;
            }
            sintactico.addErrorSintactico("SemanticError."+" (Línea " + AnalizadorLexico.LINEA + ")" + " LOS TIPOS NO COINCIDEN - OPERACION: " + op );
        }
        return null;
    }

public String borrarAmbito(String ambito){
	if (ambito.length() > 1) { // si es 1 solo tiene el ambito global
		String [] aux = ambito.split("_"); // separo los elementos individuales del ambito
		String last = aux[aux.length - 1 ]; // obtengo el ultimo, el que tengo que eliminar
		return ambito.substring(0, ambito.length() - last.length() - 1);
	}
	return "$";
}

public int yylex() {
    int token = lexico.procesarYylex();
    if (lexico.getRefTablaSimbolos() != -1)
        yylval = new ParserVal(lexico.getRefTablaSimbolos());
    return token;
}

public void yyerror(String string) {
	//sintactico.addErrorSintactico("par: " + string);
}

// retorna -1 si no existe un identificador con el lexema dado en el ambito dado. Si existe, retorna el indice de la entrada existente.
public int enAmbito(ParserVal pv){

	String lexema = sintactico.getEntradaTablaSimb(pv.ival).getLexema();
	String ambitoAux = this.ambito;

	String [] aux = ambitoAux.split("_");
	for (int i = 0 ; i < aux.length ; i++){
		int existente = sintactico.getTS().existeEntrada(lexema + "@"+ambitoAux);
		if (existente >= 0 ){
			return existente;
		}
		ambitoAux = borrarAmbito(ambitoAux);
	}
	return -1;
}
//#line 938 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 21 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("raiz", val_peek(0))); sintactico.setRaiz(yyval); }
break;
case 2:
//#line 24 "gramatica.y"
{sintactico.setUsoEnIndex("program",val_peek(0).ival);}
break;
case 3:
//#line 27 "gramatica.y"
{yyval = val_peek(1);}
break;
case 4:
//#line 28 "gramatica.y"
{yyval = val_peek(1);}
break;
case 5:
//#line 29 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar el bloque.");}
break;
case 6:
//#line 30 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir el bloque.");}
break;
case 7:
//#line 33 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una declaración de CONSTANTE. (Línea " + AnalizadorLexico.LINEA + ")");
							  	  yyval = new ParserVal(sintactico.crearNodoControl("lista_ctes", val_peek(1)));}
break;
case 8:
//#line 35 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ; al final de la declaracion de constantes.");}
break;
case 9:
//#line 36 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): No se reconoce una lista de constantes.");}
break;
case 10:
//#line 39 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 11:
//#line 40 "gramatica.y"
{ParserVal modificado = sintactico.modificarHijo(val_peek(2), sintactico.crearNodo("sentencia", val_peek(0), null));
                                                                         yyval = modificado;}
break;
case 12:
//#line 42 "gramatica.y"
{{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): separar por coma la declaracion de constantes.");}}
break;
case 13:
//#line 46 "gramatica.y"
{
						int existente = enAmbito(val_peek(2));
						if (existente < 0) {
							int i = val_peek(2).ival;
							sintactico.setTipoEnIndex(sintactico.getTipoFromTS(val_peek(0).ival), i);
							String type = sintactico.getTipoFromTS(val_peek(0).ival);
                                                        if (type.equals("i32"))
                                                        	sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
														else
															sintactico.verificarRangoFlotante(val_peek(0).ival);
							sintactico.setUsoEnIndex("const", i);
							sintactico.setLexemaEnIndex(val_peek(2).ival, "@"+this.ambito);
							sintactico.setUsoEnIndex("cte",val_peek(0).ival);
							yyval = new ParserVal(sintactico.crearNodo("=:", new ParserVal(sintactico.crearHoja(val_peek(2).ival)), new ParserVal(sintactico.crearHoja(val_peek(0).ival))));
						} else {
							sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
						}

					}
break;
case 14:
//#line 65 "gramatica.y"
{
										int existente = enAmbito(val_peek(3));
											if (existente < 0) {
												int i = val_peek(3).ival;
												sintactico.setTipoEnIndex(sintactico.getTipoFromTS(val_peek(0).ival), i);
												sintactico.setNegativoTablaSimb(val_peek(0).ival);
												String type = sintactico.getTipoFromTS(val_peek(0).ival);
												if (type.equals("i32"))
													sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
												else
													sintactico.verificarRangoFlotante(val_peek(0).ival);
												sintactico.setUsoEnIndex("const", i);
												sintactico.setLexemaEnIndex(val_peek(3).ival, "@"+this.ambito);
												sintactico.setUsoEnIndex("cte neg",val_peek(0).ival);
												yyval = new ParserVal(sintactico.crearNodo("=:", new ParserVal(sintactico.crearHoja(val_peek(3).ival)), new ParserVal(sintactico.crearHoja(val_peek(0).ival))));
											} else {
												sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
											}
		   }
break;
case 15:
//#line 84 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta constante luego de la asignacion.");}
break;
case 16:
//#line 85 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta el operador asignacion luego del identificador.");}
break;
case 17:
//#line 86 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta la asignacion luego del identificador.");}
break;
case 18:
//#line 90 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 19:
//#line 91 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 20:
//#line 94 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("declarativa", val_peek(0), null));}
break;
case 21:
//#line 95 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 22:
//#line 96 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("declarativa", val_peek(0), null));}
break;
case 23:
//#line 97 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 24:
//#line 101 "gramatica.y"
{
							String type = val_peek(2).sval;
						 	sintactico.completarConTipos(type);
						 	sintactico.addAnalisis("Se reconoció declaraciónes de variable de tipo " + type + ". (Línea " + AnalizadorLexico.LINEA + ")");
						  }
break;
case 25:
//#line 106 "gramatica.y"
{
             						sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): falta el tipo de variable");
             					  	sintactico.addAnalisis("Se reconoció declaraciónes de variable SIN TIPO. (Línea " + (AnalizadorLexico.LINEA-1) + ")");
             					   	sintactico.vaciarListaVariables();
             					  }
break;
case 26:
//#line 111 "gramatica.y"
{
						sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): falta punto y coma");
						sintactico.addAnalisis("Se reconoció declaraciónes de variables. (Línea " + (AnalizadorLexico.LINEA-1) + ")");
						sintactico.vaciarListaVariables();
                           		}
break;
case 30:
//#line 122 "gramatica.y"
{
							ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
							yyval = modificado;
						     }
break;
case 31:
//#line 126 "gramatica.y"
{
							yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));
						     }
break;
case 37:
//#line 136 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 38:
//#line 137 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 39:
//#line 139 "gramatica.y"
{
							sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta una ',' entre identIficadores.");
						 	int existente = enAmbito(val_peek(1));
							if (existente < 0) {
								sintactico.setLexemaEnIndex(val_peek(1).ival, "@"+this.ambito);
								sintactico.addListaVariables(val_peek(1).ival);
								sintactico.setUsoEnIndex("var", val_peek(1).ival);
							} else {
								sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
							}
						}
break;
case 40:
//#line 150 "gramatica.y"
{
							int existente = enAmbito(val_peek(2));
							if (existente < 0) {
								sintactico.setLexemaEnIndex(val_peek(2).ival, "@"+this.ambito);

								sintactico.addListaVariables(val_peek(2).ival);
								sintactico.setUsoEnIndex("var", val_peek(2).ival);
							} else {
								sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
							}
						  }
break;
case 41:
//#line 161 "gramatica.y"
{
                   					int existente = enAmbito(val_peek(0));
                   					if (existente < 0) {
                   						sintactico.setLexemaEnIndex(val_peek(0).ival, "@"+this.ambito);

                   						sintactico.addListaVariables(val_peek(0).ival);
							    	sintactico.setUsoEnIndex("var", val_peek(0).ival);
                   					} else {
                   						sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
                   					}
                   				  }
break;
case 42:
//#line 176 "gramatica.y"
{	this.contadorParam++;
				int existente = enAmbito(val_peek(0));
				if (existente < 0) {
					sintactico.setTipoEnIndex(val_peek(1).sval, val_peek(0).ival);
					sintactico.setLexemaEnIndex(val_peek(0).ival, "@"+this.ambito);
					String lexFuncion = sintactico.getEntradaTablaSimb(this.declaracionFunc.peek()).getLexema().split("@")[0];
					sintactico.setUsoEnIndex("param@"+this.ambito, val_peek(0).ival);

					sintactico.addListaVariables(val_peek(0).ival);

				} else {
					sintactico.addErrorSintactico("SemanticError. ENC_FUN/PARAMS (Línea " + AnalizadorLexico.LINEA + "): el identificador ya ha sido utilizado.");
				}
				if (this.contadorParam > 2) {
					sintactico.addErrorSintactico("SemanticError. (Linea " + AnalizadorLexico.LINEA + "): no se permiten mas de dos parametros por funcion");
				}
			}
break;
case 43:
//#line 194 "gramatica.y"
{ sintactico.addErrorSintactico("SemanticError. PARAM(Línea " + AnalizadorLexico.LINEA + "): falta TIPO en parametros."); }
break;
case 44:
//#line 197 "gramatica.y"
{
				if (!this.declaracionFunc.isEmpty()){
				sintactico.setTipoGlobal(val_peek(0).sval);
				sintactico.setTipoEnIndex(sintactico.getTipo(), this.declaracionFunc.peek());
			}}
break;
case 45:
//#line 202 "gramatica.y"
{
				sintactico.addErrorSintactico("SemanticError. ENCAB_FUN(Línea " + AnalizadorLexico.LINEA + "): falta tipo de funcion ");
	 	 		sintactico.addAnalisis("Se reconoce declaracion de funcion pero falta tipo (Línea " + AnalizadorLexico.LINEA + ")");
			}
break;
case 46:
//#line 208 "gramatica.y"
{
					sintactico.addAnalisis("Se reconoce cuerpo de funcion (Línea " + AnalizadorLexico.LINEA + ")");
					this.ambito = borrarAmbito(this.ambito);
					sintactico.clearTipo();
 					yyval = val_peek(1);
 				}
break;
case 50:
//#line 221 "gramatica.y"
{
				String lexema = sintactico.getEntradaTablaSimb(val_peek(0).ival).getLexema();
				this.contadorParam = 0;

				int existente = enAmbito(val_peek(0));
				if (existente < 0) { /* no existe el id en el ambito*/
					this.declaracionFunc.push(val_peek(0).ival);

					sintactico.setLexemaEnIndex(val_peek(0).ival, "@"+this.ambito);
					sintactico.setUsoEnIndex("func", val_peek(0).ival);
					agregarAmbito(lexema);
					sintactico.setUsoParam(sintactico.getEntradaTablaSimb(val_peek(0).ival).getLexema());

					yyval = new ParserVal(val_peek(0).ival);

				} else {
					sintactico.addErrorSintactico("SematicError. ENC_FUN (Línea " + AnalizadorLexico.LINEA + "): el identificador ya ha sido utilizado.");
				}
			}
break;
case 51:
//#line 242 "gramatica.y"
{
								sintactico.addAnalisis( "Se reconocio declaracion de funcion (Línea " + AnalizadorLexico.LINEA + ")" );
								sintactico.vaciarListaVariables();
								yyval = val_peek(4);


							}
break;
case 52:
//#line 249 "gramatica.y"
{
	 								sintactico.addAnalisis("Se reconoce declaracion de funcion pero falta identificacion (Línea " + AnalizadorLexico.LINEA + ")");
							   		sintactico.addErrorSintactico("SemanticError. ENC_FUN (Línea " + AnalizadorLexico.LINEA + "): funcion sin identificar.");
								}
break;
case 53:
//#line 255 "gramatica.y"
{
						Token t = sintactico.getEntradaTablaSimb(val_peek(1).ival);
						Nodo n = sintactico.crearNodoControl(t.getLexema(), val_peek(0));
						n.setTipo(t.getTipo());
						sintactico.agregarArbolFuncion(new ParserVal(n),t.getLexema());
						sintactico.clearTipo();
					}
break;
case 54:
//#line 265 "gramatica.y"
{ if (!this.declaracionFunc.isEmpty()){
								sintactico.addAnalisis("Se reconoce retorno de funcion(Línea " + AnalizadorLexico.LINEA + ") ");
								  sintactico.checkRetorno(val_peek(2), sintactico.getEntradaTablaSimb(this.declaracionFunc.peek()).getTipo());
								  Nodo nodoRetorno = sintactico.crearNodoControl("return",val_peek(2));
								  Nodo n = (Nodo) val_peek(2).obj;
								  nodoRetorno.setTipo(n.getTipo());
								  yyval = new ParserVal(nodoRetorno);}}
break;
case 55:
//#line 272 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN1 (Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 56:
//#line 273 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN2(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 57:
//#line 274 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN3(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 58:
//#line 275 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN4(Línea " + AnalizadorLexico.LINEA + "): falta ; "); }
break;
case 59:
//#line 278 "gramatica.y"
{if(!this.declaracionFunc.isEmpty()){this.declaracionFunc.pop();}}
break;
case 66:
//#line 287 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 67:
//#line 288 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 68:
//#line 292 "gramatica.y"
{
									ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
									yyval = modificado;
								}
break;
case 69:
//#line 296 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 70:
//#line 299 "gramatica.y"
{
											ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
											yyval = modificado;
										}
break;
case 71:
//#line 303 "gramatica.y"
{
										ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("declarativa", val_peek(0), null));
										yyval = modificado;
									}
break;
case 72:
//#line 307 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 73:
//#line 308 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("declarativa", val_peek(0), null));}
break;
case 74:
//#line 313 "gramatica.y"
{ yyval.sval = new String("=:"); }
break;
case 75:
//#line 314 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP1(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 76:
//#line 315 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 77:
//#line 319 "gramatica.y"
{
							int existente = enAmbito(val_peek(3));

							if (existente >= 0) {
								Nodo op2 = (Nodo) val_peek(1).obj;
								String typeOP2 = op2.getTipo();
								String typeOP1 = sintactico.getTipoFromTS(existente);
								ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
								Nodo asignacion = sintactico.crearNodo("=:", identificador , val_peek(1));

								if (typeOP1.equals(typeOP2)) {
									asignacion.setTipo(typeOP1);
								}
								else {
									sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): no se puede realizar una asignacion de diferentes tipos.");
								}
								yyval = new ParserVal(asignacion);
                                                                sintactico.eliminarEntrada(val_peek(3).ival);


							} else {
								sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): variable no declarada.");
							}
					  	}
break;
case 78:
//#line 344 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP(Línea " + (AnalizadorLexico.LINEA) + "): falta ';' luego de la ASIG."); }
break;
case 79:
//#line 346 "gramatica.y"
{
						tipoBreak = null;
           					int existente = enAmbito(val_peek(2));
						if (existente >= 0) {
							ParserVal id = new ParserVal(sintactico.crearHoja(existente));
							Nodo asignacion = sintactico.crearNodo("=:", id , val_peek(0));
								asignacion.setTipo(tipoResultante( asignacion.getHijoIzquierdo().getTipo(), asignacion.getHijoDerecho().getTipo(), "asignacion" ));
							yyval = new ParserVal(asignacion);
							sintactico.eliminarEntrada(val_peek(2).ival);
						} else {
							sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): variable no declarada.");
							}

						}
break;
case 80:
//#line 360 "gramatica.y"
{
	   						int existente = enAmbito(val_peek(2));
							if (existente >= 0) {
								ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
								Nodo asignacion = sintactico.crearNodo("=:", identificador , val_peek(0));
								if (asignacion.getHijoDerecho() != null) {
									asignacion.setTipo(tipoResultante( asignacion.getHijoIzquierdo().getTipo(), asignacion.getHijoDerecho().getTipo(), "asignacion" ));
									yyval = new ParserVal(asignacion);
								}
								sintactico.eliminarEntrada(val_peek(2).ival);

							} else {
								sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): variable no declarada.");
							}
						 }
break;
case 81:
//#line 378 "gramatica.y"
{

					Nodo for_else = sintactico.crearNodo("for_else", val_peek(3), new ParserVal(sintactico.crearHoja(val_peek(1).ival)));
					String cteElse = sintactico.getTipoFromTS(val_peek(1).ival);
					sintactico.setUsoEnIndex("cte", val_peek(1).ival);
					for_else.setTipo(cteElse);
					yyval = new ParserVal(for_else);

					if (tipoBreak != null && !cteElse.equals(tipoBreak)) {
						sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "):  los tipos en el BREAK/ELSE del FOR no coinciden");
					}
					}
break;
case 82:
//#line 390 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): problema en devolver valor por defecto  ");}
break;
case 83:
//#line 393 "gramatica.y"
{
						sintactico.setUsoEnIndex("cadena",val_peek(2).ival);
						sintactico.addCadena(val_peek(2).ival);
						yyval = new ParserVal(sintactico.crearNodoControl("out", new ParserVal(sintactico.crearHoja(val_peek(2).ival))));}
break;
case 84:
//#line 397 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de la impresión de cadena."); }
break;
case 85:
//#line 398 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): cierre erróneo de la lista de parámetros de out."); }
break;
case 86:
//#line 399 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): los parámetros de out deben estar entre paréntesis."); }
break;
case 87:
//#line 400 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): se esperaba out, se encontró '('."); }
break;
case 88:
//#line 401 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta declarar una cadena para PRINT."); }
break;
case 89:
//#line 406 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));
									sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 90:
//#line 408 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 91:
//#line 409 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 92:
//#line 413 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("condicionIf",val_peek(1)));}
break;
case 93:
//#line 414 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 94:
//#line 415 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 95:
//#line 416 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 96:
//#line 420 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if", val_peek(1), val_peek(0)));}
break;
case 97:
//#line 421 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if", val_peek(0), null));}
break;
case 98:
//#line 422 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta bloque then."); }
break;
case 99:
//#line 426 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(1)));}
break;
case 100:
//#line 427 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(0)));}
break;
case 101:
//#line 431 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(1)));}
break;
case 102:
//#line 432 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(0)));}
break;
case 103:
//#line 435 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
								   yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));}
break;
case 104:
//#line 437 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 105:
//#line 438 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 106:
//#line 441 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(1),val_peek(0)));}
break;
case 107:
//#line 442 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(0),null));}
break;
case 108:
//#line 443 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 109:
//#line 446 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1)));}
break;
case 110:
//#line 447 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(0)));}
break;
case 111:
//#line 450 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(1)));}
break;
case 112:
//#line 451 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(0)));}
break;
case 113:
//#line 454 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
									   yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));}
break;
case 114:
//#line 456 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 115:
//#line 457 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 116:
//#line 460 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(1),val_peek(0)));}
break;
case 117:
//#line 461 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(0),null));}
break;
case 118:
//#line 462 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 119:
//#line 465 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1)));}
break;
case 120:
//#line 466 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(0)));}
break;
case 121:
//#line 469 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(1)));}
break;
case 122:
//#line 470 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(0)));}
break;
case 123:
//#line 473 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
									  yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));
									}
break;
case 124:
//#line 476 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 125:
//#line 477 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 126:
//#line 480 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(1),val_peek(0)));}
break;
case 127:
//#line 481 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo-if",val_peek(0),null));}
break;
case 128:
//#line 482 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 129:
//#line 485 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(1)));}
break;
case 130:
//#line 486 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(0)));}
break;
case 131:
//#line 489 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(1)));}
break;
case 132:
//#line 490 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(0)));}
break;
case 133:
//#line 492 "gramatica.y"
{this.contadorIf++; agregarAmbito("ifthen"+contadorIf);}
break;
case 134:
//#line 495 "gramatica.y"
{this.ambito = borrarAmbito(this.ambito); agregarAmbito("ifelse"+this.contadorIf);}
break;
case 135:
//#line 498 "gramatica.y"
{this.ambito = borrarAmbito(this.ambito);}
break;
case 136:
//#line 505 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia when");
								  yyval = new ParserVal(sintactico.crearNodo("when", val_peek(3), val_peek(1)));}
break;
case 137:
//#line 507 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta abrir paréntesis la condicion"); }
break;
case 138:
//#line 508 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta punto y coma pero se reconoce sentencia when."); }
break;
case 139:
//#line 511 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("condicionWhen",val_peek(0))); agregarAmbito("when"+this.contadorWhen); this.contadorWhen++;}
break;
case 140:
//#line 515 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1))); this.ambito = borrarAmbito(this.ambito); }
break;
case 141:
//#line 516 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar la llave del bloque."); }
break;
case 142:
//#line 517 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir la llave del bloque"); }
break;
case 143:
//#line 524 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")");
							  	yyval = new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)));
							  	this.ambito = borrarAmbito(this.ambito);
							}
break;
case 144:
//#line 528 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 145:
//#line 529 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 146:
//#line 530 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");

									int existente = sintactico.encontrarTag(val_peek(6).ival, this.ambito);
									if (existente >= 0) {
										if (sintactico.getEntradaTablaSimb(existente).getUso().equals("tag")) {
											ParserVal nodoTag = new ParserVal(sintactico.crearNodoControl("etiqueta", new ParserVal(sintactico.crearHoja(existente))));
											yyval = new ParserVal( sintactico.crearNodo("for-etiquetado", nodoTag , new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)))));
											sintactico.eliminarEntrada(val_peek(6).ival);
										} else {
											sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): el identificador utilizado no es una etiqueta.");
										}
									} else {
										sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): etiqueta invalida");
									}
									this.ambito = borrarAmbito(this.ambito);
								}
break;
case 147:
//#line 548 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")");
							 yyval = new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)));
							 this.ambito = borrarAmbito(this.ambito);
						}
break;
case 148:
//#line 552 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 149:
//#line 553 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 150:
//#line 557 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodo("encabezado for",val_peek(2), val_peek(0)));

						}
break;
case 151:
//#line 562 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("condicion y operacion for",  val_peek(2), val_peek(0)));}
break;
case 152:
//#line 566 "gramatica.y"
{
						int existente = enAmbito(val_peek(2));
						if (existente >= 0) {
							if (sintactico.getEntradaTablaSimb(existente).getUso().equals("for_var")) {
								String lexExistente = sintactico.getEntradaTablaSimb(existente).getLexema();
								String [] aux = lexExistente.split("@");

								String ambitoExistente = aux[1];

								if ( ambitoExistente.equals(this.ambito)) {
									sintactico.setUsoEnIndex("i32",val_peek(0).ival);
									Nodo op2 = (Nodo) val_peek(0).obj;
									String typeOP2 = op2.getTipo();
                                                                        String typeOP1 = sintactico.getTipoFromTS(existente);
                                                                        if (typeOP1.equals(typeOP2)) {
										ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
										ParserVal constante = new ParserVal(op2);
										Nodo comparacion = sintactico.crearNodo(val_peek(1).sval,identificador,constante);
                                                                                comparacion.setTipo("i32");
										yyval = new ParserVal(sintactico.crearNodoControl("condicionFor", new ParserVal(comparacion)));
										sintactico.eliminarEntrada(val_peek(2).ival);
									}else{
									sintactico.addErrorSintactico("SemanticError. se reconoce FOR pero hay un problema de tipos en la condicion " + AnalizadorLexico.LINEA);
									}
								} else {
									sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable utilizada no corresponde a este for loop");
								}
							} else {
								sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable utilizada en la condicion debe ser la declarada en el for loop.");
							}
						} else {
							sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable usada no ha sido declarada.");
						}
				     	}
break;
case 153:
//#line 600 "gramatica.y"
{
					int existente = enAmbito(val_peek(4));
					if (existente >= 0) {
						if (sintactico.getEntradaTablaSimb(existente).getUso().equals("for_var")) {
							String lexExistente = sintactico.getEntradaTablaSimb(existente).getLexema();
							String [] aux = lexExistente.split("@");

							String ambitoExistente = aux[1];

							if ( ambitoExistente.equals(this.ambito)) {
								/*sintactico.setUsoEnIndex("i32",$3.ival);*/
								Nodo op2 = (Nodo) val_peek(1).obj;
								String typeOP2 = op2.getTipo();
								String typeOP1 = sintactico.getTipoFromTS(existente);
								if (typeOP1.equals(typeOP2)) {

									ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
									ParserVal constante = new ParserVal(op2);
									Nodo comparacion = sintactico.crearNodo(val_peek(3).sval,identificador,constante);
									comparacion.setTipo("i32");
									yyval = new ParserVal(sintactico.crearNodoControl("condicionFor", new ParserVal(comparacion)));
									sintactico.eliminarEntrada(val_peek(4).ival);
								}else{
								sintactico.addErrorSintactico("SemanticError. se reconoce FOR pero hay un problema de tipos en la condicion " + AnalizadorLexico.LINEA);
								}
							} else {
								sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable utilizada no corresponde a este for loop");
							}
						} else {
							sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable utilizada en la condicion debe ser la declarada en el for loop.");
						}
					} else {
						sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable usada no ha sido declarada.");
					}
				}
break;
case 154:
//#line 637 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(2))); this.variablesFor.pop();}
break;
case 155:
//#line 638 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(0))); this.variablesFor.pop();}
break;
case 156:
//#line 639 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): Falta el ; al final del bloque del for");}
break;
case 157:
//#line 642 "gramatica.y"
{yyval.sval = new String("+");}
break;
case 158:
//#line 643 "gramatica.y"
{yyval.sval = new String("-");}
break;
case 166:
//#line 654 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 167:
//#line 655 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten retornos fuera de una funcion"); }
break;
case 168:
//#line 660 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(2)));}
break;
case 169:
//#line 661 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(0)));}
break;
case 170:
//#line 662 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): falta ; al final del bloque del for."); }
break;
case 171:
//#line 665 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")");
                        							yyval = new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)));
										this.ambito = borrarAmbito(this.ambito);
									}
break;
case 172:
//#line 669 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 173:
//#line 670 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 174:
//#line 671 "gramatica.y"
{
		       									sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");
											int existente = enAmbito(val_peek(6));
											if (existente >= 0) {
												if (sintactico.getEntradaTablaSimb(existente).getUso().equals("tag")) {
													yyval = new ParserVal( sintactico.crearNodo("for-etiquetado", new ParserVal(sintactico.crearHoja(existente)), new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)))));
													sintactico.eliminarEntrada(val_peek(6).ival);
												} else {
													sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): el identificador utilizado no es una etiqueta.");
												}
											} else {
												sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): etiqueta invalida");
											}
											this.ambito = borrarAmbito(this.ambito);
										}
break;
case 175:
//#line 690 "gramatica.y"
{
					agregarAmbito("for"+this.contadorFor);
					this.contadorFor++;
					int existente = enAmbito(val_peek(2));
					if (existente < 0){
						sintactico.setTipoEnIndex("i32", val_peek(2).ival);
						sintactico.setTipoEnIndex("i32", val_peek(0).ival);
						sintactico.setLexemaEnIndex(val_peek(2).ival, "@"+this.ambito);
						sintactico.setUsoEnIndex("for_var", val_peek(2).ival);
						this.variablesFor.push(val_peek(2).ival);
						ParserVal identificador = new ParserVal(sintactico.crearHoja(val_peek(2).ival));
						ParserVal constante = new ParserVal(sintactico.crearHoja(val_peek(0).ival));
						sintactico.setUsoEnIndex("cte",val_peek(0).ival);
						yyval = new ParserVal(sintactico.crearNodoControl("asignacionFor",new ParserVal(sintactico.crearNodo("=:",identificador,constante))));
					} else {
						sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): la variable utilizada para el for loop ya ha sido declarada.");
					}
				   }
break;
case 176:
//#line 710 "gramatica.y"
{
						String type = sintactico.getTipoFromTS(val_peek(0).ival);
						if (type.equals("i32")){
							ParserVal id = new ParserVal(sintactico.crearHoja(this.variablesFor.peek()));
							ParserVal cte = new ParserVal(sintactico.crearHoja(val_peek(0).ival));
							Nodo op = sintactico.crearNodo(val_peek(1).sval, id, cte);
							op.setTipo("i32");
							ParserVal ope = new ParserVal(op);
							ParserVal asig =  new ParserVal(sintactico.crearNodo("=:",id,ope));
							sintactico.setUsoEnIndex("cte",val_peek(0).ival);

							yyval = new ParserVal(sintactico.crearNodoControl("operacionFor", asig));
						} else {
						sintactico.addErrorSintactico("SemanicError. (Línea " + (AnalizadorLexico.LINEA) + ") no se permiten flotantes en el valor de incremento/decremento");
						}

					}
break;
case 177:
//#line 727 "gramatica.y"
{sintactico.addErrorSintactico("SemanticError. (Línea " + (AnalizadorLexico.LINEA) + "): Falta el signo en la operacion de incremento/decremento del for.");}
break;
case 186:
//#line 738 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 187:
//#line 742 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 188:
//#line 743 "gramatica.y"
{
									ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
									yyval = modificado;
								}
break;
case 189:
//#line 747 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): no se permiten cuerpos de for vacios.");}
break;
case 190:
//#line 752 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio una sentencia break (Línea " + AnalizadorLexico.LINEA + ")");
					yyval = new ParserVal(sintactico.crearNodoControl("break",null));}
break;
case 191:
//#line 754 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio una sentencia break con retorno de valor (Línea " + AnalizadorLexico.LINEA + ")");
                			yyval = new ParserVal(sintactico.crearNodoControl("breakValor", new ParserVal(sintactico.crearHoja(val_peek(1).ival))));
                			sintactico.setUsoEnIndex("cte",val_peek(1).ival);
                			tipoBreak = sintactico.getTipoFromTS(val_peek(1).ival);
                			}
break;
case 192:
//#line 760 "gramatica.y"
{	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de BREAK."); }
break;
case 193:
//#line 763 "gramatica.y"
{
							sintactico.addAnalisis("Se reconocio una sentencia continue (Línea " + AnalizadorLexico.LINEA + ")");
							yyval = new ParserVal(sintactico.crearNodoControl("continue",null));}
break;
case 194:
//#line 766 "gramatica.y"
{ 	sintactico.addAnalisis("Se reconocio una sentencia continue con etiquetado(Línea " + AnalizadorLexico.LINEA + ")");
                   					int existente = enAmbito(val_peek(1));
							if (existente < 0 ) {
								sintactico.setLexemaEnIndex(val_peek(1).ival,"@"+this.ambito);
								sintactico.setUsoEnIndex("tag",val_peek(1).ival);
								yyval = new ParserVal(sintactico.crearNodoControl("continue-etiqueta", new ParserVal(sintactico.crearHoja(val_peek(1).ival))));
							} else {
								sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): el identificador de la etiqueta ya ha sido utilizado.");
							}
                   					}
break;
case 195:
//#line 776 "gramatica.y"
{ 	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ':'CONTINUE."); }
break;
case 196:
//#line 777 "gramatica.y"
{ 	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego del CONTINUE "); }
break;
case 197:
//#line 780 "gramatica.y"
{
								int existente = enAmbito(val_peek(4));
								if (existente >= 0) {
									Token idFuncInvocada = sintactico.getEntradaTablaSimb(existente);
									if (idFuncInvocada.getUso().equals("func")) {
										if (!this.declaracionFunc.isEmpty() && idFuncInvocada.getLexema().equals(sintactico.getEntradaTablaSimb(this.declaracionFunc.peek()).getLexema())) {
											sintactico.addWarning("Warning. (Línea " + AnalizadorLexico.LINEA + "): no se permite recursion directa.");
										}
										sintactico.checkParametros(idFuncInvocada.getLexema());
										yyval = new ParserVal(sintactico.crearNodoFunc(existente, val_peek(2)));
										sintactico.eliminarEntrada(val_peek(4).ival);
									} else {
										sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): el identificador no corresponde a una funcion.");
									}
								} else {
									sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): funcion no declarada.");
								}

							}
break;
case 199:
//#line 816 "gramatica.y"
{
		    				yyval = new ParserVal(sintactico.crearNodoParam("paramInv", val_peek(2), val_peek(0)));
		    				NodoHijo aux = (NodoHijo)val_peek(2).obj;
						sintactico.addListaVariables(aux.getRefTablaSimbolos());
						NodoHijo aux1 = (NodoHijo)val_peek(0).obj;
                                                sintactico.addListaVariables(aux1.getRefTablaSimbolos());

					}
break;
case 200:
//#line 824 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodoParam("paramInv", val_peek(0), null));

		    				NodoHijo aux = (NodoHijo)val_peek(0).obj;
                                         	sintactico.addListaVariables(aux.getRefTablaSimbolos());

		 			   }
break;
case 201:
//#line 833 "gramatica.y"
{ Nodo expresion = sintactico.crearNodo(val_peek(1).sval, val_peek(2), val_peek(0));
                                                        expresion.setTipo(tipoResultante( ((Nodo)val_peek(2).obj).getTipo(),((Nodo)val_peek(0).obj).getTipo(), "comparacion por " + val_peek(1).sval ));
                                                        yyval = new ParserVal(expresion);
							}
break;
case 202:
//#line 840 "gramatica.y"
{	Nodo expresion = sintactico.crearNodo(val_peek(1).sval, val_peek(2), val_peek(0));
					expresion.setTipo(tipoResultante( ((Nodo)val_peek(2).obj).getTipo(),((Nodo)val_peek(0).obj).getTipo(), val_peek(1).sval ));
					yyval = new ParserVal(expresion);
					}
break;
case 204:
//#line 848 "gramatica.y"
{	Nodo n = sintactico.crearNodo("*",val_peek(2),val_peek(0));
					n.setTipo(tipoResultante( ((Nodo)val_peek(2).obj).getTipo(),((Nodo)val_peek(0).obj).getTipo(), "multiplicacion" ));
					yyval = new ParserVal(n);
				}
break;
case 205:
//#line 852 "gramatica.y"
{ Nodo n = sintactico.crearNodo("/",val_peek(2),val_peek(0));
				  n.setTipo(tipoResultante( ((Nodo)val_peek(2).obj).getTipo(),((Nodo)val_peek(0).obj).getTipo(), " division " ));
				  yyval = new ParserVal(n);}
break;
case 207:
//#line 858 "gramatica.y"
{
				int existente = enAmbito(val_peek(0));
				if (existente >= 0) {
					String type = sintactico.getTipoFromTS(existente);
					Nodo n = sintactico.crearHoja(existente);
					n.setTipo(type);
					yyval = new ParserVal(n);
					sintactico.eliminarEntrada(val_peek(0).ival);
				} else {
					Nodo n = new NodoHijo(null, "Error");
					n.setTipo("");
					yyval = new ParserVal(n);
					sintactico.addErrorSintactico("SemanticError. (Línea " + AnalizadorLexico.LINEA + "): variable no declarada.");
				}
				}
break;
case 208:
//#line 873 "gramatica.y"
{
				String lexema = sintactico.getEntradaTablaSimb(val_peek(0).ival).getLexema();
                                int existente = sintactico.getTS().existeEntrada(lexema);
				if (existente >= 0 && existente < val_peek(0).ival) {
					yyval = new ParserVal(sintactico.crearHoja(existente));
					sintactico.setUsoEnIndex("cte",existente);
					sintactico.eliminarEntrada(val_peek(0).ival);
				} else {
					String type = sintactico.getTipoFromTS(val_peek(0).ival);
					if (type.equals("i32"))
					     sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
					else
						sintactico.verificarRangoFlotante(val_peek(0).ival);

					sintactico.setUsoEnIndex("cte",val_peek(0).ival);
					Nodo n = sintactico.crearHoja(val_peek(0).ival);
					n.setTipo(type);

					yyval = new ParserVal(n);
				}
                  	}
break;
case 209:
//#line 894 "gramatica.y"
{
				sintactico.setNegativoTablaSimb(val_peek(0).ival);
				String lexema = sintactico.getEntradaTablaSimb(val_peek(0).ival).getLexema();
				int existente = sintactico.getTS().existeEntrada(lexema);
                                if (existente >= 0  && existente < val_peek(0).ival) {
                                	yyval = new ParserVal(sintactico.crearHoja(existente));
                                	sintactico.setUsoEnIndex("cte neg",existente);
                                        sintactico.eliminarEntrada(val_peek(0).ival);
                                }else{
                                	String type = sintactico.getTipoFromTS(val_peek(0).ival);
									if (type.equals("i32"))
					     				sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
									else
										sintactico.verificarRangoFlotante(val_peek(0).ival);

									Nodo n = sintactico.crearHoja(val_peek(0).ival);
									n.setTipo(type);
									yyval = new ParserVal(n);
									sintactico.setUsoEnIndex("cte neg",val_peek(0).ival);
								}
                   	}
break;
case 210:
//#line 918 "gramatica.y"
{ yyval.sval = new String("<") ; }
break;
case 211:
//#line 919 "gramatica.y"
{ yyval.sval = new String(">") ; }
break;
case 212:
//#line 920 "gramatica.y"
{ yyval.sval = new String("<="); }
break;
case 213:
//#line 921 "gramatica.y"
{ yyval.sval = new String(">="); }
break;
case 214:
//#line 922 "gramatica.y"
{ yyval.sval = new String("=") ; }
break;
case 215:
//#line 923 "gramatica.y"
{ yyval.sval = new String("=!"); }
break;
case 216:
//#line 927 "gramatica.y"
{ yyval.sval = new String("i32"); }
break;
case 217:
//#line 928 "gramatica.y"
{ yyval.sval = new String("f32"); }
break;
//#line 2300 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
