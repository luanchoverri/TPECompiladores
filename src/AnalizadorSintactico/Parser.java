//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"

package AnalizadorSintactico;

import java.util.Vector;

import AnalizadorLexico.AnalizadorLexico;
import AnalizadorSintactico.AnalizadorSintactico;
import AnalizadorLexico.Token;

//#line 27 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short id=257;
public final static short cte=258;
public final static short If=259;
public final static short then=260;
public final static short Else=261;
public final static short end_if=262;
public final static short out=263;
public final static short fun=264;
public final static short Return=265;
public final static short BREAK=266;
public final static short i32=267;
public final static short when=268;
public final static short For=269;
public final static short CONTINUE=270;
public final static short f32=271;
public final static short cadena=272;
public final static short menorigual=273;
public final static short mayorigual=274;
public final static short distinto=275;
public final static short opasignacion=276;
public final static short Const=277;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    2,    2,    2,    2,    4,    4,    4,    5,
    5,    6,    6,    6,    6,    8,    8,    3,    3,    3,
    3,   10,   10,   10,   10,   10,   16,   16,   11,   11,
   11,   11,   11,   11,   11,   13,   13,   13,   24,   24,
   25,   25,   26,   28,   28,   28,   28,   29,   29,   14,
   30,   30,   30,   30,   30,   27,   33,   33,   33,   33,
   33,   33,   33,   33,   36,   36,   32,   32,   32,   32,
    7,    7,    7,   17,   17,   17,   37,   37,   18,   18,
   18,   18,   18,   18,   19,   19,   19,   38,   38,   38,
   38,   39,   39,   39,   42,   42,   43,   43,   46,   46,
   46,   47,   47,   47,   48,   48,   49,   49,   34,   34,
   34,   50,   50,   50,   51,   51,   52,   52,   53,   53,
   53,   54,   54,   54,   55,   55,   56,   56,   44,   45,
   40,   15,   15,   15,   59,   60,   60,   60,   61,   61,
   61,   61,   61,   62,   67,   64,   63,   63,   63,   65,
   65,    9,    9,    9,    9,    9,    9,    9,    9,    9,
   20,   70,   70,   35,   35,   35,   35,   35,   66,   68,
   58,   58,   58,   58,   58,   58,   58,   58,   58,   57,
   57,   22,   22,   22,   23,   23,   23,   23,   21,   21,
   71,   71,   41,   31,   31,   73,   73,   73,   72,   72,
   72,   69,   69,   69,   69,   69,   69,   12,   12,
};
final static short yylen[] = {                            2,
    2,    1,    4,    3,    2,    2,    3,    3,    3,    1,
    3,    3,    3,    3,    2,    1,    2,    1,    1,    2,
    2,    3,    3,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    2,    2,    2,    3,    1,    2,    2,
    2,    0,    3,    0,    1,    3,    1,    6,    6,    2,
    5,    5,    5,    4,    5,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    2,    1,    2,    2,    1,    1,
    1,    2,    1,    4,    4,    4,    3,    2,    5,    5,
    5,    4,    3,    5,    5,    6,    5,    3,    2,    2,
    1,    2,    1,    1,    4,    2,    4,    2,    5,    5,
    4,    2,    1,    2,    4,    2,    4,    2,    5,    5,
    4,    2,    1,    2,    4,    2,    4,    2,    5,    5,
    4,    2,    1,    2,    4,    2,    4,    2,    1,    1,
    1,    6,    6,    6,    1,    4,    4,    4,    5,   12,
   11,   13,    7,    3,    3,    3,    4,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    1,    4,    1,    5,   12,   11,   13,   14,    3,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
    2,    2,    3,    2,    2,    4,    4,    2,    5,    4,
    3,    1,    3,    3,    1,    3,    3,    1,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    1,
};
final static short yydefred[] = {                         0,
    2,    0,    0,    0,    0,    0,    0,    0,  208,    0,
    0,    0,  209,    0,    0,    0,    0,    0,   25,   18,
   19,    0,    0,   24,   26,   29,   30,   31,   32,   33,
    0,    0,    0,  161,    0,   71,    0,    0,    0,   73,
    0,   36,  199,  200,    0,    0,    0,    0,    0,  198,
    0,    0,    0,    0,    0,  184,    0,  182,    0,  135,
    0,    0,    0,  188,    0,  185,    0,    0,    0,    0,
   10,    0,    0,    0,    6,   20,   21,    0,    0,   34,
   35,    0,   50,   37,    0,   72,    0,    0,    0,    0,
    0,    0,    0,    0,  201,  204,  205,  207,  206,  150,
  151,  202,  203,    0,    0,    0,  130,    0,    0,   94,
    0,    0,   89,    0,    0,    0,    0,    0,    0,   47,
    0,    0,    0,    0,  183,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   15,    0,    0,    9,    8,    7,
    0,    4,   83,    0,   22,   23,    0,    0,    0,    0,
   70,   57,   59,   60,    0,    0,    0,   62,    0,   69,
   58,   61,    0,  190,    0,    0,    0,   78,    0,   75,
   74,   76,   88,    0,    0,  129,    0,  131,    0,   92,
    0,    0,   96,    0,   98,  196,  197,   82,    0,    0,
    0,    0,   40,   39,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  187,  186,   14,   13,   12,   11,
    3,    0,    0,    0,    0,    0,    0,   63,   64,   43,
   68,   67,    0,    0,  189,  191,   77,   87,    0,   85,
   28,    0,    0,   81,   80,   79,   84,    0,   46,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  148,    0,  152,  153,  154,  156,  157,  158,    0,  155,
  139,    0,    0,  144,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   86,   95,
   27,   97,   48,   41,   49,    0,    0,  132,  134,  133,
    0,    0,    0,  149,    0,   16,  159,  160,    0,    0,
    0,    0,    0,  116,    0,  118,  111,    0,  112,  114,
    0,    0,   54,    0,    0,    0,    0,  169,  143,  137,
  136,  138,    0,    0,    0,    0,    0,    0,    0,    0,
   17,  146,    0,  145,    0,   66,    0,    0,  110,  109,
   53,   55,   51,   52,    0,    0,    0,    0,    0,  171,
  172,  175,  176,  177,  174,  173,  178,  163,  164,    0,
    0,    0,  106,    0,  108,  101,    0,  102,  104,  147,
  170,    0,  115,   65,  117,    0,    0,    0,    0,  180,
  179,    0,    0,    0,    0,  100,   99,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  181,    0,    0,    0,
  105,  107,    0,    0,    0,    0,  126,    0,  128,  121,
    0,  122,  124,  162,    0,  141,    0,    0,    0,    0,
    0,    0,  120,  119,  140,    0,    0,    0,    0,    0,
  125,  127,  142,    0,    0,  166,    0,    0,  165,    0,
    0,  167,  168,
};
final static short yydgoto[] = {                          2,
    3,   17,   18,   19,   70,   71,   41,  295,  251,  252,
   21,   22,   23,   24,   25,  232,   26,   27,   28,   29,
   30,   31,   32,  123,  241,   83,  157,  124,   33,  259,
   47,  159,  336,  161,  356,  337,   93,   48,  108,  179,
   49,  109,  110,  111,  112,  260,  327,  328,  329,  268,
  269,  270,  357,  393,  394,  395,  379,  358,   61,  199,
   34,  131,  261,  263,  104,  132,  264,  334,  105,  359,
   88,   50,   51,
};
final static short yysindex[] = {                      -206,
    0,    0,  967,  -38,   14,  -37,    1,   76,    0,   21,
    3,  112,    0,   35, 1135, -207,  -28,  997,    0,    0,
    0, -170,   56,    0,    0,    0,    0,    0,    0,    0,
 -153, -133,    9,    0,  -27,    0, -170,  -57,   40,    0,
    5,    0,    0,    0,   84, -111,   -5, -149,   86,    0,
   44, -102,  -23,  126,  211,    0,   98,    0,   84,    0,
  139,  -39,  -70,    0,  141,    0,  -53,  -32,  -20,   30,
    0, 1022,   17, 1135,    0,    0,    0,  166,   38,    0,
    0,  902,    0,    0,  188,    0,  237,  286,  287,  282,
 -193,   54,  305,  341,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   84,   84,  -69,    0,  132,  143,    0,
  -16,  361,    0,   84,   84,  328,   32,  144,  211,    0,
  146,  154,  370,  390,    0,   -9,  173,  374,  178,  -39,
  398,  382,  191,  394,    0,  204,  -51,    0,    0,    0,
  208,    0,    0, 1049,    0,    0,  -30,   14,   27,   18,
    0,    0,    0,    0,  213,  214,  346,    0,  902,    0,
    0,    0,  215,    0,  415,   84,  212,    0,  225,    0,
    0,    0,    0,   44,  165,    0, -210,    0,  426,    0,
  -31,  295,    0,  295,    0,    0,    0,    0,  429,   91,
  430,  450,    0,    0,  142,  435, 1090,  173,  437,  438,
  443,  236,  686,  248,    0,    0,    0,    0,    0,    0,
    0,   22,  -69,   84,  156,  -39,  250,    0,    0,    0,
    0,    0,  -39,  467,    0,    0,    0,    0,  253,    0,
    0,  494,  599,    0,    0,    0,    0,  435,    0, -223,
  263, 1135, 1120,  466,  270,  274,  248,  470,   14,  719,
    0,  280,    0,    0,    0,    0,    0,    0,  288,    0,
    0,  117,  486,    0,  506,  108,  158, -192,  143,  291,
  367,  292,  490,  297,  -39,  509,  298,  686,    0,    0,
    0,    0,    0,    0,    0,  247,  304,    0,    0,    0,
  503,  248,  -69,    0,  735,    0,    0,    0,  309,  165,
  296,  -24,  189,    0,  189,    0,    0,  103,    0,    0,
  307,  104,    0,  315,  514,  317,  758,    0,    0,    0,
    0,    0,  165,  523,  775,  790, -172,  143,  338,  525,
    0,    0,  325,    0,  -39,    0,  272,  326,    0,    0,
    0,    0,    0,    0,  248,  539,   14, 1068,  344,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  345,
  165, 1105,    0, 1105,    0,    0,  114,    0,    0,    0,
    0,  347,    0,    0,    0,  545,  248,  -69,  809,    0,
    0,   36,  349,  835,  850,    0,    0,  550,  165,  557,
  872,  887, -152,  143,  372,  567,    0,  686,  373,  592,
    0,    0,  248,  377,  165, 1068,    0, 1068,    0,    0,
  123,    0,    0,    0,  385,    0,  686,  583,   52,  386,
  925,  940,    0,    0,    0,  388,  165,  758,  389,  605,
    0,    0,    0,  391,  393,    0,  758,  609,    0,  395,
  758,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,  595,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  656,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  595,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  125,    0,
   77,    0,    0,    0,  618,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  621,   74,
    0,    0,    0,  169,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  404,    0,    0, -131,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  618,    0,
    0,    0,  625,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  595,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  543,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   83,    4,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  413,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  549,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  616,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -110,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -107,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  616,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,    6,    0,    0,  537,  -55, -151,  358,   -3,
  -10,  -19,  603,    0,    0,  496,   58,  195,    0,  -36,
  273,  410,  488,  487,  447,    0,    0,  568,    0,  540,
  352,    0,  -81,    0,  -71,  381,    0,   33,  587, -138,
   37,    0,  580, -188,  194,    0,    0,    0,  368,    0,
    0,  428,    0,    0,    0,  306, -190, 1017,  639,  -92,
    0, -103, -229, -194,  407,    0,    0,    0,  440, -235,
    0,   -6,  600,
};
final static int YYTABLESIZE=1439;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         20,
  160,   39,   53,   86,   91,   37,  129,   77,   39,   39,
  162,   20,  137,   37,   76,   39,   37,  118,  128,   38,
   72,   40,   40,   16,  266,  128,   38,  212,   40,   40,
   40,  198,   89,  212,  200,  122,   40,  100,  229,  101,
   55,    5,   63,    9,  193,  228,   60,   13,  319,   46,
    1,  178,  291,   45,  102,   99,  103,  217,   46,  224,
   59,   77,  168,  307,   73,   46,  214,  169,   76,  178,
   20,   46,  190,  141,  202,   16,  398,  222,  151,  144,
   87,   94,   86,  366,   46,  114,   35,  162,  140,  178,
  115,   16,  428,   69,   74,   60,  100,  324,  101,  122,
  183,  185,   80,  410,  325,  244,  182,  186,  187,  178,
  106,  107,  171,  276,   79,  199,  199,  195,  199,  195,
  199,  195,   81,  194,   93,  194,  113,  194,   46,  308,
   93,   82,  199,   77,   58,  195,  195,  195,  195,  152,
   76,  194,  194,  194,  194,  113,   95,   16,  103,  236,
  376,  113,  399,  116,  103,  221,  125,  123,  250,  226,
  274,  340,  343,  123,    5,  119,  255,  277,  415,   67,
   66,  231,  387,  231,  348,  122,  102,   99,  103,  127,
  213,  424,  390,  429,  304,  306,  130,  426,  367,  391,
  176,  107,  435,   20,  162,  162,  273,   16,  100,  133,
  101,  440,  243,  134,  208,  443,  209,  100,  418,  101,
  384,   85,  385,  255,  272,  421,  152,  422,   35,  316,
  284,  281,  281,  135,  145,  136,   35,  163,   16,   35,
  303,  162,   77,  162,   52,  138,   36,   36,   20,   76,
  181,  255,    5,   36,   36,   36,    6,  286,  117,    8,
  197,   36,   11,   12,  411,  374,  374,   54,  255,   62,
  253,   90,   44,  193,  193,  162,  162,   96,   97,   98,
   43,   44,  143,   11,  216,   77,  153,   43,   44,  372,
  305,  293,   76,   43,   44,  139,   16,  189,  255,  255,
  265,   68,    4,  146,  249,  164,   43,   44,    6,    7,
  149,    8,    9,   10,   11,   12,   13,  253,  147,  170,
  347,   16,   14,  349,    6,    7,  149,    8,    9,   10,
  150,   12,   13,  152,  152,  255,  165,  255,   14,  199,
  166,   56,  195,   57,   16,  253,  195,  195,  194,  167,
   43,   44,  194,  194,  349,  255,  235,  255,  255,  195,
  195,  195,  253,  153,  154,  194,  194,  194,  339,  342,
  152,  255,  152,  172,  302,   16,  148,   64,   65,  386,
    6,  321,  149,    8,  350,  349,  150,   12,  423,  378,
  255,  173,  253,  253,   91,   91,  188,  349,  349,   96,
   97,   98,   92,  178,  152,  152,  373,  254,  121,  191,
   16,  193,  349,  107,  349,  350,  267,  312,    9,  100,
  194,  101,   13,  195,  302,  349,  148,  349,  349,  253,
    6,  253,  149,    8,  349,  311,  150,   12,   90,   90,
  196,  154,  197,  349,   86,  201,  350,  349,  203,  253,
  204,  253,  253,  129,  254,  302,  205,  148,  350,  350,
  375,    6,  206,  149,    8,  253,  175,  150,   12,  207,
  153,  153,  267,  350,   68,  350,  120,  121,  218,  219,
  220,  223,  254,  225,  253,  256,  350,    9,  350,  350,
   85,   13,  227,  184,  230,  350,  326,  234,  237,  254,
  238,  155,  240,  248,  350,  245,  246,  153,  350,  153,
  215,  247,  320,    4,  262,    5,  275,  278,  279,    6,
    7,  351,    8,    9,   10,   11,   12,   13,  285,  254,
  254,  326,  256,   14,  288,  289,  129,  292,  302,  290,
  148,  153,  153,   16,    6,  297,  149,    8,  154,  154,
  150,   12,  351,  298,  300,  301,  310,  313,  314,  317,
  256,  181,  335,    5,  315,  318,  254,    6,  254,  322,
    8,  323,  341,   11,   12,  271,  332,  256,  155,  156,
  344,  392,  345,  351,  346,  154,  254,  154,  254,  254,
  361,  371,  302,  370,  148,  351,  351,  392,    6,  352,
  149,    8,  254,  369,  150,   12,  377,  256,  256,  381,
  351,  382,  351,  389,  388,  400,   42,  296,  403,  154,
  154,  254,  257,  351,  405,  351,  351,  181,  280,    5,
  352,  158,  351,    6,   78,  414,    8,  413,  416,   11,
   12,  351,  417,  419,  256,  351,  256,   42,   16,   84,
  425,  427,  430,  433,  436,  437,  156,  438,  439,  441,
  442,  352,  331,   38,  256,    1,  256,  256,   44,  257,
  129,  192,  129,  352,  352,   45,  129,   56,   42,  129,
  256,   42,  129,  129,  169,  155,  155,  210,  352,  233,
  352,  239,  363,  365,  283,  338,  192,  257,  180,  256,
  258,  352,  177,  352,  352,  368,  309,  126,  158,  412,
  352,  299,    0,  174,  257,    0,  333,    0,    0,  352,
    0,    0,  155,  352,  155,    0,    0,    0,    0,  296,
    0,  296,    0,  282,    0,   16,  353,    0,    0,  360,
    0,    0,    0,    0,  257,  257,    0,  258,    0,    0,
    0,  331,  331,    0,    0,    0,  155,  155,    0,   42,
  181,    0,    5,  156,  156,    0,    6,  353,   16,    8,
    0,    0,   11,   12,    0,  258,    0,  383,    0,    0,
    0,  257,    0,  257,   16,    0,    0,    0,    0,    0,
    0,    0,  258,    0,    0,    0,    0,    0,  353,    0,
  156,  257,  156,  257,  257,  404,    0,   16,    0,    0,
  353,  353,    0,    0,  354,  158,  158,  257,  250,    0,
    0,  420,  258,  258,   16,  353,    0,  353,    0,    0,
    0,    0,    0,    0,  156,  156,  257,    0,  353,   16,
  353,  353,    0,  434,    0,  354,    0,  353,    0,    0,
    0,    0,  158,  294,  158,    0,  353,    0,   16,  258,
  353,  258,    0,    0,    0,  181,  355,    5,    0,  330,
    0,    6,    0,    0,    8,    0,  354,   11,   12,  258,
    0,  258,  258,    0,   16,    0,  158,  158,  354,  354,
  348,    0,    0,    0,    0,  258,    0,  355,    0,   16,
    0,    0,    0,  354,    0,  354,    0,  362,    0,    0,
    0,    0,    0,    0,  258,    0,  354,    0,  354,  354,
    0,   16,  364,    0,    0,  354,    0,    0,  355,    0,
    0,    0,    0,    0,  354,    0,   16,    0,  354,    0,
  355,  355,    0,  396,    0,    0,    0,    0,    0,    0,
    0,   16,    4,    0,  249,  355,    0,  355,    6,    7,
  149,    8,    9,   10,   11,   12,   13,    0,  355,  401,
  355,  355,   14,    0,   16,    0,    0,  355,    0,    0,
    0,    0,    0,    0,  402,    4,  355,  249,    0,   16,
  355,    6,    7,  149,    8,    9,   10,   11,   12,   13,
    0,    4,    0,  249,  406,   14,    0,    6,    7,  149,
    8,    9,   10,   11,   12,   13,   16,    0,    0,  408,
    0,   14,    0,    0,  147,    0,  347,    0,    0,    0,
    6,    7,  149,    8,    9,   10,  150,   12,   13,    0,
    0,    4,    0,  249,   14,    0,   16,    6,    7,  149,
    8,    9,   10,   11,   12,   13,    4,    0,  249,  431,
    0,   14,    6,    7,  149,    8,    9,   10,   11,   12,
   13,   16,    0,    0,  432,  147,   14,  347,    0,    0,
    0,    6,    7,  149,    8,    9,   10,  150,   12,   13,
    0,    0,    0,    0,    0,   14,    0,    0,   16,   15,
    0,    4,    0,  249,    0,    0,    0,    6,    7,  149,
    8,    9,   10,   11,   12,   13,    4,   16,  249,    0,
    0,   14,    6,    7,  149,    8,    9,   10,   11,   12,
   13,   75,    0,    0,    0,    0,   14,    0,  147,   16,
  347,    0,    0,    0,    6,    7,  149,    8,    9,   10,
  150,   12,   13,  147,   16,  347,  142,    0,   14,    6,
    7,  149,    8,    9,   10,  150,   12,   13,  147,   16,
  148,    0,    0,   14,    6,    7,  149,    8,    9,   10,
  150,   12,   13,  211,   16,    0,    0,    0,   14,    0,
    0,  147,    0,  347,    0,    0,    0,    6,    7,  149,
    8,    9,   10,  150,   12,   13,  147,    0,  347,    0,
    0,   14,    6,    7,  149,    8,    9,   10,  150,   12,
   13,    0,  242,    0,    0,    0,   14,    0,    0,    0,
    0,    0,    0,    4,    0,    5,    0,    0,    0,    6,
    7,    0,    8,    9,   10,   11,   12,   13,    0,    0,
    0,    0,    0,   14,  287,    0,    0,    0,    0,    0,
    0,    0,    0,    4,    0,    5,    0,    0,    0,    6,
    7,    0,    8,    9,   10,   11,   12,   13,    0,    0,
    0,    0,    0,   14,    0,    0,    0,    0,    4,    0,
    5,    0,    0,    0,    6,    7,    0,    8,    9,   10,
   11,   12,   13,    0,    0,    0,    0,    0,   14,    0,
    0,    0,    0,    0,    0,    4,    0,    5,    0,    0,
    0,    6,    7,    0,    8,    9,   10,   11,   12,   13,
    0,    0,    0,    0,  147,   14,  347,    0,    0,    0,
    6,    7,  149,    8,    9,   10,  150,   12,   13,    0,
    0,    0,    0,    0,   14,    0,    4,    0,    5,    0,
    0,    0,    6,    7,    0,    8,    9,   10,   11,   12,
   13,    4,    0,  249,  380,    0,   14,    6,    7,  149,
    8,    9,   10,   11,   12,   13,    4,    0,    5,    0,
    0,   14,    6,    7,    0,    8,    9,   10,   11,   12,
   13,    4,    0,    5,    0,  397,   14,    6,    7,    0,
    8,    9,   10,   11,   12,   13,    0,  407,  409,    0,
    0,   14,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  380,    0,  380,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  397,  397,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          3,
   82,   40,   40,   61,   41,   44,   62,   18,   40,   40,
   82,   15,   68,   44,   18,   40,   44,   41,   58,   58,
   15,   61,   61,   40,  213,   58,   58,   58,   61,   61,
   61,   41,   39,   58,  127,   55,   61,   43,  177,   45,
   40,    0,   40,  267,   41,  256,   10,  271,  278,   45,
  257,  262,  247,   40,   60,   61,   62,   40,   45,  163,
   40,   72,  256,  256,  272,   45,   40,  261,   72,  262,
   74,   45,   41,   44,  130,   40,   41,  159,   82,   74,
   41,   45,   61,  256,   45,   42,  257,  159,   59,  262,
   47,   40,   41,   59,  123,   59,   43,  292,   45,  119,
  111,  112,  256,  256,  293,  198,  123,  114,  115,  262,
  260,  261,   59,  217,   59,   42,   43,   41,   45,   43,
   47,   45,  256,   41,  256,   43,   41,   45,   45,  268,
  262,  123,   59,  144,   59,   59,   60,   61,   62,   82,
  144,   59,   60,   61,   62,  256,  258,   40,  256,   59,
  345,  262,  382,  256,  262,  159,   59,  256,  123,  166,
  216,   59,   59,  262,  123,   40,  203,  223,  398,   58,
   59,  182,   59,  184,  123,  195,   60,   61,   62,   41,
  148,   59,  377,  419,  266,  267,  257,  417,  327,  378,
  260,  261,  428,  197,  266,  267,   41,   40,   43,   59,
   45,  437,  197,  257,  256,  441,  258,   43,  403,   45,
  362,  269,  364,  250,   59,  406,  159,  408,  257,  275,
  240,  232,  233,  256,   59,  258,  257,   40,   40,  257,
  123,  303,  243,  305,  272,  256,  276,  276,  242,  243,
  257,  278,  259,  276,  276,  276,  263,  242,  272,  266,
  260,  276,  269,  270,  393,  337,  338,  257,  295,  257,
  203,  257,  258,  260,  261,  337,  338,  273,  274,  275,
  257,  258,  256,  269,  257,  286,   82,  257,  258,  335,
  123,  249,  286,  257,  258,  256,   40,  256,  325,  326,
  269,  257,  257,  256,  259,   59,  257,  258,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  250,  257,  256,
  259,   40,  277,  317,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  266,  267,  362,   41,  364,  277,  256,
   44,  256,  256,  258,   40,  278,  260,  261,  256,   58,
  257,  258,  260,  261,  348,  382,  256,  384,  385,  273,
  274,  275,  295,  159,   82,  273,  274,  275,  256,  256,
  303,  398,  305,   59,  257,   40,  259,  256,  257,  256,
  263,  125,  265,  266,  317,  379,  269,  270,  256,  347,
  417,   41,  325,  326,  260,  261,   59,  391,  392,  273,
  274,  275,   41,  262,  337,  338,  125,  203,  257,  256,
   40,  256,  406,  261,  408,  348,  213,   41,  267,   43,
  257,   45,  271,   44,  257,  419,  259,  421,  422,  362,
  263,  364,  265,  266,  428,   59,  269,  270,  260,  261,
   41,  159,  260,  437,   61,  258,  379,  441,   41,  382,
   59,  384,  385,   40,  250,  257,  256,  259,  391,  392,
  125,  263,   59,  265,  266,  398,  105,  269,  270,  256,
  266,  267,  269,  406,  257,  408,  256,  257,  256,  256,
  125,  257,  278,   59,  417,  203,  419,  267,  421,  422,
  269,  271,  258,  123,   59,  428,  293,   59,   59,  295,
   41,   82,   58,  258,  437,   59,   59,  303,  441,  305,
  149,   59,  256,  257,  257,  259,  257,   41,  256,  263,
  264,  317,  266,  267,  268,  269,  270,  271,  256,  325,
  326,  328,  250,  277,   59,  256,  123,   58,  257,  256,
  259,  337,  338,   40,  263,  256,  265,  266,  266,  267,
  269,  270,  348,  256,   59,   40,  256,  256,   59,   41,
  278,  257,  257,  259,  258,  258,  362,  263,  364,  256,
  266,   59,  256,  269,  270,  214,  258,  295,  159,   82,
  256,  378,   59,  379,  258,  303,  382,  305,  384,  385,
   58,  257,  257,   59,  259,  391,  392,  394,  263,  317,
  265,  266,  398,  256,  269,  270,   58,  325,  326,  256,
  406,  257,  408,   59,  258,  257,    4,  250,   59,  337,
  338,  417,  203,  419,   58,  421,  422,  257,  125,  259,
  348,   82,  428,  263,   22,   59,  266,  256,  256,  269,
  270,  437,   41,  257,  362,  441,  364,   35,   40,   37,
  256,   59,  257,  256,  256,   41,  159,  257,  256,   41,
  256,  379,  295,   59,  382,    0,  384,  385,   41,  250,
  257,   41,  259,  391,  392,   41,  263,  125,  256,  266,
  398,  123,  269,  270,   59,  266,  267,  141,  406,  184,
  408,  195,  325,  326,  238,  305,  119,  278,  109,  417,
  203,  419,  106,  421,  422,  328,  269,   59,  159,  394,
  428,  262,   -1,  104,  295,   -1,  300,   -1,   -1,  437,
   -1,   -1,  303,  441,  305,   -1,   -1,   -1,   -1,  362,
   -1,  364,   -1,  125,   -1,   40,  317,   -1,   -1,  323,
   -1,   -1,   -1,   -1,  325,  326,   -1,  250,   -1,   -1,
   -1,  384,  385,   -1,   -1,   -1,  337,  338,   -1,  147,
  257,   -1,  259,  266,  267,   -1,  263,  348,   40,  266,
   -1,   -1,  269,  270,   -1,  278,   -1,  361,   -1,   -1,
   -1,  362,   -1,  364,   40,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,  379,   -1,
  303,  382,  305,  384,  385,  389,   -1,   40,   -1,   -1,
  391,  392,   -1,   -1,  317,  266,  267,  398,  123,   -1,
   -1,  405,  325,  326,   40,  406,   -1,  408,   -1,   -1,
   -1,   -1,   -1,   -1,  337,  338,  417,   -1,  419,   40,
  421,  422,   -1,  427,   -1,  348,   -1,  428,   -1,   -1,
   -1,   -1,  303,  125,  305,   -1,  437,   -1,   40,  362,
  441,  364,   -1,   -1,   -1,  257,  317,  259,   -1,  125,
   -1,  263,   -1,   -1,  266,   -1,  379,  269,  270,  382,
   -1,  384,  385,   -1,   40,   -1,  337,  338,  391,  392,
  123,   -1,   -1,   -1,   -1,  398,   -1,  348,   -1,   40,
   -1,   -1,   -1,  406,   -1,  408,   -1,  123,   -1,   -1,
   -1,   -1,   -1,   -1,  417,   -1,  419,   -1,  421,  422,
   -1,   40,  123,   -1,   -1,  428,   -1,   -1,  379,   -1,
   -1,   -1,   -1,   -1,  437,   -1,   40,   -1,  441,   -1,
  391,  392,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   40,  257,   -1,  259,  406,   -1,  408,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,  419,  125,
  421,  422,  277,   -1,   40,   -1,   -1,  428,   -1,   -1,
   -1,   -1,   -1,   -1,  125,  257,  437,  259,   -1,   40,
  441,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,  257,   -1,  259,  123,  277,   -1,  263,  264,  265,
  266,  267,  268,  269,  270,  271,   40,   -1,   -1,  123,
   -1,  277,   -1,   -1,  257,   -1,  259,   -1,   -1,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,  257,   -1,  259,  277,   -1,   40,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  257,   -1,  259,  125,
   -1,  277,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   40,   -1,   -1,  125,  257,  277,  259,   -1,   -1,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,   -1,   -1,   -1,   -1,  277,   -1,   -1,   40,  123,
   -1,  257,   -1,  259,   -1,   -1,   -1,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  257,   40,  259,   -1,
   -1,  277,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  125,   -1,   -1,   -1,   -1,  277,   -1,  257,   40,
  259,   -1,   -1,   -1,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  257,   40,  259,  125,   -1,  277,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  257,   40,
  259,   -1,   -1,  277,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  125,   40,   -1,   -1,   -1,  277,   -1,
   -1,  257,   -1,  259,   -1,   -1,   -1,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  257,   -1,  259,   -1,
   -1,  277,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   -1,  123,   -1,   -1,   -1,  277,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,  259,   -1,   -1,   -1,  263,
  264,   -1,  266,  267,  268,  269,  270,  271,   -1,   -1,
   -1,   -1,   -1,  277,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,  259,   -1,   -1,   -1,  263,
  264,   -1,  266,  267,  268,  269,  270,  271,   -1,   -1,
   -1,   -1,   -1,  277,   -1,   -1,   -1,   -1,  257,   -1,
  259,   -1,   -1,   -1,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,   -1,   -1,   -1,   -1,   -1,  277,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,  259,   -1,   -1,
   -1,  263,  264,   -1,  266,  267,  268,  269,  270,  271,
   -1,   -1,   -1,   -1,  257,  277,  259,   -1,   -1,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,   -1,   -1,   -1,  277,   -1,  257,   -1,  259,   -1,
   -1,   -1,  263,  264,   -1,  266,  267,  268,  269,  270,
  271,  257,   -1,  259,  348,   -1,  277,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  257,   -1,  259,   -1,
   -1,  277,  263,  264,   -1,  266,  267,  268,  269,  270,
  271,  257,   -1,  259,   -1,  379,  277,  263,  264,   -1,
  266,  267,  268,  269,  270,  271,   -1,  391,  392,   -1,
   -1,  277,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  406,   -1,  408,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,  422,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=277;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"id","cte","If","then","Else","end_if","out",
"fun","Return","BREAK","i32","when","For","CONTINUE","f32","cadena",
"menorigual","mayorigual","distinto","opasignacion","Const",
};
final static String yyrule[] = {
"$accept : programa",
"programa : encabezado_prog bloque_sentencias",
"encabezado_prog : id",
"bloque_sentencias : bloque_sentencias '{' sentencia '}'",
"bloque_sentencias : '{' sentencia '}'",
"bloque_sentencias : '{' sentencia",
"bloque_sentencias : sentencia '}'",
"declaracion_const : Const lista_de_asignacion_const ';'",
"declaracion_const : Const lista_de_asignacion_const error",
"declaracion_const : Const ';' error",
"lista_de_asignacion_const : decl_const",
"lista_de_asignacion_const : lista_de_asignacion_const ',' decl_const",
"decl_const : id op_asignacion cte",
"decl_const : id op_asignacion error",
"decl_const : id cte error",
"decl_const : id error",
"bloq_sentencias_For : sentencias_For",
"bloq_sentencias_For : bloq_sentencias_For sentencias_For",
"sentencia : declarativas",
"sentencia : ejecutables",
"sentencia : sentencia declarativas",
"sentencia : sentencia ejecutables",
"declarativas : tipo lista_de_variables ';'",
"declarativas : lista_de_variables ';' error",
"declarativas : declaracion_func",
"declarativas : declaracion_const",
"declarativas : sentencia_when",
"bloque_ejecutables : bloque_ejecutables ejecutables",
"bloque_ejecutables : ejecutables",
"ejecutables : asignacion",
"ejecutables : salida",
"ejecutables : sentencia_If",
"ejecutables : expresion_For",
"ejecutables : invocacion_funcion",
"ejecutables : sentencia_BREAK error",
"ejecutables : sentencia_CONTINUE error",
"lista_de_variables : id lista_de_variables",
"lista_de_variables : id ',' lista_de_variables",
"lista_de_variables : id",
"parametro : tipo id",
"parametro : id error",
"asig_fun : ':' tipo",
"asig_fun :",
"cola_func : '{' cuerpo_fun '}'",
"lista_parametros :",
"lista_parametros : parametro",
"lista_parametros : parametro ',' parametro",
"lista_parametros : error",
"encab_fun : fun id '(' lista_parametros ')' asig_fun",
"encab_fun : fun '(' lista_parametros ')' asig_fun error",
"declaracion_func : encab_fun cola_func",
"ret_fun : Return '(' expresion ')' ';'",
"ret_fun : Return expresion ')' ';' error",
"ret_fun : Return '(' expresion ';' error",
"ret_fun : Return expresion ';' error",
"ret_fun : Return '(' expresion ')' error",
"cuerpo_fun : bloque_sentencias_funcion",
"ejecutables_funcion : asignacion",
"ejecutables_funcion : sentencia_if_funcion",
"ejecutables_funcion : salida",
"ejecutables_funcion : invocacion_funcion",
"ejecutables_funcion : sentencia_for_funcion",
"ejecutables_funcion : ret_fun",
"ejecutables_funcion : sentencia_BREAK error",
"ejecutables_funcion : sentencia_CONTINUE error",
"bloq_ejecutables_fun : bloq_ejecutables_fun ejecutables_funcion",
"bloq_ejecutables_fun : ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion declarativas",
"bloque_sentencias_funcion : ejecutables_funcion",
"bloque_sentencias_funcion : declarativas",
"op_asignacion : opasignacion",
"op_asignacion : ':' '='",
"op_asignacion : '='",
"asignacion : id op_asignacion expresion ';'",
"asignacion : id op_asignacion expresion error",
"asignacion : id op_asignacion for_else_cte ';'",
"for_else_cte : expresion_For Else cte",
"for_else_cte : expresion_For error",
"salida : out '(' cadena ')' ';'",
"salida : out '(' cadena ')' error",
"salida : out '(' cadena error ';'",
"salida : out cadena error ';'",
"salida : '(' cadena error",
"salida : out '(' ')' error ';'",
"sentencia_If : If condicion_if cuerpo_If PR_end_if ';'",
"sentencia_If : If condicion_if then cuerpo_If PR_end_if error",
"sentencia_If : If condicion_if then cuerpo_If error",
"condicion_if : '(' expresion_relacional ')'",
"condicion_if : expresion_relacional ')'",
"condicion_if : '(' expresion_relacional",
"condicion_if : expresion_relacional",
"cuerpo_If : cuerpo_Then cuerpo_Else",
"cuerpo_If : cuerpo_Then",
"cuerpo_If : cuerpo_Else",
"cuerpo_Then : PR_then '{' bloque_ejecutables '}'",
"cuerpo_Then : PR_then ejecutables",
"cuerpo_Else : PR_else '{' bloque_ejecutables '}'",
"cuerpo_Else : PR_else ejecutables",
"sentencia_if_for : If condicion_if cuerpo_If_for PR_end_if ';'",
"sentencia_if_for : If condicion_if cuerpo_If_for PR_end_if error",
"sentencia_if_for : If condicion_if cuerpo_If_for error",
"cuerpo_If_for : cuerpo_then_for cuerpo_Else_for",
"cuerpo_If_for : cuerpo_then_for",
"cuerpo_If_for : cuerpo_Else_for error",
"cuerpo_then_for : PR_then '{' bloq_sentencias_For '}'",
"cuerpo_then_for : PR_then sentencias_For",
"cuerpo_Else_for : PR_else '{' bloq_sentencias_For '}'",
"cuerpo_Else_for : PR_else sentencias_For",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion PR_end_if ';'",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion PR_end_if error",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion error",
"cuerpo_If_funcion : cuerpo_then_funcion cuerpo_Else_funcion",
"cuerpo_If_funcion : cuerpo_then_funcion",
"cuerpo_If_funcion : cuerpo_Else_funcion error",
"cuerpo_then_funcion : PR_then '{' bloq_ejecutables_fun '}'",
"cuerpo_then_funcion : PR_then ejecutables_funcion",
"cuerpo_Else_funcion : PR_else '{' bloq_ejecutables_fun '}'",
"cuerpo_Else_funcion : PR_else ejecutables_funcion",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun PR_end_if ';'",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun PR_end_if error",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun error",
"cuerpo_If_for_fun : then_if_for_fun else_if_for_fun",
"cuerpo_If_for_fun : then_if_for_fun",
"cuerpo_If_for_fun : else_if_for_fun error",
"then_if_for_fun : PR_then '{' bloq_for_funcion '}'",
"then_if_for_fun : PR_then sentencias_For_funcion",
"else_if_for_fun : PR_else '{' bloq_for_funcion '}'",
"else_if_for_fun : PR_else sentencias_For_funcion",
"PR_then : then",
"PR_else : Else",
"PR_end_if : end_if",
"sentencia_when : when '(' condicion_when ')' cuerpo_when ';'",
"sentencia_when : when condicion_when ')' cuerpo_when ';' error",
"sentencia_when : when '(' condicion_when cuerpo_when ';' error",
"condicion_when : expresion_relacional",
"cuerpo_when : then '{' sentencia '}'",
"cuerpo_when : then '{' sentencia error",
"cuerpo_when : then sentencia '}' error",
"encabezado_For : For '(' detalles_for ')' cola_For",
"encabezado_For : For id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For error",
"encabezado_For : For id op_asignacion cte ';' condicion_for ';' signo id cola_For error",
"encabezado_For : For '(' id op_asignacion cte ':' condicion_for ':' signo id ')' cola_For error",
"encabezado_For : id ':' For '(' detalles_for ')' cola_For",
"detalles_for : asignacion_for ';' cond_op_for",
"cond_op_for : condicion_for ';' operacion_for",
"condicion_for : id comparador cte",
"cola_For : '{' bloq_sentencias_For '}' ';'",
"cola_For : sentencias_For",
"cola_For : '{' '}'",
"signo : '+'",
"signo : '-'",
"sentencias_For : asignacion",
"sentencias_For : salida",
"sentencias_For : expresion_For",
"sentencias_For : sentencia_if_for",
"sentencias_For : invocacion_funcion",
"sentencias_For : sentencia_BREAK",
"sentencias_For : sentencia_CONTINUE",
"sentencias_For : declarativas error",
"sentencias_For : ret_fun error",
"expresion_For : encabezado_For",
"cola_For_funcion : '{' bloq_for_funcion '}' ';'",
"cola_For_funcion : sentencias_For_funcion",
"sentencia_for_funcion : For '(' detalles_for ')' cola_For_funcion",
"sentencia_for_funcion : For id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For_funcion error",
"sentencia_for_funcion : For id op_asignacion cte ';' condicion_for ';' signo id cola_For_funcion error",
"sentencia_for_funcion : For '(' id op_asignacion cte ':' condicion_for ':' signo id ')' cola_For_funcion error",
"sentencia_for_funcion : id ':' For '(' id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For_funcion",
"asignacion_for : id op_asignacion cte",
"operacion_for : signo id",
"sentencias_For_funcion : asignacion",
"sentencias_For_funcion : salida",
"sentencias_For_funcion : sentencia_for_funcion",
"sentencias_For_funcion : ret_fun",
"sentencias_For_funcion : invocacion_funcion",
"sentencias_For_funcion : sentencia_BREAK",
"sentencias_For_funcion : sentencia_CONTINUE",
"sentencias_For_funcion : sentencia_if_for_fun",
"sentencias_For_funcion : declarativas error",
"bloq_for_funcion : sentencias_For_funcion",
"bloq_for_funcion : bloq_for_funcion sentencias_For_funcion",
"sentencia_BREAK : BREAK ';'",
"sentencia_BREAK : BREAK cte ';'",
"sentencia_BREAK : BREAK error",
"sentencia_CONTINUE : CONTINUE ';'",
"sentencia_CONTINUE : CONTINUE ':' id ';'",
"sentencia_CONTINUE : CONTINUE id ';' error",
"sentencia_CONTINUE : CONTINUE error",
"invocacion_funcion : id '(' list_parametros_Inv ')' ';'",
"invocacion_funcion : id '(' ')' ';'",
"list_parametros_Inv : factor ',' factor",
"list_parametros_Inv : factor",
"expresion_relacional : expresion comparador expresion",
"expresion : expresion signo termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : id",
"factor : cte",
"factor : '-' cte",
"comparador : '<'",
"comparador : '>'",
"comparador : menorigual",
"comparador : mayorigual",
"comparador : '='",
"comparador : distinto",
"tipo : i32",
"tipo : f32",
};

//#line 656 "gramatica.y"

private AnalizadorLexico lexico;
private AnalizadorSintactico sintactico;
private String ambito;
private int contadorFor;
private int contadorIf;
private int contadorWhen;

public void activarAmbito(){this.ambito = "$"; this.contadorFor = 0; this.contadorIf = 0; this.contadorWhen = 0;} // $ va a simblizar el ambito global.

public void setLexico(AnalizadorLexico lexico) { this.lexico = lexico; }

public void setSintactico(AnalizadorSintactico sintactico) { this.sintactico = sintactico; }

public AnalizadorLexico getLexico() { return this.lexico; }

public AnalizadorSintactico getSintactico() { return this.sintactico; }

public void agregarAmbito(String nuevo) {

	this.ambito = this.ambito + "#" + nuevo;

}

public String borrarAmbito(String ambito){
	if (ambito.length() > 1) { // si es 1 solo tiene el ambito global
		String [] aux = ambito.split("#"); // separo los elementos individuales del ambito
		String last = aux[aux.length - 1 ]; // obtengo el ultimo, el que tengo que eliminar
		return ambito.substring(0, ambito.length() - last.length() - 1);
	}
	return "$";
}

public int yylex() {
    int token = lexico.procesarYylex();
    if (lexico.getRefTablaSimbolos() != -1)
        yylval = new ParserVal(lexico.getRefTablaSimbolos());
    return token;
}

public void yyerror(String string) {
	//sintactico.addErrorSintactico("par: " + string);
}

// retorna -1 si no existe un identificador con el lexema dado en el ambito dado. Si existe, retorna el indice de la entrada existente.
public int enAmbito(ParserVal pv){

	String lexema = sintactico.getEntradaTablaSimb(pv.ival).getLexema();
	String ambitoAux = this.ambito;

	String [] aux = ambitoAux.split("#");
	for (int i = 0 ; i < aux.length ; i++){
		int existente = sintactico.getTS().existeEntrada(lexema + "~"+ambitoAux);
		sintactico.addErrorSintactico("LEX "+ lexema +" // BUSCANDO EN "+ambitoAux+ " // existente: "+existente);
		if (existente >= 0 ){
			return existente;
		}
		ambitoAux = borrarAmbito(ambitoAux);
	}
	return -1;
}

//#line 925 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 19 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("raiz", val_peek(0))); sintactico.setRaiz(yyval); }
break;
case 3:
//#line 26 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("primera_sentencia", val_peek(1)));}
break;
case 4:
//#line 27 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("primera_sentencia", val_peek(1)));}
break;
case 5:
//#line 28 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar el bloque.");}
break;
case 6:
//#line 29 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir el bloque.");}
break;
case 7:
//#line 32 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una declaración de CONSTANTE. (Línea " + AnalizadorLexico.LINEA + ")");
							  	  yyval = new ParserVal(sintactico.crearNodoControl("lista_ctes", val_peek(1)));}
break;
case 8:
//#line 34 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ; al final de la declaracion de constantes.");}
break;
case 9:
//#line 35 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): No se reconoce una lista de constantes.");}
break;
case 10:
//#line 38 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("declaracion_constante", val_peek(0), null));}
break;
case 11:
//#line 39 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("declaracion_constante", val_peek(0), val_peek(2)));}
break;
case 12:
//#line 44 "gramatica.y"
{
						int existente = enAmbito(val_peek(2));
						if (existente < 0) {
							int i = val_peek(2).ival;
							sintactico.setTipoEnIndex(sintactico.getTipoFromTS(val_peek(0).ival), i);
							sintactico.setUso("const", i);
							yyval = new ParserVal(sintactico.crearNodo("=:", new ParserVal(sintactico.crearHoja(val_peek(2).ival)), new ParserVal(sintactico.crearHoja(val_peek(0).ival))));
						} else {
							sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
						}

					}
break;
case 13:
//#line 56 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta constante luego de la asignacion.");}
break;
case 14:
//#line 57 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta el operador asignacion luego del identificador.");}
break;
case 15:
//#line 58 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta la asignacion luego del identificador.");}
break;
case 16:
//#line 62 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 17:
//#line 63 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 18:
//#line 68 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 19:
//#line 69 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 20:
//#line 70 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 21:
//#line 71 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));;}
break;
case 22:
//#line 75 "gramatica.y"
{
							String type = val_peek(2).sval;
						 	sintactico.completarConTipos(type);
						 	sintactico.addAnalisis("Se reconoció declaraciónes de variable de tipo " + type + ". (Línea " + AnalizadorLexico.LINEA + ")");
						  }
break;
case 23:
//#line 80 "gramatica.y"
{
             						sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): falta el tipo de variable");
             					  	sintactico.addAnalisis("Se reconoció declaraciónes de variable SIN TIPO. (Línea " + (AnalizadorLexico.LINEA-1) + ")");
             					   	sintactico.vaciarListaVariables();
             					  }
break;
case 27:
//#line 91 "gramatica.y"
{
							ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
							yyval = modificado;
						     }
break;
case 28:
//#line 95 "gramatica.y"
{
							yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));
						     }
break;
case 34:
//#line 105 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 35:
//#line 106 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 36:
//#line 110 "gramatica.y"
{
							sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta una ',' entre identIficadores.");
						 	int existente = enAmbito(val_peek(1));
							if (existente < 0) {
								sintactico.setLexemaEnIndex(val_peek(1).ival, "~"+this.ambito);
								sintactico.addListaVariables(val_peek(1).ival);
								sintactico.setUso("var", val_peek(1).ival);
							} else {
								sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
							}
						}
break;
case 37:
//#line 121 "gramatica.y"
{
							int existente = enAmbito(val_peek(2));
							if (existente < 0) {
								sintactico.setLexemaEnIndex(val_peek(2).ival, "~"+this.ambito);
								sintactico.addListaVariables(val_peek(2).ival);
								sintactico.setUso("var", val_peek(2).ival);
							} else {
								sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
							}
						  }
break;
case 38:
//#line 131 "gramatica.y"
{
                   					int existente = enAmbito(val_peek(0));
                   					if (existente < 0) {
                   						sintactico.setLexemaEnIndex(val_peek(0).ival, "~"+this.ambito);
                   						sintactico.addListaVariables(val_peek(0).ival);
							    	sintactico.setUso("var", val_peek(0).ival);
                   					} else {
                   						sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
                   					}
                   				  }
break;
case 39:
//#line 145 "gramatica.y"
{
				int existente = enAmbito(val_peek(0));
				if (existente < 0) {
					sintactico.setTipoEnIndex(val_peek(1).sval, val_peek(0).ival);
					sintactico.setLexemaEnIndex(val_peek(0).ival, "~"+this.ambito);
					sintactico.setUso("param", val_peek(0).ival);
				} else {
					sintactico.addErrorSintactico("SyntaxError. ENC_FUN/PARAMS (Línea " + AnalizadorLexico.LINEA + "): el identificador ya ha sido utilizado.");
				}
			}
break;
case 40:
//#line 156 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. PARAM(Línea " + AnalizadorLexico.LINEA + "): falta TIPO en parametros."); }
break;
case 41:
//#line 160 "gramatica.y"
{
				sintactico.setTipoGlobal(val_peek(0).sval);
			}
break;
case 42:
//#line 163 "gramatica.y"
{
				sintactico.addErrorSintactico("SyntaxError. ENCAB_FUN(Línea " + AnalizadorLexico.LINEA + "): falta tipo de funcion ");
	 	 		sintactico.addAnalisis("Se reconoce declaracion de funcion sin tipo (Línea " + AnalizadorLexico.LINEA + ")");
			}
break;
case 43:
//#line 169 "gramatica.y"
{
					sintactico.addAnalisis("Se reconoce cuerpo de funcion (Línea " + AnalizadorLexico.LINEA + ")");
					this.ambito = borrarAmbito(this.ambito);
 					yyval = val_peek(1);
 				}
break;
case 47:
//#line 179 "gramatica.y"
{ sintactico.addAnalisis("Se reconocen mas parametros de los deseados en la funcion (Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 48:
//#line 182 "gramatica.y"
{
								sintactico.addAnalisis( "Se reconocio declaracion de funcion (Línea " + AnalizadorLexico.LINEA + ")" );

                                                                sintactico.setTipoEnIndex(sintactico.getTipo(), val_peek(4).ival);
                                                                sintactico.clearTipo();


								String lexema = sintactico.getEntradaTablaSimb(val_peek(4).ival).getLexema();
								int existente = enAmbito(val_peek(4));
								if (existente < 0) { /* no existe el id en el ambito*/
									sintactico.setLexemaEnIndex(val_peek(4).ival, "~"+this.ambito);
									sintactico.setUso("func", val_peek(4).ival);
									agregarAmbito(lexema);
								} else {
									sintactico.addErrorSintactico("SyntaxError. ENC_FUN (Línea " + AnalizadorLexico.LINEA + "): el identificador ya ha sido utilizado.");
								}

							}
break;
case 49:
//#line 200 "gramatica.y"
{
	 								sintactico.addAnalisis("Se reconoce declaracion de funcion sin identificador (Línea " + AnalizadorLexico.LINEA + ")");
							   		sintactico.addErrorSintactico("SyntaxError. ENC_FUN (Línea " + AnalizadorLexico.LINEA + "): funcion sin identificar.");
								}
break;
case 50:
//#line 206 "gramatica.y"
{yyval = val_peek(0);}
break;
case 51:
//#line 210 "gramatica.y"
{ sintactico.addAnalisis("Se reconoce retorno de funcion(Línea " + AnalizadorLexico.LINEA + ") ");
						   	  yyval = new ParserVal(sintactico.crearNodoControl("return",val_peek(2)));}
break;
case 52:
//#line 212 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN1 (Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 53:
//#line 213 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN2(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 54:
//#line 214 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN3(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 55:
//#line 215 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN4(Línea " + AnalizadorLexico.LINEA + "): falta ; "); }
break;
case 63:
//#line 227 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 64:
//#line 228 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 65:
//#line 232 "gramatica.y"
{
									ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
									yyval = modificado;
								}
break;
case 66:
//#line 236 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 67:
//#line 239 "gramatica.y"
{
											ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
											yyval = modificado;
										}
break;
case 68:
//#line 243 "gramatica.y"
{
										ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
										yyval = modificado;
									}
break;
case 69:
//#line 247 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 70:
//#line 248 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 71:
//#line 253 "gramatica.y"
{ yyval.sval = new String("=:"); }
break;
case 72:
//#line 254 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP1(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 73:
//#line 255 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 74:
//#line 259 "gramatica.y"
{
							int existente = enAmbito(val_peek(3));
							if (existente >= 0) {
								ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
								yyval = new ParserVal(sintactico.crearNodo("=:", identificador , val_peek(1)));
								sintactico.eliminarEntrada(val_peek(3).ival);
							} else {
								sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): variable no declarada.");
							}
					  	}
break;
case 75:
//#line 269 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP(Línea " + (AnalizadorLexico.LINEA) + "): falta ';' luego de la ASIG."); }
break;
case 76:
//#line 270 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodo("=:", val_peek(3), val_peek(1)));}
break;
case 77:
//#line 274 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodo("else", val_peek(2), val_peek(0)));}
break;
case 78:
//#line 275 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): problema en devolver valor por defecto  ");}
break;
case 79:
//#line 278 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodoControl("out", new ParserVal(sintactico.crearHoja(val_peek(2).ival))));}
break;
case 80:
//#line 279 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de la impresión de cadena."); }
break;
case 81:
//#line 280 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): cierre erróneo de la lista de parámetros de out."); }
break;
case 82:
//#line 281 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): los parámetros de out deben estar entre paréntesis."); }
break;
case 83:
//#line 282 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): se esperaba out, se encontró '('."); }
break;
case 84:
//#line 283 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta declarar una cadena para PRINT."); }
break;
case 85:
//#line 288 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));
									sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 86:
//#line 290 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 87:
//#line 291 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 88:
//#line 295 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cond",val_peek(1)));}
break;
case 89:
//#line 296 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 90:
//#line 297 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 91:
//#line 298 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 92:
//#line 302 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo", val_peek(1), val_peek(0)));}
break;
case 93:
//#line 303 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo", val_peek(0), null));}
break;
case 94:
//#line 304 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta bloque then."); }
break;
case 95:
//#line 308 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(1)));}
break;
case 96:
//#line 309 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(0)));}
break;
case 97:
//#line 313 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(1)));}
break;
case 98:
//#line 314 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(0)));}
break;
case 99:
//#line 317 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
								   yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));}
break;
case 100:
//#line 319 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 101:
//#line 320 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 102:
//#line 323 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo",val_peek(1),val_peek(0)));}
break;
case 103:
//#line 324 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo",val_peek(0),null));}
break;
case 104:
//#line 325 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 105:
//#line 328 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1)));}
break;
case 106:
//#line 329 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(0)));}
break;
case 107:
//#line 332 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(1)));}
break;
case 108:
//#line 333 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(0)));}
break;
case 109:
//#line 336 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
									   yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));}
break;
case 110:
//#line 338 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 111:
//#line 339 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 112:
//#line 342 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo",val_peek(1),val_peek(0)));}
break;
case 113:
//#line 343 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo",val_peek(0),null));}
break;
case 114:
//#line 344 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 115:
//#line 347 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1)));}
break;
case 116:
//#line 348 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(0)));}
break;
case 117:
//#line 351 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(1)));}
break;
case 118:
//#line 352 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(0)));}
break;
case 119:
//#line 355 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
									  yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));
									}
break;
case 120:
//#line 358 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 121:
//#line 359 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 122:
//#line 362 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo",val_peek(1),val_peek(0)));}
break;
case 123:
//#line 363 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo",val_peek(0),null));}
break;
case 124:
//#line 364 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 125:
//#line 367 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(1)));}
break;
case 126:
//#line 368 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(0)));}
break;
case 127:
//#line 371 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(1)));}
break;
case 128:
//#line 372 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(0)));}
break;
case 129:
//#line 374 "gramatica.y"
{this.contadorIf++; agregarAmbito("if-then"+contadorIf);}
break;
case 130:
//#line 377 "gramatica.y"
{this.ambito = borrarAmbito(this.ambito); agregarAmbito("if-else"+this.contadorIf);}
break;
case 131:
//#line 380 "gramatica.y"
{this.ambito = borrarAmbito(this.ambito);}
break;
case 132:
//#line 387 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia when");
								  yyval = new ParserVal(sintactico.crearNodo("when", val_peek(3), val_peek(1)));}
break;
case 133:
//#line 389 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta abrir paréntesis la condicion"); }
break;
case 134:
//#line 390 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta paréntesis de cierre en la condicion."); }
break;
case 135:
//#line 393 "gramatica.y"
{yyval = val_peek(0); agregarAmbito("when"+this.contadorWhen); this.contadorWhen++;}
break;
case 136:
//#line 397 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1))); this.ambito = borrarAmbito(this.ambito); }
break;
case 137:
//#line 398 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar la llave del bloque."); }
break;
case 138:
//#line 399 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir la llave del bloque"); }
break;
case 139:
//#line 407 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")");
							  	yyval = new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)));
							}
break;
case 140:
//#line 410 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 141:
//#line 411 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 142:
//#line 412 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR3(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 143:
//#line 413 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");
//               													int existente = enAmbito(val_peek(6));
//               													if (existente < 0 ) {
//               														sintactico.setLexemaEnIndex(val_peek(6).ival,"~"+this.ambito+"#for"+(this.contadorFor-1));
//               														sintactico.setUso("tag",val_peek(6).ival);
//               														yyval = new ParserVal( sintactico.crearNodo("for-etiquetado", new ParserVal(sintactico.crearHoja(val_peek(6).ival)), new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)))));
//               													} else {
//               														sintactico.addErrorSintactico("SyntaxError. FOR(Línea " + AnalizadorLexico.LINEA + "): el identificador de la etiqueta ya ha sido utilizado.");
//               													}
               													agregarAmbito("for"+(this.contadorFor-1));
														int existente = enAmbito(val_peek(6));
														if (existente >= 0) {
															if (sintactico.getEntradaTablaSimb(existente).getUso().equals("tag")) {
																yyval = new ParserVal(sintactico.crearNodoControl("continue", new ParserVal(sintactico.crearHoja(existente))));
																sintactico.eliminarEntrada(val_peek(6).ival);
															} else {
																sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): el identificador utilizado no es una etiqueta.");
															}
														} else {
															sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): etiqueta invalida");
														}
														this.ambito = borrarAmbito(this.ambito);
               												}
break;
case 144:
//#line 439 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("encabezado for",val_peek(2), val_peek(0)));

						sintactico.addErrorSintactico("el ambito es "+this.ambito);
						}
break;
case 145:
//#line 445 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("condicion y operacion for",  val_peek(2), val_peek(0)));}
break;
case 146:
//#line 449 "gramatica.y"
{
						int existente = enAmbito(val_peek(2));
						if (existente >= 0) {
							if (sintactico.getEntradaTablaSimb(existente).getUso().equals("for_var")) {
								String lexExistente = sintactico.getEntradaTablaSimb(existente).getLexema();
								String [] aux = lexExistente.split("~");

								String ambitoExistente = aux[1];

								if ( ambitoExistente.equals(this.ambito)) {
									ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
									ParserVal constante = new ParserVal(sintactico.crearHoja(val_peek(0).ival));
									yyval = new ParserVal(sintactico.crearNodoControl("cond", new ParserVal(sintactico.crearNodo(val_peek(1).sval,identificador,constante))));
									sintactico.eliminarEntrada(val_peek(2).ival);
								} else {
									sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable utilizada no corresponde a este for loop");
								}
							} else {
								sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable utilizada en la condicion debe ser la declarada en el for loop.");
							}
						} else {
							sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): COND la variable usada no ha sido declarada.");
						}

				     	}
break;
case 147:
//#line 476 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(2))); this.ambito = borrarAmbito(this.ambito); sintactico.addErrorSintactico("el ambito es "+this.ambito);}
break;
case 148:
//#line 477 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(0)));}
break;
case 150:
//#line 481 "gramatica.y"
{yyval.sval = new String("+");}
break;
case 151:
//#line 482 "gramatica.y"
{yyval.sval = new String("-");}
break;
case 159:
//#line 493 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 160:
//#line 494 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten retornos fuera de una funcion"); }
break;
case 162:
//#line 500 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(2)));this.ambito = borrarAmbito(this.ambito); sintactico.addErrorSintactico("el ambito es "+this.ambito);}
break;
case 163:
//#line 501 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(0)));}
break;
case 164:
//#line 505 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")");
                        							yyval = new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)));

									}
break;
case 165:
//#line 509 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 166:
//#line 510 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 167:
//#line 511 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR3(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 168:
//#line 512 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 169:
//#line 516 "gramatica.y"
{
					agregarAmbito("for"+this.contadorFor);
					this.contadorFor++;
					int existente = enAmbito(val_peek(2));
					if (existente < 0){
						sintactico.setLexemaEnIndex(val_peek(2).ival, "~"+this.ambito);
						sintactico.setUso("for_var", val_peek(2).ival);
						ParserVal identificador = new ParserVal(sintactico.crearHoja(val_peek(2).ival));
						ParserVal constante = new ParserVal(sintactico.crearHoja(val_peek(0).ival));
						yyval = new ParserVal(sintactico.crearNodoControl("asignacionFor",new ParserVal(sintactico.crearNodo("=:",identificador,constante))));
					} else {
						sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): la variable utilizada para el for loop ya ha sido declarada.");
					}
				   }
break;
case 170:
//#line 535 "gramatica.y"
{
					int existente = enAmbito(val_peek(0));
					if (existente >= 0) {
						if (sintactico.getEntradaTablaSimb(existente).getUso().equals("for_var")) {
							String lexExistente = sintactico.getEntradaTablaSimb(existente).getLexema();
							String [] aux = lexExistente.split("~");
                                                        String ambitoExistente = aux[1];
							if ( ambitoExistente.equals(this.ambito)) {
								yyval = new ParserVal(sintactico.crearNodoControl("operacionFor",new ParserVal(sintactico.crearNodo(val_peek(1).sval,new ParserVal(sintactico.crearHoja(existente)),null))));
								sintactico.eliminarEntrada(val_peek(0).ival);
							} else {
								sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): OP la variable utilizada no corresponde a este for loop");
							}
						} else {
							sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): OP la variable utilizada en la condicion debe ser la declarada en el for loop.");
						}
					} else {
						sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): OP la variable usada no ha sido declarada.");
					}
					}
break;
case 179:
//#line 565 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 180:
//#line 569 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 181:
//#line 570 "gramatica.y"
{
									ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
									yyval = modificado;
								}
break;
case 182:
//#line 578 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio una sentencia break (Línea " + AnalizadorLexico.LINEA + ")");
					yyval = new ParserVal(sintactico.crearNodoControl("break",null));}
break;
case 183:
//#line 580 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio una sentencia break con retorno de valor (Línea " + AnalizadorLexico.LINEA + ")");
                			yyval = new ParserVal(sintactico.crearNodoControl("break", new ParserVal(sintactico.crearHoja(val_peek(1).ival))));}
break;
case 184:
//#line 582 "gramatica.y"
{	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de BREAK."); }
break;
case 185:
//#line 586 "gramatica.y"
{
							sintactico.addAnalisis("Se reconocio una sentencia continue (Línea " + AnalizadorLexico.LINEA + ")");
							yyval = new ParserVal(sintactico.crearNodoControl("continue",null));}
break;
case 186:
//#line 589 "gramatica.y"
{ 	sintactico.addAnalisis("Se reconocio una sentencia continue con etiquetado(Línea " + AnalizadorLexico.LINEA + ")");
                   					int existente = enAmbito(val_peek(1));
							if (existente < 0 ) {
								sintactico.setLexemaEnIndex(val_peek(1).ival,"~"+this.ambito);
								sintactico.setUso("tag",val_peek(1).ival);
								yyval = new ParserVal(sintactico.crearNodoControl("continue", new ParserVal(sintactico.crearHoja(existente))));
							} else {
								sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): el identificador de la etiqueta ya ha sido utilizado.");
							}
                   					}
break;
case 187:
//#line 599 "gramatica.y"
{ 	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ':'CONTINUE."); }
break;
case 188:
//#line 600 "gramatica.y"
{ 	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego del CONTINUE "); }
break;
case 189:
//#line 604 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodoFunc(val_peek(4).ival, val_peek(2)));}
break;
case 190:
//#line 605 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodoFunc(val_peek(3).ival, null));}
break;
case 191:
//#line 608 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("param", val_peek(2), val_peek(0)));}
break;
case 192:
//#line 609 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("param", val_peek(0), null));}
break;
case 193:
//#line 613 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodo(val_peek(1).sval, val_peek(2), val_peek(0)));}
break;
case 194:
//#line 617 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo(val_peek(1).sval, val_peek(2), val_peek(0))); }
break;
case 196:
//#line 622 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("*",val_peek(2),val_peek(0)));}
break;
case 197:
//#line 623 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("/",val_peek(2),val_peek(0)));}
break;
case 199:
//#line 628 "gramatica.y"
{ 	yyval = new ParserVal(sintactico.crearHoja(val_peek(0).ival));}
break;
case 200:
//#line 629 "gramatica.y"
{
				String type = sintactico.getTipoFromTS(val_peek(0).ival);
				if (type.equals("LONG"))
				     sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
				yyval = new ParserVal(sintactico.crearHoja(val_peek(0).ival));
                  	}
break;
case 201:
//#line 635 "gramatica.y"
{
				sintactico.setNegativoTablaSimb(val_peek(0).ival);
				yyval = new ParserVal(sintactico.crearHoja(val_peek(1).ival));
                   	}
break;
case 202:
//#line 642 "gramatica.y"
{ yyval.sval = new String("<") ; }
break;
case 203:
//#line 643 "gramatica.y"
{ yyval.sval = new String(">") ; }
break;
case 204:
//#line 644 "gramatica.y"
{ yyval.sval = new String("<="); }
break;
case 205:
//#line 645 "gramatica.y"
{ yyval.sval = new String(">="); }
break;
case 206:
//#line 646 "gramatica.y"
{ yyval.sval = new String("=") ; }
break;
case 207:
//#line 647 "gramatica.y"
{ yyval.sval = new String("=!"); }
break;
case 208:
//#line 651 "gramatica.y"
{ yyval.sval = new String("i32"); }
break;
case 209:
//#line 652 "gramatica.y"
{ yyval.sval = new String("f32"); }
break;
//#line 1984 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
