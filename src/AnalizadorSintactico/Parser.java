//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"

package AnalizadorSintactico;

import java.util.Vector;

import AnalizadorLexico.AnalizadorLexico;
import AnalizadorSintactico.AnalizadorSintactico;
import AnalizadorLexico.Token;

//#line 27 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short id=257;
public final static short cte=258;
public final static short If=259;
public final static short then=260;
public final static short Else=261;
public final static short end_if=262;
public final static short out=263;
public final static short fun=264;
public final static short Return=265;
public final static short BREAK=266;
public final static short i32=267;
public final static short when=268;
public final static short For=269;
public final static short CONTINUE=270;
public final static short f32=271;
public final static short cadena=272;
public final static short menorigual=273;
public final static short mayorigual=274;
public final static short distinto=275;
public final static short opasignacion=276;
public final static short Const=277;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    2,    2,    2,    2,    4,    4,    4,    5,
    5,    6,    6,    6,    6,    8,    8,    3,    3,    3,
    3,   10,   10,   10,   10,   10,   16,   16,   11,   11,
   11,   11,   11,   11,   11,   13,   13,   13,   24,   24,
   25,   25,   26,   28,   28,   28,   28,   29,   29,   14,
   30,   30,   30,   30,   30,   27,   33,   33,   33,   33,
   33,   33,   33,   33,   36,   36,   32,   32,   32,   32,
    7,    7,    7,   17,   17,   17,   37,   37,   18,   18,
   18,   18,   18,   18,   19,   19,   19,   38,   38,   38,
   38,   39,   39,   39,   41,   41,   42,   42,   43,   43,
   43,   44,   44,   44,   45,   45,   46,   46,   34,   34,
   34,   47,   47,   47,   48,   48,   49,   49,   50,   50,
   50,   51,   51,   51,   52,   52,   53,   53,   15,   15,
   15,   57,   57,   57,   58,   58,   58,   58,   58,   59,
   63,   56,   60,   60,   61,   61,    9,    9,    9,    9,
    9,    9,    9,    9,    9,   20,   66,   66,   35,   35,
   35,   35,   35,   62,   64,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   54,   54,   22,   22,   22,   23,
   23,   23,   23,   21,   21,   67,   67,   40,   31,   31,
   69,   69,   69,   68,   68,   68,   65,   65,   65,   65,
   65,   65,   12,   12,
};
final static short yylen[] = {                            2,
    2,    1,    4,    3,    2,    2,    3,    3,    3,    1,
    3,    3,    3,    3,    2,    1,    2,    1,    1,    2,
    2,    3,    3,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    2,    2,    2,    3,    1,    2,    2,
    2,    0,    3,    0,    1,    3,    1,    6,    6,    2,
    5,    5,    5,    4,    5,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    2,    1,    2,    2,    1,    1,
    1,    2,    1,    4,    4,    4,    3,    2,    5,    5,
    5,    4,    3,    5,    5,    6,    5,    3,    2,    2,
    1,    2,    1,    1,    4,    2,    4,    2,    5,    5,
    4,    2,    1,    2,    4,    2,    4,    2,    5,    5,
    4,    2,    1,    2,    4,    2,    4,    2,    5,    5,
    4,    2,    1,    2,    4,    2,    4,    2,    6,    6,
    6,    4,    4,    4,    5,   12,   11,   13,   14,    3,
    3,    3,    4,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    1,    4,    1,    5,   12,
   11,   13,   14,    3,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    1,    2,    2,    3,    2,    2,
    4,    4,    2,    5,    4,    3,    1,    3,    3,    1,
    3,    3,    1,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,
};
final static short yydefred[] = {                         0,
    2,    0,    0,    0,    0,    0,    0,    0,  203,    0,
    0,    0,  204,    0,    0,    0,    0,    0,   25,   18,
   19,    0,    0,   24,   26,   29,   30,   31,   32,   33,
    0,    0,    0,  156,    0,   71,    0,    0,    0,   73,
    0,   36,  194,  195,    0,    0,    0,    0,    0,  193,
    0,    0,    0,    0,    0,  179,    0,  177,    0,    0,
    0,    0,    0,  183,    0,  180,    0,    0,    0,    0,
   10,    0,    0,    0,    6,   20,   21,    0,    0,   34,
   35,    0,   50,   37,    0,   72,    0,    0,    0,    0,
    0,    0,    0,    0,  196,  199,  200,  202,  201,  145,
  146,  197,  198,    0,    0,    0,    0,    0,    0,   94,
   89,    0,    0,    0,    0,    0,    0,   47,    0,    0,
    0,    0,  178,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   15,    0,    0,    9,    8,    7,    0,
    4,   83,    0,   22,   23,    0,    0,    0,    0,   70,
   57,   59,   60,    0,    0,    0,   62,    0,   69,   58,
   61,    0,  185,    0,    0,    0,   78,    0,   75,   74,
   76,   88,    0,    0,    0,    0,    0,   96,    0,    0,
   98,    0,   92,  191,  192,   82,    0,    0,    0,    0,
   40,   39,    0,    0,  142,    0,    0,    0,    0,    0,
    0,    0,    0,  182,  181,   14,   13,   12,   11,    3,
    0,    0,    0,    0,    0,    0,   63,   64,   43,   68,
   67,    0,  184,  186,   77,   28,    0,   87,    0,    0,
   85,   81,   80,   79,   84,    0,   46,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  144,    0,
  147,  148,  149,  151,  152,  153,    0,  150,  135,    0,
  140,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   95,   27,   86,   97,   48,   41,
   49,    0,    0,  129,  131,  130,    0,    0,    0,    0,
   16,  154,  155,    0,    0,    0,    0,  116,    0,  118,
  111,    0,  112,  114,    0,    0,   54,    0,    0,    0,
    0,    0,  133,  132,  134,    0,    0,    0,    0,    0,
    0,    0,    0,   17,    0,  141,    0,   66,    0,    0,
  110,  109,   53,   55,   51,   52,    0,    0,    0,    0,
    0,  166,  167,  170,  171,  172,  169,  168,  173,  158,
  159,    0,    0,    0,    0,  106,    0,  108,  101,    0,
  102,  104,  143,  165,    0,  115,   65,  117,    0,    0,
    0,    0,  175,  174,    0,    0,    0,    0,    0,  100,
   99,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  176,    0,    0,    0,    0,  105,  107,    0,    0,    0,
    0,  126,    0,  128,  121,    0,  122,  124,  157,    0,
    0,  137,    0,    0,    0,    0,    0,    0,  120,  119,
    0,  136,    0,    0,    0,    0,    0,  125,  127,    0,
  138,    0,    0,  161,    0,  139,    0,  160,    0,    0,
  162,  163,
};
final static short yydgoto[] = {                          2,
    3,   17,   18,   19,   70,   71,   41,  290,  249,  250,
   21,   22,   23,   24,   25,  227,   26,   27,   28,   29,
   30,   31,   32,  121,  239,   83,  156,  122,   33,  257,
   47,  158,  328,  160,  348,  329,   93,   48,  108,   49,
  109,  110,  258,  320,  321,  322,  265,  266,  267,  349,
  387,  388,  389,  372,  350,   61,  198,   34,  130,  259,
  104,  131,  261,  326,  105,  351,   88,   50,   51,
};
final static short yysindex[] = {                      -226,
    0,    0,  887,  -35,   35,  -16,    5,  -32,    0,   12,
   37,  104,    0,  -30, 1100, -234,  -64,  940,    0,    0,
    0, -184,   52,    0,    0,    0,    0,    0,    0,    0,
 -129, -122,   25,    0,  -14,    0, -184,  -41,   57,    0,
   18,    0,    0,    0,   38, -100,  -27,  -52,  124,    0,
    9,  -88,  -28,  137, -118,    0,  123,    0,   56,  -71,
  149,  -17,  -63,    0,  147,    0,  -39,   27,   28,  -23,
    0,  957,   51, 1100,    0,    0,    0,  238,   62,    0,
    0,  982,    0,    0,  296,    0,  253,  301,  300,  288,
 -195,   49,  289,  310,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   38,   38, 1121,  377,   91,  106,    0,
    0,   38,   38,  309,  -24,  114, -118,    0,  115,  119,
  333,  338,    0,  122,   -2,  121,  324,  129,  -17,  349,
  332,  139,  340,    0,  141, -182,    0,    0,    0,  146,
    0,    0,  999,    0,    0,  -12,   35,   41,   47,    0,
    0,    0,    0,  148,  152,  285,    0,  982,    0,    0,
    0,  156,    0,  359,   38,  150,    0,  170,    0,    0,
    0,    0,    9,  158,  -36, 1148,  932,    0, -198,  932,
    0,  372,    0,    0,    0,    0,  374,    1,  375,  394,
    0,    0, -120,  378,    0, 1036,  121,  379,  380,  381,
  184,  673,  -71,    0,    0,    0,    0,    0,    0,    0,
  -18,  -47,   38,  100,  -17,  186,    0,    0,    0,    0,
    0,  -17,    0,    0,    0,    0,  220,    0,  190, 1156,
    0,    0,    0,    0,    0,  378,    0, -176,  191, 1100,
 1060,  391,  195,  196,  -71,  396,   35, 1021,    0,  201,
    0,    0,    0,    0,    0,    0,  205,    0,    0,  404,
    0,  415,    8,  199, -172,  210,  216,  101,  217,  416,
  218,  -17,  450,  235,    0,    0,    0,    0,    0,    0,
    0,  485,  239,    0,    0,    0,  437,  -71,  -45,  697,
    0,    0,    0,  158,  240,  -21, 1172,    0, 1172,    0,
    0,   30,    0,    0,  245,   54,    0,  249,  448,  254,
  719,  454,    0,    0,    0,  158,  456,  735,  750, -163,
  256,  262,  460,    0,  265,    0,  -17,    0,  501, 1129,
    0,    0,    0,    0,    0,    0,  -71,  466,   35, 1079,
  270,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -71,  271,  158, 1021,    0, 1021,    0,    0,   69,
    0,    0,    0,    0,  269,    0,    0,    0,  470,  -71,
   98,  766,    0,    0,  471,  463,  275,  787,  803,    0,
    0,  478,  158,  476,  822,  846, -156,  277,  283,  481,
    0,  158,  673,  286,  503,    0,    0,  -71,  292,  158,
 1079,    0, 1079,    0,    0,   71,    0,    0,    0,  293,
  290,    0,  673,  492,  654,  295,  868,  913,    0,    0,
  513,    0,  302,  158,  719,  303,  515,    0,    0,  673,
    0,  304,  307,    0,  719,    0,  527,    0,  316,  719,
    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,  514,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  574,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  514,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  102,    0,
   60,    0,    0,    0,  534,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   55,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  535,   67,
    0,    0,    0,  105,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -106,    0,
    0,    0,    0,    0,    0,    0,  534,    0,    0,    0,
  536,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  514,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  453,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  364,  -31,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  323,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  457,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  522,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -81,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  522,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -65,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,   -4,    0,    0,  447,  -61, -157, -183,   -3,
  -10,  -13,  167,    0,    0,  408,  -29,  130,    0,  -38,
  272,  406,  475,  399,  353,    0,    0,  477,    0,  181,
  268,    0,  -80,    0,  -76,  294,    0,  155,  489,  552,
    0,  491,    0,    0,    0,  282,    0,    0,  339,    0,
    0,    0,  221, -196,   81,  -46,  -72,    0,  388, -261,
  291,    0,    0,    0,  554, -368,    0,   11,  507,
};
final static int YYTABLESIZE=1442;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         20,
  128,  159,   91,   39,   39,  161,  136,   77,   37,  188,
   72,   20,  116,  125,   76,  100,  188,  101,   39,   86,
  140,   38,   38,   53,   40,   40,   58,   39,   69,   37,
    1,   37,  102,   99,  103,  139,  211,   73,  197,   40,
  127,  120,   86,   40,   55,  211,  426,   16,   40,   89,
  112,   60,  151,  199,    5,  113,  433,  228,   74,  234,
  167,   77,   46,  229,  291,  168,  439,  201,   76,  143,
   20,  442,   35,  207,   45,  208,   63,  221,  150,   46,
  213,  161,   46,  301,  127,   46,  216,   40,  332,  302,
    9,  100,  359,  101,   13,  178,  181,   87,  360,  405,
  190,   46,  190,  120,  190,  406,  324,  170,  194,  194,
   79,  194,  335,  194,  394,  102,   99,  103,  190,  190,
  190,  190,  184,  185,  242,  194,   80,  381,  151,  420,
  297,  411,   77,   81,  356,  358,  119,  118,  119,   76,
  270,  306,  100,  100,  101,  101,    9,   82,    9,   93,
   13,  423,   13,  271,  220,   93,  260,   95,  269,  305,
  274,   67,   66,  253,  111,  178,  226,  114,  436,  226,
   42,  291,  251,  291,  113,  224,  117,    5,  103,  120,
  113,  123,  298,  300,  103,   59,  161,  161,   78,  126,
  123,  241,   20,  129,  324,  324,  123,  378,  287,  379,
  100,   42,  101,   84,  417,  132,  418,  106,  107,  253,
  310,  152,  263,  264,  318,  319,  276,  133,  251,  276,
  161,   35,  161,   56,  280,   57,   68,   85,  188,  188,
   77,  187,  138,  151,  151,  282,   20,   76,   16,   36,
   36,  317,   35,  115,   35,   96,   97,   98,  367,  367,
  262,  253,  161,  161,   36,   52,  233,  196,   36,   16,
  251,   54,  157,   36,  296,  365,  147,  151,   59,  151,
    6,   77,  148,    8,   90,   44,  149,   12,   76,  253,
  253,  342,  134,  137,  135,  331,   11,  152,  251,  251,
  369,   43,   44,   62,   43,   44,  144,   43,   44,  151,
  151,  212,   36,  215,  169,  375,  142,  341,   92,  334,
  342,  163,   42,   43,   44,  190,  253,  145,  253,  190,
  190,  299,  194,  384,  380,  251,  419,  251,   96,   97,
   98,  252,  190,  190,  190,  162,  341,  253,  157,  253,
  253,  164,  342,  165,  275,  166,  251,  171,  251,  251,
  172,  414,  182,  153,  253,  342,  342,  385,  386,   64,
   65,   91,   91,  251,   90,   90,  107,  186,  341,  189,
  191,  342,  174,  342,  253,  192,  193,  252,  194,  195,
  196,  341,  341,  251,   86,  342,  200,  342,  342,  202,
  203,  253,  152,  152,  204,  342,  206,  341,  205,  341,
  251,  289,   68,  217,  189,  342,  189,  218,  189,  219,
  342,  341,  222,  341,  341,  214,   16,  223,   85,  252,
  373,  341,  189,  189,  189,  189,  152,  225,  152,  153,
  231,  341,  232,  235,  236,  238,  341,  243,  244,  245,
  343,  246,  272,  157,  157,  277,  281,  252,  252,  284,
  285,  286,  391,  288,  295,  296,  292,  147,  152,  152,
  293,    6,  294,  148,    8,  402,  404,  149,   12,  343,
  264,  304,  307,  254,  308,  309,  175,  157,    5,  157,
  268,  373,    6,  373,  252,    8,  252,  154,   11,   12,
  311,  347,  312,  371,  315,  316,  327,  391,  391,  180,
  333,  343,   16,  393,  336,  252,  337,  252,  252,  157,
  157,  338,  352,  354,  343,  343,  319,  362,  363,  254,
  347,  364,  252,  370,   16,  374,  382,  376,  383,  392,
  343,  395,  343,  400,  153,  153,  398,  386,  408,  409,
   16,  412,  252,  413,  343,  422,  343,  343,  415,  421,
  424,  427,  347,  430,  343,  435,  155,  431,  434,  252,
  437,  254,  438,  154,  343,  347,  347,  440,  153,  343,
  153,  441,   38,    1,   44,  187,   45,   56,   42,   42,
  164,  347,  344,  347,  325,  248,  209,  230,  279,  254,
  254,  237,  330,  190,  179,  347,   94,  347,  347,  183,
  153,  153,  361,  273,  303,  347,  353,  255,  407,  314,
  173,  344,  124,    0,    0,  347,    0,    0,    0,  189,
  347,    0,    0,  189,  189,  366,  254,    0,  254,    0,
    0,    0,  155,  175,    0,    5,  189,  189,  189,    6,
    0,    0,    8,  344,  377,   11,   12,  254,    0,  254,
  254,    0,    0,  255,    0,    0,  344,  344,    0,    0,
    0,    0,    0,    0,  254,    0,    0,    0,  154,  154,
    0,    0,  344,  399,  344,    0,  256,    0,    0,    0,
    0,    0,  410,    0,  254,    0,  344,    0,  344,  344,
  416,    0,    0,   16,  425,  255,  344,    0,    0,    0,
    0,  254,  154,    0,  154,    0,  344,    0,    0,    0,
    0,  344,   16,    0,  432,    0,  345,    0,    0,    4,
    0,  247,  256,  255,  255,    6,    7,  148,    8,    9,
   10,   11,   12,   13,  154,  154,   16,  155,  155,   14,
  313,    4,    0,    5,    0,  345,    0,    6,    7,    0,
    8,    9,   10,   11,   12,   13,    0,  296,   16,  147,
  255,   14,  255,    6,  256,  148,    8,    0,    0,  149,
   12,  155,    0,  155,   16,    0,  340,  345,    0,    0,
    0,  255,    0,  255,  255,  346,    0,    0,    0,   16,
  345,  345,  256,  256,    0,  248,    0,    0,  255,    0,
    0,    0,    0,  155,  155,   16,  345,    0,  345,    0,
    0,    0,    0,    0,  346,    0,    0,    0,  255,    0,
  345,  323,  345,  345,    0,    0,   16,    0,    0,  256,
  345,  256,    0,    0,    0,  255,    0,    0,    0,    0,
  345,  340,   16,    0,    0,  345,  346,    0,    0,    0,
  256,    0,  256,  256,    0,    0,    0,  355,    0,  346,
  346,   16,    0,    0,    0,    0,    0,  256,    0,    0,
    0,    0,  357,    0,    0,  346,    0,  346,    0,    0,
    0,    0,    0,    0,    0,   16,    0,  256,    0,  346,
  390,  346,  346,    0,    0,    0,    0,    0,    0,  346,
    0,    0,    0,    0,  256,    0,    0,   16,    0,  346,
  146,  396,  339,    0,  346,    0,    6,    7,  148,    8,
    9,   10,  149,   12,   13,    0,   16,  397,    0,    4,
   14,  247,    0,    0,    0,    6,    7,  148,    8,    9,
   10,   11,   12,   13,  401,    0,    0,    0,    0,   14,
    0,    0,   16,    4,    0,  247,    0,    0,    0,    6,
    7,  148,    8,    9,   10,   11,   12,   13,  403,    0,
    0,   16,    0,   14,    0,  146,    0,  339,    0,   16,
    0,    6,    7,  148,    8,    9,   10,  149,   12,   13,
    0,    4,  428,  247,    0,   14,   16,    6,    7,  148,
    8,    9,   10,   11,   12,   13,    4,    0,  247,   15,
    0,   14,    6,    7,  148,    8,    9,   10,   11,   12,
   13,   16,  146,    0,  339,    0,   14,    0,    6,    7,
  148,    8,    9,   10,  149,   12,   13,  429,   16,    0,
    0,    0,   14,    4,    0,  247,    0,    0,    0,    6,
    7,  148,    8,    9,   10,   11,   12,   13,    0,    4,
   16,  247,    0,   14,   75,    6,    7,  148,    8,    9,
   10,   11,   12,   13,    0,   16,    0,    0,  146,   14,
  339,  141,    0,    0,    6,    7,  148,    8,    9,   10,
  149,   12,   13,    0,    0,    0,    0,    0,   14,   16,
    0,    0,  146,    0,  339,    0,    0,    0,    6,    7,
  148,    8,    9,   10,  149,   12,   13,    0,   16,    0,
    0,    0,   14,  210,  146,    0,  339,    0,    0,    0,
    6,    7,  148,    8,    9,   10,  149,   12,   13,   16,
    0,    0,    0,    4,   14,    5,    0,    0,    0,    6,
    7,    0,    8,    9,   10,   11,   12,   13,  240,    0,
   16,    0,    0,   14,    0,    0,    0,    0,   16,  146,
    0,  339,    0,    0,    0,    6,    7,  148,    8,    9,
   10,  149,   12,   13,  283,    0,    0,   16,  175,   14,
    5,    0,    0,    0,    6,   16,    4,    8,    5,    0,
   11,   12,    6,    7,    0,    8,    9,   10,   11,   12,
   13,   16,    0,    4,    0,    5,   14,    0,    0,    6,
    7,    0,    8,    9,   10,   11,   12,   13,    0,    0,
    0,    0,    0,   14,    0,    0,    0,    0,  146,    0,
  147,    0,    0,  177,    6,    7,  148,    8,    9,   10,
  149,   12,   13,  368,    0,    4,    0,    5,   14,    0,
    0,    6,    7,    0,    8,    9,   10,   11,   12,   13,
  177,    0,    0,    0,    0,   14,    0,    4,    0,  247,
  278,    0,    0,    6,    7,  148,    8,    9,   10,   11,
   12,   13,    4,    0,    5,    0,    0,   14,    6,    7,
    0,    8,    9,   10,   11,   12,   13,    0,    0,    0,
    0,    0,   14,    0,    0,    0,    4,    0,    5,    0,
    0,    0,    6,    7,    0,    8,    9,   10,   11,   12,
   13,    0,    0,    0,    0,  146,   14,  339,    0,    0,
    0,    6,    7,  148,    8,    9,   10,  149,   12,   13,
    0,    0,    0,    0,    0,   14,    4,    0,    5,    0,
    0,    0,    6,    7,    0,    8,    9,   10,   11,   12,
   13,    0,    0,    0,    0,    0,   14,  175,    0,    5,
  176,  107,    0,    6,    0,  296,    8,  147,    0,   11,
   12,    6,    0,  148,    8,    0,    0,  149,   12,    0,
    0,    0,    0,    0,  175,    0,    5,    0,    0,    0,
    6,    0,  175,    8,    5,    0,   11,   12,    6,    0,
    0,    8,    0,    0,   11,   12,    0,    0,  296,    0,
  147,    0,    0,    0,    6,    0,  148,    8,    0,    0,
  149,   12,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          3,
   62,   82,   41,   40,   40,   82,   68,   18,   44,   41,
   15,   15,   41,   60,   18,   43,   41,   45,   40,   61,
   44,   58,   58,   40,   61,   61,   59,   40,   59,   44,
  257,   44,   60,   61,   62,   59,   58,  272,   41,   61,
   58,   55,   61,   61,   40,   58,  415,   40,   61,   39,
   42,   40,   82,  126,    0,   47,  425,  256,  123,   59,
  256,   72,   45,  262,  248,  261,  435,  129,   72,   74,
   74,  440,  257,  256,   40,  258,   40,  158,   82,   45,
   40,  158,   45,  256,   58,   45,   40,   61,   59,  262,
  267,   43,  256,   45,  271,  106,  107,   41,  262,  256,
   41,   45,   43,  117,   45,  262,  290,   59,   42,   43,
   59,   45,   59,   47,  376,   60,   61,   62,   59,   60,
   61,   62,  112,  113,  197,   59,  256,   59,  158,   59,
  123,  393,  143,  256,  318,  319,  257,  256,  257,  143,
   41,   41,   43,   43,   45,   45,  267,  123,  267,  256,
  271,  413,  271,  215,  158,  262,  203,  258,   59,   59,
  222,   58,   59,  202,   41,  176,  177,  256,  430,  180,
    4,  355,  202,  357,  256,  165,   40,  123,  256,  193,
  262,   59,  263,  264,  262,  257,  263,  264,   22,   41,
  256,  196,  196,  257,  378,  379,  262,  355,  245,  357,
   43,   35,   45,   37,  401,   59,  403,  260,  261,  248,
  272,   82,  260,  261,  260,  261,  227,  257,  248,  230,
  297,  257,  299,  256,  238,  258,  257,  269,  260,  261,
  241,  256,  256,  263,  264,  240,  240,  241,   40,  276,
  276,  288,  257,  272,  257,  273,  274,  275,  329,  330,
  269,  290,  329,  330,  276,  272,  256,  260,  276,   40,
  290,  257,   82,  276,  257,  327,  259,  297,  257,  299,
  263,  282,  265,  266,  257,  258,  269,  270,  282,  318,
  319,  311,  256,  256,  258,  256,  269,  158,  318,  319,
  337,  257,  258,  257,  257,  258,   59,  257,  258,  329,
  330,  147,  276,  257,  256,  352,  256,  311,   41,  256,
  340,   59,  146,  257,  258,  256,  355,  256,  357,  260,
  261,  123,  256,  370,  256,  355,  256,  357,  273,  274,
  275,  202,  273,  274,  275,   40,  340,  376,  158,  378,
  379,   41,  372,   44,  125,   58,  376,   59,  378,  379,
   41,  398,  262,   82,  393,  385,  386,  260,  261,  256,
  257,  260,  261,  393,  260,  261,  261,   59,  372,  256,
  256,  401,  105,  403,  413,  257,   44,  248,   41,  258,
  260,  385,  386,  413,   61,  415,  258,  417,  418,   41,
   59,  430,  263,  264,  256,  425,  256,  401,   59,  403,
  430,  247,  257,  256,   41,  435,   43,  256,   45,  125,
  440,  415,  257,  417,  418,  148,   40,   59,  269,  290,
  340,  425,   59,   60,   61,   62,  297,  258,  299,  158,
   59,  435,   59,   59,   41,   58,  440,   59,   59,   59,
  311,  258,  257,  263,  264,  256,  256,  318,  319,   59,
  256,  256,  372,   58,   40,  257,  256,  259,  329,  330,
  256,  263,   59,  265,  266,  385,  386,  269,  270,  340,
  261,  256,  256,  202,   59,  258,  257,  297,  259,  299,
  213,  401,  263,  403,  355,  266,  357,   82,  269,  270,
   41,  311,  258,  339,  256,   59,  257,  417,  418,  123,
  256,  372,   40,   41,  256,  376,   59,  378,  379,  329,
  330,  258,   59,   58,  385,  386,  261,  256,   59,  248,
  340,  257,  393,   58,   40,  256,  258,  257,   59,   59,
  401,  257,  403,   58,  263,  264,   59,  261,  256,   59,
   40,  256,  413,   41,  415,  256,  417,  418,  257,  257,
   59,  257,  372,   41,  425,   41,   82,  256,  256,  430,
  257,  290,  256,  158,  435,  385,  386,   41,  297,  440,
  299,  256,   59,    0,   41,   41,   41,  125,  256,  123,
   59,  401,  311,  403,  294,  123,  140,  180,  236,  318,
  319,  193,  299,  117,  106,  415,   45,  417,  418,  109,
  329,  330,  321,  216,  266,  425,  316,  202,  388,  125,
  104,  340,   59,   -1,   -1,  435,   -1,   -1,   -1,  256,
  440,   -1,   -1,  260,  261,  125,  355,   -1,  357,   -1,
   -1,   -1,  158,  257,   -1,  259,  273,  274,  275,  263,
   -1,   -1,  266,  372,  354,  269,  270,  376,   -1,  378,
  379,   -1,   -1,  248,   -1,   -1,  385,  386,   -1,   -1,
   -1,   -1,   -1,   -1,  393,   -1,   -1,   -1,  263,  264,
   -1,   -1,  401,  383,  403,   -1,  202,   -1,   -1,   -1,
   -1,   -1,  392,   -1,  413,   -1,  415,   -1,  417,  418,
  400,   -1,   -1,   40,   41,  290,  425,   -1,   -1,   -1,
   -1,  430,  297,   -1,  299,   -1,  435,   -1,   -1,   -1,
   -1,  440,   40,   -1,  424,   -1,  311,   -1,   -1,  257,
   -1,  259,  248,  318,  319,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  329,  330,   40,  263,  264,  277,
  256,  257,   -1,  259,   -1,  340,   -1,  263,  264,   -1,
  266,  267,  268,  269,  270,  271,   -1,  257,   40,  259,
  355,  277,  357,  263,  290,  265,  266,   -1,   -1,  269,
  270,  297,   -1,  299,   40,   -1,  123,  372,   -1,   -1,
   -1,  376,   -1,  378,  379,  311,   -1,   -1,   -1,   40,
  385,  386,  318,  319,   -1,  123,   -1,   -1,  393,   -1,
   -1,   -1,   -1,  329,  330,   40,  401,   -1,  403,   -1,
   -1,   -1,   -1,   -1,  340,   -1,   -1,   -1,  413,   -1,
  415,  125,  417,  418,   -1,   -1,   40,   -1,   -1,  355,
  425,  357,   -1,   -1,   -1,  430,   -1,   -1,   -1,   -1,
  435,  123,   40,   -1,   -1,  440,  372,   -1,   -1,   -1,
  376,   -1,  378,  379,   -1,   -1,   -1,  123,   -1,  385,
  386,   40,   -1,   -1,   -1,   -1,   -1,  393,   -1,   -1,
   -1,   -1,  123,   -1,   -1,  401,   -1,  403,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   40,   -1,  413,   -1,  415,
  125,  417,  418,   -1,   -1,   -1,   -1,   -1,   -1,  425,
   -1,   -1,   -1,   -1,  430,   -1,   -1,   40,   -1,  435,
  257,  125,  259,   -1,  440,   -1,  263,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,   40,  125,   -1,  257,
  277,  259,   -1,   -1,   -1,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  123,   -1,   -1,   -1,   -1,  277,
   -1,   -1,   40,  257,   -1,  259,   -1,   -1,   -1,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  123,   -1,
   -1,   40,   -1,  277,   -1,  257,   -1,  259,   -1,   40,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,  257,  125,  259,   -1,  277,   40,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  257,   -1,  259,  123,
   -1,  277,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   40,  257,   -1,  259,   -1,  277,   -1,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  125,   40,   -1,
   -1,   -1,  277,  257,   -1,  259,   -1,   -1,   -1,  263,
  264,  265,  266,  267,  268,  269,  270,  271,   -1,  257,
   40,  259,   -1,  277,  125,  263,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,   40,   -1,   -1,  257,  277,
  259,  125,   -1,   -1,  263,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   -1,   -1,   -1,   -1,  277,   40,
   -1,   -1,  257,   -1,  259,   -1,   -1,   -1,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   40,   -1,
   -1,   -1,  277,  125,  257,   -1,  259,   -1,   -1,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   40,
   -1,   -1,   -1,  257,  277,  259,   -1,   -1,   -1,  263,
  264,   -1,  266,  267,  268,  269,  270,  271,  123,   -1,
   40,   -1,   -1,  277,   -1,   -1,   -1,   -1,   40,  257,
   -1,  259,   -1,   -1,   -1,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  125,   -1,   -1,   40,  257,  277,
  259,   -1,   -1,   -1,  263,   40,  257,  266,  259,   -1,
  269,  270,  263,  264,   -1,  266,  267,  268,  269,  270,
  271,   40,   -1,  257,   -1,  259,  277,   -1,   -1,  263,
  264,   -1,  266,  267,  268,  269,  270,  271,   -1,   -1,
   -1,   -1,   -1,  277,   -1,   -1,   -1,   -1,  257,   -1,
  259,   -1,   -1,  123,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  125,   -1,  257,   -1,  259,  277,   -1,
   -1,  263,  264,   -1,  266,  267,  268,  269,  270,  271,
  123,   -1,   -1,   -1,   -1,  277,   -1,  257,   -1,  259,
  125,   -1,   -1,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  257,   -1,  259,   -1,   -1,  277,  263,  264,
   -1,  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,
   -1,   -1,  277,   -1,   -1,   -1,  257,   -1,  259,   -1,
   -1,   -1,  263,  264,   -1,  266,  267,  268,  269,  270,
  271,   -1,   -1,   -1,   -1,  257,  277,  259,   -1,   -1,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,   -1,   -1,   -1,   -1,  277,  257,   -1,  259,   -1,
   -1,   -1,  263,  264,   -1,  266,  267,  268,  269,  270,
  271,   -1,   -1,   -1,   -1,   -1,  277,  257,   -1,  259,
  260,  261,   -1,  263,   -1,  257,  266,  259,   -1,  269,
  270,  263,   -1,  265,  266,   -1,   -1,  269,  270,   -1,
   -1,   -1,   -1,   -1,  257,   -1,  259,   -1,   -1,   -1,
  263,   -1,  257,  266,  259,   -1,  269,  270,  263,   -1,
   -1,  266,   -1,   -1,  269,  270,   -1,   -1,  257,   -1,
  259,   -1,   -1,   -1,  263,   -1,  265,  266,   -1,   -1,
  269,  270,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=277;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"id","cte","If","then","Else","end_if","out",
"fun","Return","BREAK","i32","when","For","CONTINUE","f32","cadena",
"menorigual","mayorigual","distinto","opasignacion","Const",
};
final static String yyrule[] = {
"$accept : programa",
"programa : encabezado_prog bloque_sentencias",
"encabezado_prog : id",
"bloque_sentencias : bloque_sentencias '{' sentencia '}'",
"bloque_sentencias : '{' sentencia '}'",
"bloque_sentencias : '{' sentencia",
"bloque_sentencias : sentencia '}'",
"declaracion_const : Const lista_de_asignacion_const ';'",
"declaracion_const : Const lista_de_asignacion_const error",
"declaracion_const : Const ';' error",
"lista_de_asignacion_const : decl_const",
"lista_de_asignacion_const : lista_de_asignacion_const ',' decl_const",
"decl_const : id op_asignacion cte",
"decl_const : id op_asignacion error",
"decl_const : id cte error",
"decl_const : id error",
"bloq_sentencias_For : sentencias_For",
"bloq_sentencias_For : bloq_sentencias_For sentencias_For",
"sentencia : declarativas",
"sentencia : ejecutables",
"sentencia : sentencia declarativas",
"sentencia : sentencia ejecutables",
"declarativas : tipo lista_de_variables ';'",
"declarativas : lista_de_variables ';' error",
"declarativas : declaracion_func",
"declarativas : declaracion_const",
"declarativas : sentencia_when",
"bloque_ejecutables : bloque_ejecutables ejecutables",
"bloque_ejecutables : ejecutables",
"ejecutables : asignacion",
"ejecutables : salida",
"ejecutables : sentencia_If",
"ejecutables : expresion_For",
"ejecutables : invocacion_funcion",
"ejecutables : sentencia_BREAK error",
"ejecutables : sentencia_CONTINUE error",
"lista_de_variables : id lista_de_variables",
"lista_de_variables : id ',' lista_de_variables",
"lista_de_variables : id",
"parametro : tipo id",
"parametro : id error",
"asig_fun : ':' tipo",
"asig_fun :",
"cola_func : '{' cuerpo_fun '}'",
"lista_parametros :",
"lista_parametros : parametro",
"lista_parametros : parametro ',' parametro",
"lista_parametros : error",
"encab_fun : fun id '(' lista_parametros ')' asig_fun",
"encab_fun : fun '(' lista_parametros ')' asig_fun error",
"declaracion_func : encab_fun cola_func",
"ret_fun : Return '(' expresion ')' ';'",
"ret_fun : Return expresion ')' ';' error",
"ret_fun : Return '(' expresion ';' error",
"ret_fun : Return expresion ';' error",
"ret_fun : Return '(' expresion ')' error",
"cuerpo_fun : bloque_sentencias_funcion",
"ejecutables_funcion : asignacion",
"ejecutables_funcion : sentencia_if_funcion",
"ejecutables_funcion : salida",
"ejecutables_funcion : invocacion_funcion",
"ejecutables_funcion : sentencia_for_funcion",
"ejecutables_funcion : ret_fun",
"ejecutables_funcion : sentencia_BREAK error",
"ejecutables_funcion : sentencia_CONTINUE error",
"bloq_ejecutables_fun : bloq_ejecutables_fun ejecutables_funcion",
"bloq_ejecutables_fun : ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion declarativas",
"bloque_sentencias_funcion : ejecutables_funcion",
"bloque_sentencias_funcion : declarativas",
"op_asignacion : opasignacion",
"op_asignacion : ':' '='",
"op_asignacion : '='",
"asignacion : id op_asignacion expresion ';'",
"asignacion : id op_asignacion expresion error",
"asignacion : id op_asignacion for_else_cte ';'",
"for_else_cte : expresion_For Else cte",
"for_else_cte : expresion_For error",
"salida : out '(' cadena ')' ';'",
"salida : out '(' cadena ')' error",
"salida : out '(' cadena error ';'",
"salida : out cadena error ';'",
"salida : '(' cadena error",
"salida : out '(' ')' error ';'",
"sentencia_If : If condicion_if cuerpo_If end_if ';'",
"sentencia_If : If condicion_if then cuerpo_If end_if error",
"sentencia_If : If condicion_if then cuerpo_If error",
"condicion_if : '(' expresion_relacional ')'",
"condicion_if : expresion_relacional ')'",
"condicion_if : '(' expresion_relacional",
"condicion_if : expresion_relacional",
"cuerpo_If : cuerpo_Then cuerpo_Else",
"cuerpo_If : cuerpo_Then",
"cuerpo_If : cuerpo_Else",
"cuerpo_Then : then '{' bloque_ejecutables '}'",
"cuerpo_Then : then ejecutables",
"cuerpo_Else : Else '{' bloque_ejecutables '}'",
"cuerpo_Else : Else ejecutables",
"sentencia_if_for : If condicion_if cuerpo_If_for end_if ';'",
"sentencia_if_for : If condicion_if cuerpo_If_for end_if error",
"sentencia_if_for : If condicion_if cuerpo_If_for error",
"cuerpo_If_for : cuerpo_then_for cuerpo_Else_for",
"cuerpo_If_for : cuerpo_then_for",
"cuerpo_If_for : cuerpo_Else_for error",
"cuerpo_then_for : then '{' bloq_sentencias_For '}'",
"cuerpo_then_for : then sentencias_For",
"cuerpo_Else_for : Else '{' bloq_sentencias_For '}'",
"cuerpo_Else_for : Else sentencias_For",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion end_if ';'",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion end_if error",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion error",
"cuerpo_If_funcion : cuerpo_then_funcion cuerpo_Else_funcion",
"cuerpo_If_funcion : cuerpo_then_funcion",
"cuerpo_If_funcion : cuerpo_Else_funcion error",
"cuerpo_then_funcion : then '{' bloq_ejecutables_fun '}'",
"cuerpo_then_funcion : then ejecutables_funcion",
"cuerpo_Else_funcion : Else '{' bloq_ejecutables_fun '}'",
"cuerpo_Else_funcion : Else ejecutables_funcion",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun end_if ';'",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun end_if error",
"sentencia_if_for_fun : If condicion_if cuerpo_If_for_fun error",
"cuerpo_If_for_fun : then_if_for_fun else_if_for_fun",
"cuerpo_If_for_fun : then_if_for_fun",
"cuerpo_If_for_fun : else_if_for_fun error",
"then_if_for_fun : then '{' bloq_for_funcion '}'",
"then_if_for_fun : then sentencias_For_funcion",
"else_if_for_fun : Else '{' bloq_for_funcion '}'",
"else_if_for_fun : Else sentencias_For_funcion",
"sentencia_when : when '(' condicion_for ')' cuerpo_when ';'",
"sentencia_when : when condicion_for ')' cuerpo_when ';' error",
"sentencia_when : when '(' condicion_for cuerpo_when ';' error",
"cuerpo_when : then '{' sentencia '}'",
"cuerpo_when : then '{' sentencia error",
"cuerpo_when : then sentencia '}' error",
"encabezado_For : For '(' detalles_for ')' cola_For",
"encabezado_For : For id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For error",
"encabezado_For : For id op_asignacion cte ';' condicion_for ';' signo id cola_For error",
"encabezado_For : For '(' id op_asignacion cte ':' condicion_for ':' signo id ')' cola_For error",
"encabezado_For : id ':' For '(' id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For",
"detalles_for : asignacion_for ';' cond_op_for",
"cond_op_for : condicion_for ';' operacion_for",
"condicion_for : id comparador cte",
"cola_For : '{' bloq_sentencias_For '}' ';'",
"cola_For : sentencias_For",
"signo : '+'",
"signo : '-'",
"sentencias_For : asignacion",
"sentencias_For : salida",
"sentencias_For : expresion_For",
"sentencias_For : sentencia_if_for",
"sentencias_For : invocacion_funcion",
"sentencias_For : sentencia_BREAK",
"sentencias_For : sentencia_CONTINUE",
"sentencias_For : declarativas error",
"sentencias_For : ret_fun error",
"expresion_For : encabezado_For",
"cola_For_funcion : '{' bloq_for_funcion '}' ';'",
"cola_For_funcion : sentencias_For_funcion",
"sentencia_for_funcion : For '(' detalles_for ')' cola_For_funcion",
"sentencia_for_funcion : For id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For_funcion error",
"sentencia_for_funcion : For id op_asignacion cte ';' condicion_for ';' signo id cola_For_funcion error",
"sentencia_for_funcion : For '(' id op_asignacion cte ':' condicion_for ':' signo id ')' cola_For_funcion error",
"sentencia_for_funcion : id ':' For '(' id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For_funcion",
"asignacion_for : id op_asignacion cte",
"operacion_for : signo id",
"sentencias_For_funcion : asignacion",
"sentencias_For_funcion : salida",
"sentencias_For_funcion : sentencia_for_funcion",
"sentencias_For_funcion : ret_fun",
"sentencias_For_funcion : invocacion_funcion",
"sentencias_For_funcion : sentencia_BREAK",
"sentencias_For_funcion : sentencia_CONTINUE",
"sentencias_For_funcion : sentencia_if_for_fun",
"sentencias_For_funcion : declarativas error",
"bloq_for_funcion : sentencias_For_funcion",
"bloq_for_funcion : bloq_for_funcion sentencias_For_funcion",
"sentencia_BREAK : BREAK ';'",
"sentencia_BREAK : BREAK cte ';'",
"sentencia_BREAK : BREAK error",
"sentencia_CONTINUE : CONTINUE ';'",
"sentencia_CONTINUE : CONTINUE ':' id ';'",
"sentencia_CONTINUE : CONTINUE id ';' error",
"sentencia_CONTINUE : CONTINUE error",
"invocacion_funcion : id '(' list_parametros_Inv ')' ';'",
"invocacion_funcion : id '(' ')' ';'",
"list_parametros_Inv : factor ',' factor",
"list_parametros_Inv : factor",
"expresion_relacional : expresion comparador expresion",
"expresion : expresion signo termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : id",
"factor : cte",
"factor : '-' cte",
"comparador : '<'",
"comparador : '>'",
"comparador : menorigual",
"comparador : mayorigual",
"comparador : '='",
"comparador : distinto",
"tipo : i32",
"tipo : f32",
};

//#line 570 "gramatica.y"

private AnalizadorLexico lexico;
private AnalizadorSintactico sintactico;
private String ambito;

public void activarAmbito(){this.ambito = "$";} // $ va a simblizar el ambito global.

public void setLexico(AnalizadorLexico lexico) { this.lexico = lexico; }

public void setSintactico(AnalizadorSintactico sintactico) { this.sintactico = sintactico; }

public AnalizadorLexico getLexico() { return this.lexico; }

public AnalizadorSintactico getSintactico() { return this.sintactico; }

public void agregarAmbito(String nuevo) {

	this.ambito = this.ambito + "#" + nuevo;

}

public String borrarAmbito(String ambito){
	if (ambito.length() > 1) { // si es 1 solo tiene el ambito global
		String [] aux = ambito.split("#"); // separo los elementos individuales del ambito
		String last = aux[aux.length - 1 ]; // obtengo el ultimo, el que tengo que eliminar
		return ambito.substring(0, ambito.length() - last.length() - 1);
	}
	return "$";
}

public int yylex() {
    int token = lexico.procesarYylex();
    if (lexico.getRefTablaSimbolos() != -1)
        yylval = new ParserVal(lexico.getRefTablaSimbolos());
    return token;
}

public void yyerror(String string) {
	//sintactico.addErrorSintactico("par: " + string);
}

// retorna -1 si no existe un identificador con el lexema dado en el ambito dado. Si existe, retorna el indice de la entrada existente.
public int enAmbito(ParserVal pv){

	String lexema = sintactico.getEntradaTablaSimb(pv.ival).getLexema();
	String ambitoAux = this.ambito;

	String [] aux = ambitoAux.split("#");
	for (int i = 0 ; i < aux.length ; i++){
		int existente = sintactico.getTS().existeEntrada(lexema + ambitoAux);
		if (existente >= 0 ){
			return existente;
		}
		ambitoAux = borrarAmbito(ambitoAux);
	}
	return -1;
}

//#line 916 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 19 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("raiz", val_peek(0))); sintactico.setRaiz(yyval); }
break;
case 3:
//#line 26 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("primera_sentencia", val_peek(1)));}
break;
case 4:
//#line 27 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("primera_sentencia", val_peek(1)));}
break;
case 5:
//#line 28 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar el bloque.");}
break;
case 6:
//#line 29 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir el bloque.");}
break;
case 7:
//#line 32 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una declaración de CONSTANTE. (Línea " + AnalizadorLexico.LINEA + ")");
							  	  yyval = new ParserVal(sintactico.crearNodoControl("lista_ctes", val_peek(1)));}
break;
case 8:
//#line 34 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ; al final de la declaracion de constantes.");}
break;
case 9:
//#line 35 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): No se reconoce una lista de constantes.");}
break;
case 10:
//#line 38 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("declaracion_constante", val_peek(0), null));}
break;
case 11:
//#line 39 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("declaracion_constante", val_peek(0), val_peek(2)));}
break;
case 12:
//#line 44 "gramatica.y"
{
						int existente = enAmbito(val_peek(2));
						if (existente < 0) {
							int i = val_peek(2).ival;
							sintactico.setTipoEnIndex(sintactico.getTipoFromTS(val_peek(0).ival), i);
							sintactico.setUsoEnIndex("const", i);
							yyval = new ParserVal(sintactico.crearNodo("=:", new ParserVal(sintactico.crearHoja(val_peek(2).ival)), new ParserVal(sintactico.crearHoja(val_peek(0).ival))));
						} else {
							sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
						}

					}
break;
case 13:
//#line 56 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta constante luego de la asignacion.");}
break;
case 14:
//#line 57 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta el operador asignacion luego del identificador.");}
break;
case 15:
//#line 58 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta la asignacion luego del identificador.");}
break;
case 16:
//#line 62 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 17:
//#line 63 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 18:
//#line 68 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 19:
//#line 69 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 20:
//#line 70 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 21:
//#line 71 "gramatica.y"
{yyval = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));;}
break;
case 22:
//#line 75 "gramatica.y"
{
							String type = val_peek(2).sval;
						 	sintactico.completarConTipos(type);
						 	sintactico.addAnalisis("Se reconoció declaraciónes de variable de tipo " + type + ". (Línea " + AnalizadorLexico.LINEA + ")");
						  }
break;
case 23:
//#line 80 "gramatica.y"
{
             						sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): falta el tipo de variable");
             					  	sintactico.addAnalisis("Se reconoció declaraciónes de variable SIN TIPO. (Línea " + (AnalizadorLexico.LINEA-1) + ")");
             					   	sintactico.vaciarListaVariables();
             					  }
break;
case 27:
//#line 91 "gramatica.y"
{
							ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
							yyval = modificado;
						     }
break;
case 28:
//#line 95 "gramatica.y"
{
							yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));
						     }
break;
case 34:
//#line 105 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 35:
//#line 106 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 36:
//#line 110 "gramatica.y"
{
							sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta una ',' entre identIficadores.");
						 	int existente = enAmbito(val_peek(1));
							if (existente < 0) {
								sintactico.setLexemaEnIndex(val_peek(1).ival, this.ambito);
								sintactico.addListaVariables(val_peek(1).ival);
								sintactico.setUsoEnIndex("var", val_peek(1).ival);
							} else {
								sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
							}
						}
break;
case 37:
//#line 121 "gramatica.y"
{
							int existente = enAmbito(val_peek(2));
							if (existente < 0) {
								sintactico.setLexemaEnIndex(val_peek(2).ival, this.ambito);
								sintactico.addListaVariables(val_peek(2).ival);
								sintactico.setUsoEnIndex("var", val_peek(2).ival);
							} else {
								sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
							}
						  }
break;
case 38:
//#line 131 "gramatica.y"
{
                   					int existente = enAmbito(val_peek(0));
                   					if (existente < 0) {
                   						sintactico.setLexemaEnIndex(val_peek(0).ival, this.ambito);
                   						sintactico.addListaVariables(val_peek(0).ival);
							    	sintactico.setUsoEnIndex("var", val_peek(0).ival);
                   					} else {
                   						sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): variable ya declarada.");
                   					}
                   				  }
break;
case 39:
//#line 145 "gramatica.y"
{
				int existente = enAmbito(val_peek(0));
				if (existente < 0) {
					sintactico.setTipoEnIndex(val_peek(1).sval, val_peek(0).ival);
					sintactico.setLexemaEnIndex(val_peek(0).ival, this.ambito);
					sintactico.setUsoEnIndex("param", val_peek(0).ival);
				} else {
					sintactico.addErrorSintactico("SyntaxError. ENC_FUN/PARAMS (Línea " + AnalizadorLexico.LINEA + "): el identificador ya ha sido utilizado.");
				}
			}
break;
case 40:
//#line 156 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. PARAM(Línea " + AnalizadorLexico.LINEA + "): falta TIPO en parametros."); }
break;
case 41:
//#line 160 "gramatica.y"
{
				sintactico.setTipoGlobal(val_peek(0).sval);
			}
break;
case 42:
//#line 163 "gramatica.y"
{
				sintactico.addErrorSintactico("SyntaxError. ENCAB_FUN(Línea " + AnalizadorLexico.LINEA + "): falta tipo de funcion ");
	 	 		sintactico.addAnalisis("Se reconoce declaracion de funcion sin tipo (Línea " + AnalizadorLexico.LINEA + ")");
			}
break;
case 43:
//#line 169 "gramatica.y"
{
					sintactico.addAnalisis("Se reconoce cuerpo de funcion (Línea " + AnalizadorLexico.LINEA + ")");
					this.ambito = borrarAmbito(this.ambito);
 					yyval = val_peek(1);
 				}
break;
case 47:
//#line 179 "gramatica.y"
{ sintactico.addAnalisis("Se reconocen mas parametros de los deseados en la funcion (Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 48:
//#line 182 "gramatica.y"
{
								sintactico.addAnalisis( "Se reconocio declaracion de funcion (Línea " + AnalizadorLexico.LINEA + ")" );

                                                                sintactico.setTipoEnIndex(sintactico.getTipo(), val_peek(4).ival);
                                                                sintactico.clearTipo();


								String lexema = sintactico.getEntradaTablaSimb(val_peek(4).ival).getLexema();
								int existente = enAmbito(val_peek(4));
								if (existente < 0) { /* no existe el id en el ambito*/
									sintactico.setLexemaEnIndex(val_peek(4).ival, this.ambito);
									sintactico.setUsoEnIndex("func", val_peek(4).ival);
									agregarAmbito(lexema);
								} else {
									sintactico.addErrorSintactico("SyntaxError. ENC_FUN (Línea " + AnalizadorLexico.LINEA + "): el identificador ya ha sido utilizado.");
								}

							}
break;
case 49:
//#line 200 "gramatica.y"
{
	 								sintactico.addAnalisis("Se reconoce declaracion de funcion sin identificador (Línea " + AnalizadorLexico.LINEA + ")");
							   		sintactico.addErrorSintactico("SyntaxError. ENC_FUN (Línea " + AnalizadorLexico.LINEA + "): funcion sin identificar.");
								}
break;
case 50:
//#line 206 "gramatica.y"
{yyval = val_peek(0);}
break;
case 51:
//#line 210 "gramatica.y"
{ sintactico.addAnalisis("Se reconoce retorno de funcion(Línea " + AnalizadorLexico.LINEA + ") ");
						   	  yyval = new ParserVal(sintactico.crearNodoControl("return",val_peek(2)));}
break;
case 52:
//#line 212 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN1 (Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 53:
//#line 213 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN2(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 54:
//#line 214 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN3(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 55:
//#line 215 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN4(Línea " + AnalizadorLexico.LINEA + "): falta ; "); }
break;
case 63:
//#line 227 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 64:
//#line 228 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 65:
//#line 232 "gramatica.y"
{
									ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
									yyval = modificado;
								}
break;
case 66:
//#line 236 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 67:
//#line 239 "gramatica.y"
{
											ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
											yyval = modificado;
										}
break;
case 68:
//#line 243 "gramatica.y"
{
										ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
										yyval = modificado;
									}
break;
case 69:
//#line 247 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 70:
//#line 248 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 71:
//#line 253 "gramatica.y"
{ yyval.sval = new String("=:"); }
break;
case 72:
//#line 254 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP1(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 73:
//#line 255 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 74:
//#line 259 "gramatica.y"
{
							int existente = enAmbito(val_peek(3));
							if (existente >= 0) {
								ParserVal identificador = new ParserVal(sintactico.crearHoja(existente));
								yyval = new ParserVal(sintactico.crearNodo("=:", identificador , val_peek(1)));
								sintactico.eliminarEntrada(val_peek(3).ival);
							} else {
								sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): variable no declarada.");
							}
					  	}
break;
case 75:
//#line 269 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP(Línea " + (AnalizadorLexico.LINEA) + "): falta ';' luego de la ASIG."); }
break;
case 76:
//#line 270 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodo("=:", val_peek(3), val_peek(1)));}
break;
case 77:
//#line 274 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodo("else", val_peek(2), val_peek(0)));}
break;
case 78:
//#line 275 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): problema en devolver valor por defecto  ");}
break;
case 79:
//#line 278 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodoControl("out", new ParserVal(sintactico.crearHoja(val_peek(2).ival))));}
break;
case 80:
//#line 279 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de la impresión de cadena."); }
break;
case 81:
//#line 280 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): cierre erróneo de la lista de parámetros de out."); }
break;
case 82:
//#line 281 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): los parámetros de out deben estar entre paréntesis."); }
break;
case 83:
//#line 282 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): se esperaba out, se encontró '('."); }
break;
case 84:
//#line 283 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta declarar una cadena para PRINT."); }
break;
case 85:
//#line 288 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));
									sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 86:
//#line 290 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 87:
//#line 291 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 88:
//#line 295 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cond",val_peek(1)));}
break;
case 89:
//#line 296 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 90:
//#line 297 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 91:
//#line 298 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 92:
//#line 302 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo", val_peek(1), val_peek(0)));}
break;
case 93:
//#line 303 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo", val_peek(0), null));}
break;
case 94:
//#line 304 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta bloque then."); }
break;
case 95:
//#line 308 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(1)));}
break;
case 96:
//#line 309 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(0)));}
break;
case 97:
//#line 313 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(1)));}
break;
case 98:
//#line 314 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(0)));}
break;
case 99:
//#line 317 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
								   yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));}
break;
case 100:
//#line 319 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 101:
//#line 320 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 102:
//#line 323 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo",val_peek(1),val_peek(0)));}
break;
case 103:
//#line 324 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo",val_peek(0),null));}
break;
case 104:
//#line 325 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 105:
//#line 328 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1)));}
break;
case 106:
//#line 329 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(0)));}
break;
case 107:
//#line 332 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(1)));}
break;
case 108:
//#line 333 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(0)));}
break;
case 109:
//#line 336 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
									   yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));}
break;
case 110:
//#line 338 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 111:
//#line 339 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 112:
//#line 342 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo",val_peek(1),val_peek(0)));}
break;
case 113:
//#line 343 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo",val_peek(0),null));}
break;
case 114:
//#line 344 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 115:
//#line 347 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1)));}
break;
case 116:
//#line 348 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(0)));}
break;
case 117:
//#line 351 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(1)));}
break;
case 118:
//#line 352 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else",val_peek(0)));}
break;
case 119:
//#line 355 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")");
									  yyval = new ParserVal(sintactico.crearNodo("if",val_peek(3),val_peek(2)));
									}
break;
case 120:
//#line 358 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 121:
//#line 359 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 122:
//#line 362 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo",val_peek(1),val_peek(0)));}
break;
case 123:
//#line 363 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("cuerpo",val_peek(0),null));}
break;
case 124:
//#line 364 "gramatica.y"
{sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta el bloque then.");}
break;
case 125:
//#line 367 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(1)));}
break;
case 126:
//#line 368 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then", val_peek(0)));}
break;
case 127:
//#line 371 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(1)));}
break;
case 128:
//#line 372 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("else", val_peek(0)));}
break;
case 129:
//#line 378 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia when");
								  yyval = new ParserVal(sintactico.crearNodo("when", val_peek(3), val_peek(1)));}
break;
case 130:
//#line 380 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta abrir paréntesis la condicion"); }
break;
case 131:
//#line 381 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta paréntesis de cierre en la condicion."); }
break;
case 132:
//#line 385 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("then",val_peek(1)));}
break;
case 133:
//#line 386 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar la llave del bloque."); }
break;
case 134:
//#line 387 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir la llave del bloque"); }
break;
case 135:
//#line 395 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")");
							  	yyval = new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)));
							}
break;
case 136:
//#line 398 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 137:
//#line 399 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 138:
//#line 400 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR3(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 139:
//#line 401 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 140:
//#line 405 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("encabezado for",val_peek(2), val_peek(0)));}
break;
case 141:
//#line 408 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("condicion y operacion for",  val_peek(2), val_peek(0)));}
break;
case 142:
//#line 412 "gramatica.y"
{
						String typeOP2 = sintactico.getTipoFromTS(val_peek(0).ival);
						String typeOP1 = sintactico.getTipoFromTS(val_peek(2).ival);
						/*if (typeOP1.equals(typeOP2)) {*/

							ParserVal identificador = new ParserVal(sintactico.crearHoja(val_peek(2).ival));
                                                	ParserVal constante = new ParserVal(sintactico.crearHoja(val_peek(0).ival));
                                                	yyval = new ParserVal(sintactico.crearNodoControl("cond", new ParserVal(sintactico.crearNodo(val_peek(1).sval,identificador,constante))));
						/*}else{*/
							sintactico.addAnalisis("SyntaxError. se reconoce FOR pero hay un problema de tipos en la condicion " + AnalizadorLexico.LINEA);
					/*	}*/


				     	}
break;
case 143:
//#line 428 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(2)));}
break;
case 144:
//#line 429 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(0)));}
break;
case 145:
//#line 432 "gramatica.y"
{yyval.sval = new String("+");}
break;
case 146:
//#line 433 "gramatica.y"
{yyval.sval = new String("-");}
break;
case 154:
//#line 444 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 155:
//#line 445 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten retornos fuera de una funcion"); }
break;
case 157:
//#line 451 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(2)));}
break;
case 158:
//#line 452 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodoControl("cuerpoFor",val_peek(0)));}
break;
case 159:
//#line 456 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")");
                        							yyval = new ParserVal(sintactico.crearNodo("For",val_peek(2),val_peek(0)));
									}
break;
case 160:
//#line 459 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 161:
//#line 460 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 162:
//#line 461 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR3(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 163:
//#line 462 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 164:
//#line 467 "gramatica.y"
{
					sintactico.setTipoEnIndex(sintactico.getTipoFromTS(val_peek(0).ival), val_peek(2).ival);
					sintactico.setUsoEnIndex("for_var", val_peek(2).ival);
					ParserVal identificador = new ParserVal(sintactico.crearHoja(val_peek(2).ival));
					ParserVal constante = new ParserVal(sintactico.crearHoja(val_peek(0).ival));
					yyval = new ParserVal(sintactico.crearNodoControl("asignacionFor",new ParserVal(sintactico.crearNodo("=:",identificador,constante))));}
break;
case 165:
//#line 476 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodoControl("operacionFor",new ParserVal(sintactico.crearNodo(val_peek(1).sval,new ParserVal(sintactico.crearHoja(val_peek(0).ival)),null))));}
break;
case 174:
//#line 487 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 175:
//#line 491 "gramatica.y"
{	yyval = new ParserVal(sintactico.crearNodo("sentencia", val_peek(0), null));}
break;
case 176:
//#line 492 "gramatica.y"
{
									ParserVal modificado = sintactico.modificarHijo(val_peek(1), sintactico.crearNodo("sentencia", val_peek(0), null));
									yyval = modificado;
								}
break;
case 177:
//#line 500 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio una sentencia break (Línea " + AnalizadorLexico.LINEA + ")");
					yyval = new ParserVal(sintactico.crearNodoControl("break",null));}
break;
case 178:
//#line 502 "gramatica.y"
{	sintactico.addAnalisis("Se reconocio una sentencia break con retorno de valor (Línea " + AnalizadorLexico.LINEA + ")");
                			yyval = new ParserVal(sintactico.crearNodoControl("break", new ParserVal(sintactico.crearHoja(val_peek(1).ival))));}
break;
case 179:
//#line 504 "gramatica.y"
{	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de BREAK."); }
break;
case 180:
//#line 508 "gramatica.y"
{
							sintactico.addAnalisis("Se reconocio una sentencia continue (Línea " + AnalizadorLexico.LINEA + ")");
							yyval = new ParserVal(sintactico.crearNodoControl("continue",null));}
break;
case 181:
//#line 511 "gramatica.y"
{ 	sintactico.addAnalisis("Se reconocio una sentencia continue con etiquetado(Línea " + AnalizadorLexico.LINEA + ")");
                   					yyval = new ParserVal(sintactico.crearNodoControl("continue", new ParserVal(sintactico.crearHoja(val_peek(1).ival))));}
break;
case 182:
//#line 513 "gramatica.y"
{ 	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ':'CONTINUE."); }
break;
case 183:
//#line 514 "gramatica.y"
{ 	sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego del CONTINUE "); }
break;
case 184:
//#line 518 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodoFunc(val_peek(4).ival, val_peek(2)));}
break;
case 185:
//#line 519 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodoFunc(val_peek(3).ival, null));}
break;
case 186:
//#line 522 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("param", val_peek(2), val_peek(0)));}
break;
case 187:
//#line 523 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("param", val_peek(0), null));}
break;
case 188:
//#line 527 "gramatica.y"
{ yyval = new ParserVal(sintactico.crearNodo(val_peek(1).sval, val_peek(2), val_peek(0)));}
break;
case 189:
//#line 531 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo(val_peek(1).sval, val_peek(2), val_peek(0))); }
break;
case 191:
//#line 536 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("*",val_peek(2),val_peek(0)));}
break;
case 192:
//#line 537 "gramatica.y"
{yyval = new ParserVal(sintactico.crearNodo("/",val_peek(2),val_peek(0)));}
break;
case 194:
//#line 542 "gramatica.y"
{ 	yyval = new ParserVal(sintactico.crearHoja(val_peek(0).ival));}
break;
case 195:
//#line 543 "gramatica.y"
{
				String type = sintactico.getTipoFromTS(val_peek(0).ival);
				if (type.equals("LONG"))
				     sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
				yyval = new ParserVal(sintactico.crearHoja(val_peek(0).ival));
                  	}
break;
case 196:
//#line 549 "gramatica.y"
{
				sintactico.setNegativoTablaSimb(val_peek(0).ival);
				yyval = new ParserVal(sintactico.crearHoja(val_peek(1).ival));
                   	}
break;
case 197:
//#line 556 "gramatica.y"
{ yyval.sval = new String("<") ; }
break;
case 198:
//#line 557 "gramatica.y"
{ yyval.sval = new String(">") ; }
break;
case 199:
//#line 558 "gramatica.y"
{ yyval.sval = new String("<="); }
break;
case 200:
//#line 559 "gramatica.y"
{ yyval.sval = new String(">="); }
break;
case 201:
//#line 560 "gramatica.y"
{ yyval.sval = new String("=") ; }
break;
case 202:
//#line 561 "gramatica.y"
{ yyval.sval = new String("=!"); }
break;
case 203:
//#line 565 "gramatica.y"
{ yyval.sval = new String("i32"); }
break;
case 204:
//#line 566 "gramatica.y"
{ yyval.sval = new String("f32"); }
break;
//#line 1887 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
