//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"

package AnalizadorSintactico;

import java.util.Vector;

import AnalizadorLexico.AnalizadorLexico;
import AnalizadorSintactico.AnalizadorSintactico;
import AnalizadorLexico.Atributo;

//#line 27 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short id=257;
public final static short cte=258;
public final static short If=259;
public final static short then=260;
public final static short Else=261;
public final static short end_if=262;
public final static short out=263;
public final static short fun=264;
public final static short Return=265;
public final static short BREAK=266;
public final static short i32=267;
public final static short when=268;
public final static short For=269;
public final static short CONTINUE=270;
public final static short f32=271;
public final static short cadena=272;
public final static short menorigual=273;
public final static short mayorigual=274;
public final static short distinto=275;
public final static short opasignacion=276;
public final static short Const=277;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    2,    2,    2,    2,    4,    4,    4,    5,
    5,    6,    6,    6,    6,    8,    8,    3,    3,    3,
    3,   10,   10,   10,   10,   10,   10,   16,   16,   11,
   11,   11,   11,   11,   11,   13,   13,   13,   23,   23,
   24,   24,   25,   25,   26,   14,   14,   14,   14,   28,
   28,   28,   28,   28,   27,   31,   31,   31,   31,   31,
   31,   31,   34,   34,   30,   30,   30,   30,   32,   32,
   32,   32,   32,   32,   36,   36,   37,   37,   38,   38,
   38,   38,   38,   38,   39,   39,   40,   40,   43,   43,
   33,   33,   33,   33,   33,   42,   42,   42,   42,   42,
   42,   42,   42,   41,   41,    7,    7,    7,   17,   17,
   17,   17,   18,   18,   18,   18,   18,   18,   19,   19,
   19,   19,   19,   19,   46,   46,   47,   47,   48,   48,
   48,   48,   48,   48,   49,   49,   50,   50,   15,   15,
   15,   15,   51,   51,   51,   52,   52,   53,   53,   53,
   53,   53,   44,   45,   45,    9,    9,    9,    9,    9,
    9,    9,    9,   20,   21,   21,   21,   22,   22,   22,
   22,   35,   35,   35,   35,   55,   29,   29,   56,   56,
   56,   57,   57,   57,   54,   54,   54,   54,   54,   54,
   12,   12,
};
final static short yylen[] = {                            2,
    2,    1,    4,    3,    2,    2,    3,    3,    3,    1,
    3,    3,    3,    3,    2,    1,    2,    1,    1,    2,
    2,    3,    3,    2,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    2,    2,    1,    3,    3,    3,    3,
    2,    2,    2,    0,    5,    3,    5,    7,    2,    5,
    4,    4,    3,    5,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    1,    2,    2,    1,    1,    6,    8,
    8,    5,    8,    4,    3,    1,    3,    1,    6,    8,
    8,    5,    8,    4,    3,    1,    3,    1,    4,    1,
   12,   12,   11,   13,   14,    1,    1,    1,    1,    1,
    1,    1,    2,    1,    2,    1,    2,    1,    4,    4,
    6,    4,    5,    5,    5,    4,    3,    5,    6,    8,
    8,    5,    8,    4,    3,    1,    3,    1,    6,    8,
    8,    5,    8,    4,    3,    1,    3,    1,    7,    7,
    7,    7,    3,    3,    3,    4,    1,   12,   12,   11,
   13,   14,    3,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    1,    2,    3,    2,    2,    4,    4,
    2,    3,    2,    2,    1,    3,    3,    1,    3,    3,
    1,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,
};
final static short yydefred[] = {                         0,
    2,    0,    0,    0,    0,    0,    0,    0,  191,    0,
    0,    0,  192,    0,    0,    0,    0,    0,   26,   18,
   19,    0,   25,   27,   30,   31,   32,   33,    0,    0,
    0,  164,  106,    0,  108,    0,  182,  183,    0,    0,
    0,    0,    0,    0,  181,    0,    0,    0,    0,  167,
    0,  165,    0,    0,    0,    0,    0,  171,    0,  168,
    0,    0,    0,    0,   10,    0,    0,    0,    6,   20,
   21,   24,   36,    0,   34,   35,    0,    0,    0,    0,
   49,    0,  107,    0,    0,    0,    0,  184,  187,  188,
  190,  189,  154,  155,  185,  186,    0,    0,    0,    0,
  126,    0,  173,    0,    0,    0,    0,    0,   39,   40,
  166,    0,    0,    0,    0,    0,    0,    0,    0,   15,
    0,    0,    9,    8,    7,    0,    4,  117,    0,   23,
    0,   22,    0,   42,    0,    0,   41,    0,   46,    0,
    0,  112,    0,  110,  109,  172,    0,    0,    0,   29,
    0,  124,  179,  180,  116,    0,    0,    0,  153,    0,
    0,    0,    0,    0,  170,  169,   14,   13,   12,   11,
    3,   38,   37,   43,    0,    0,    0,    0,  122,    0,
    0,  125,   28,  115,  114,  113,  118,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   68,
   56,   58,    0,    0,    0,   60,    0,   67,   57,   59,
    0,   47,    0,  111,    0,  128,    0,  119,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   61,   62,   45,   66,   65,    0,    0,
    0,    0,    0,  144,  143,  145,  141,  139,  142,  140,
    0,    0,    0,    0,    0,    0,   76,    0,    0,   53,
    0,    0,    0,   48,    0,  127,  123,  121,  120,    0,
    0,    0,    0,    0,   64,    0,   74,   52,    0,   51,
    0,    0,    0,    0,    0,    0,    0,   72,    0,    0,
   75,   63,   54,   50,    0,    0,    0,    0,    0,    0,
  147,    0,  156,  157,  158,  160,  161,    0,  159,    0,
    0,    0,    0,    0,   78,    0,   69,    0,    0,    0,
    0,    0,    0,   16,    0,  162,  163,  150,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  136,    0,    0,   17,  149,  148,    0,    0,   77,   73,
   71,   70,    0,    0,    0,    0,    0,    0,  134,  146,
  151,    0,    0,    0,    0,  152,  132,    0,    0,  135,
    0,    0,    0,    0,    0,   96,   97,  100,  101,   99,
   98,  102,   90,    0,    0,    0,    0,  138,    0,  129,
    0,    0,    0,  104,    0,  103,   93,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   86,    0,  105,   92,
   91,    0,  137,  133,  131,  130,    0,    0,    0,   84,
   89,   94,   95,   82,    0,    0,   85,    0,    0,   88,
   79,    0,    0,    0,   87,   83,   81,   80,
};
final static short yydgoto[] = {                          2,
    3,   17,  189,   19,   64,   65,   36,  323,  301,  302,
   21,   22,   74,   23,   24,  151,   25,   26,   27,   28,
   29,   30,   31,   80,  136,   81,  205,  308,   41,  207,
  257,  209,  381,  276,   42,  258,  316,  382,  406,  429,
  393,  383,  384,   55,   97,  102,  217,  309,  342,  389,
  190,  310,   32,   98,   43,   44,   45,
};
final static short yysindex[] = {                      -147,
    0,    0, 1084,  -45,   28,  -34,  -37,  -33,    0,    9,
   16,  112,    0,   60, 1195, -191,   -6, 1099,    0,    0,
    0, -202,    0,    0,    0,    0,    0,    0, -119, -115,
    3,    0,    0,  -51,    0,  -28,    0,    0,  106, -106,
  -38,  128,  114,   35,    0,  -96,  -32,  133,  -77,    0,
  130,    0,  102,  -74,  146,  -31,  -67,    0,  132,    0,
  -62,   69,  -59,   42,    0, 1118,  -56, 1195,    0,    0,
    0,    0,    0,   62,    0,    0,  -55,  147,  -50,   54,
    0,  166,    0,  150, -165,   91,  169,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  106,  106,  174,  215,
    0,   68,    0,  106,  106,  152,  -30,   70,    0,    0,
    0,  -39,  -16,  -36,  229,   58,  -31,   76,  295,    0,
  100, -216,    0,    0,    0,  115,    0,    0, 1134,    0,
  103,    0,  121,    0, -158,  258,    0, -168,    0,  125,
  123,    0,  126,    0,    0,    0,   35,  122, -154,    0,
  472,    0,    0,    0,    0,  334,   66,  340,    0, 1165,
  835, 1165,  344,  151,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  443,   87,  -31,  345,    0, 1221,
  346,    0,    0,    0,    0,    0,    0, 1195, 1180,  351,
 1165,  353,  356,  -74,   65,  -29,   28,   34,   36,    0,
    0,    0,  162,  163,  296,    0,  443,    0,    0,    0,
 -168,    0,  170,    0,  215,    0, -205,    0,  852,  164,
  171,  371,  178,  179,  382,  -74,  -74,  -27,   -7,  106,
    2,  -31,  185,    0,    0,    0,    0,    0,  395,  386,
  705,  391,   90,    0,    0,    0,    0,    0,    0,    0,
  122,  393,  401,  420,  192, 1229,    0,  209,    5,    0,
  407,  211,  -31,    0,  -74,    0,    0,    0,    0,  210,
  122,  122,  216, -123,    0,   92,    0,    0,   94,    0,
  416,  218,  418,   71,  222,  231,  -31,    0,  244,  427,
    0,    0,    0,    0,  -74,   89,  122,   28, 1060,  377,
    0,  235,    0,    0,    0,    0,    0,  238,    0,  239,
  455,  458,  246, 1229,    0, -190,    0,  446,  -74,  -74,
  245,   43,  408,    0,  252,    0,    0,    0,  377,  377,
  462,  343,  466,  110,  122,  467,  469,  489,  657, 1060,
    0,  275,  473,    0,    0,    0,  278,  -74,    0,    0,
    0,    0,  279,  122,  122,  377, -116,  879,    0,    0,
    0,  476,  303,  280,  281,    0,    0,  898,  480,    0,
  122,   28, 1149,  914,  286,    0,    0,    0,    0,    0,
    0,    0,    0,  288,  504,  505, 1060,    0, -162,    0,
  290,  749,  933,    0,  294,    0,    0,  914,  914,  962,
  492,  117,  513,  987, 1149,  299,    0,  498,    0,    0,
    0,  302,    0,    0,    0,    0,  914,  -63, 1008,    0,
    0,    0,    0,    0, 1030,  500,    0, 1149, -142,    0,
    0, 1045,  502,  118,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  565,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  765,  723,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   31,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  452,    0,    0,
    0,    0,    0,   45,    0,    0,  786,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  809,   12,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  451,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,  141,    0,    0,  456,  -48, -312,  448,   -3,
 1403,  380,    0,    0,    0,  362,  124,  264,    0,  -35,
  404,  544,    0, -118,    0,  -61,    0, -171,  -18,    0,
 1248,    0, 1293,  267, -176,  328,    0,    0,  180,    0,
 -366, 1136, -339,  -52,  135,  486,    0,    0,  249,    0,
 -124, -259,    0,  536,  551,  495,   77,
};
final static int YYTABLESIZE=1644;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         20,
   85,  113,   49,  206,   93,   47,   94,  116,  108,   83,
  157,   20,   34,  122,   70,   35,   40,   86,  139,  176,
  229,   95,   92,   96,  161,   52,  115,  358,  228,   35,
    5,   35,   16,   83,  395,  206,  192,  193,  419,  168,
  325,  169,  261,   78,   93,  279,   94,   93,   54,   94,
  242,  176,  176,   72,   73,   57,  243,  206,  411,  412,
  260,  432,   70,  278,   20,  333,  222,   39,  164,  346,
  347,  334,   40,  230,  400,  233,  104,  423,   40,  148,
   67,  105,   16,  206,  206,  126,  182,  182,   77,  182,
  142,  182,  239,  401,   78,  143,  366,  138,    9,  402,
  125,  179,   13,  182,  206,  133,  180,  181,    9,    1,
   16,  300,   13,  433,  212,  256,   68,  206,   63,  434,
  132,  322,  227,  226,  186,   70,  115,   78,  213,   35,
  211,   16,  288,   93,  176,   94,   75,  289,  290,  367,
   76,  225,  206,   18,  368,  369,  320,  319,  269,  145,
   40,   88,  294,    5,  103,   66,   20,   20,   20,  106,
  206,   95,   92,   96,   93,  340,   94,   16,  352,   61,
   60,  200,  109,  252,  253,  416,  438,  264,  110,  231,
  153,  154,   53,  262,   20,   70,  114,   20,  111,  117,
  118,  380,  424,  299,  119,  392,  123,  425,  426,  128,
  134,  380,  380,  237,  135,  140,  137,  141,  129,  146,
  155,  259,  283,   16,  282,   70,  291,   82,  159,   48,
  380,  380,   50,  162,   51,  156,  380,  380,   84,   38,
   33,   16,  380,  380,   89,   90,   91,   46,  313,  107,
   11,  254,  318,  160,   33,  380,   33,  380,  305,  196,
  100,  197,  255,  380,   16,    6,  380,  198,    8,   77,
  380,  199,   12,  305,  305,   53,  336,  337,  176,    9,
  176,  176,   56,   13,  176,  176,  176,  176,  176,  176,
  176,  176,  176,   16,   37,   38,  305,  305,  176,   83,
   37,   38,  232,  305,  305,  362,  100,  124,  201,    4,
  182,  298,  339,  305,  305,    6,    7,  198,    8,    9,
   10,   11,   12,   13,  256,  163,   62,  130,  131,   14,
  305,  185,  305,  152,  120,  158,  121,    4,  219,  298,
  201,  165,  305,    6,    7,  198,    8,    9,   10,   11,
   12,   13,   16,  374,   33,  268,  144,   14,  196,  293,
  197,  305,  201,  166,    6,  167,  198,    8,  172,  375,
  199,   12,   37,   38,  305,  351,  314,   58,   59,  375,
  375,   62,  415,  437,   89,   90,   91,  173,  201,  201,
  175,  177,   16,  178,    4,  270,    5,   99,  375,  375,
    6,   82,  184,    8,  375,  375,   11,   12,  187,  201,
  375,  375,  194,  214,  218,  285,  286,  303,  195,  221,
   79,  223,  201,  375,  224,  375,   16,  234,  235,  246,
  236,  375,  303,  303,  375,  373,  247,  240,  375,  248,
    4,  321,    5,  249,  250,   78,    6,  201,  202,    8,
  251,  263,   11,   12,  265,  303,  303,   16,  196,  267,
  197,  271,  303,  303,    6,  201,  198,    8,  272,  273,
  199,   12,  303,  303,  277,  280,  284,  349,  281,  353,
  202,    4,  287,    5,  295,  296,  297,    6,  311,  303,
    8,  303,   16,   11,   12,  317,  376,  312,  364,  365,
  326,  303,  202,  327,  328,  329,  376,  376,  330,  299,
  196,  338,  197,  331,  335,  391,    6,  345,  198,    8,
  303,   16,  199,   12,  174,  376,  376,   79,  202,  202,
  348,  376,  376,  303,  350,  354,  355,  376,  376,  356,
  359,  360,  343,  361,  371,  363,  385,  386,  390,  202,
  376,  396,  376,  397,  398,  399,  403,  304,  376,  410,
  414,  376,  202,  417,  420,  376,  421,  422,  431,  196,
  436,  372,  304,  304,    1,    6,    7,  198,    8,    9,
   10,  199,   12,   13,   44,   55,  241,  202,  203,   14,
  332,  170,  274,  418,  149,  304,  304,  357,  112,   87,
   79,  147,  304,  304,    0,  202,  182,    0,    0,  196,
    0,  197,  304,  304,    0,    6,    0,  198,    8,    0,
  203,  199,   12,    0,    0,    0,    0,    0,    0,  304,
    0,  304,    0,    0,    0,    0,  377,    0,    0,    0,
    0,  304,  203,    4,    0,  298,  377,  377,    0,    6,
    7,  198,    8,    9,   10,   11,   12,   13,    0,    0,
  304,    0,    0,   14,    0,  377,  377,    0,  203,  203,
    0,  377,  377,  304,    4,    0,  298,  377,  377,    0,
    6,    7,  198,    8,    9,   10,   11,   12,   13,  203,
  377,    0,  377,    0,   14,    0,    0,  306,  377,    0,
    0,  377,  203,    0,    0,  377,   16,    0,    0,  196,
    0,  197,  306,  306,    0,    6,    7,  198,    8,    9,
   10,  199,   12,   13,    0,    0,    0,  203,  204,   14,
    0,    0,    0,    0,    0,  306,  306,    0,    4,    0,
    5,    0,  306,  306,    6,  203,    0,    8,    0,    0,
   11,   12,  306,  306,   16,    0,  324,    0,    0,    0,
  204,    0,    0,    0,    0,    0,    0,    0,    0,  306,
    0,  306,  178,  178,    0,  178,  378,  178,    0,  341,
  344,  306,  204,    0,    0,    0,  378,  378,    0,  340,
    0,  178,  178,  178,  178,    0,  341,  324,   16,    0,
  306,    0,    0,    0,    0,  378,  378,    0,  204,  204,
    0,  378,  378,  306,  175,  344,    0,  378,  378,    0,
    0,    0,    0,    0,    0,  388,    0,    0,    0,  204,
  378,    0,  378,    0,    0,  174,    0,  307,  378,  266,
    0,  378,  204,    0,  324,  378,    0,    0,    0,    0,
    0,    0,  307,  307,    0,  178,    0,  344,  177,  177,
    0,  177,    0,  177,    0,    0,    0,  204,    0,    0,
    0,    0,    0,    0,    0,  307,  307,  177,  177,  177,
  177,  405,  307,  307,   16,  204,    0,    0,    0,    0,
    0,    0,  307,  307,    0,    0,    0,  175,    0,    0,
    0,   16,    0,    0,    0,    0,    0,    0,    0,  307,
    0,  307,    0,    0,    0,    0,  379,    0,  174,    0,
    0,  307,    0,    4,    0,  298,  379,  379,   16,    6,
    7,  198,    8,    9,   10,   11,   12,   13,    0,    0,
  307,  177,    0,   14,    0,  379,  379,   16,    0,    0,
    0,  379,  379,  307,    0,    0,    0,  379,  379,    0,
    0,    0,    0,   16,    0,    0,    0,  188,    0,    0,
  379,    4,  379,    5,    0,    0,    0,    6,  379,    0,
    8,  379,   16,   11,   12,  379,  245,    0,  178,  178,
    0,  178,  178,    0,    0,  178,  178,  178,  178,  178,
  178,  178,  178,  178,    0,  178,  178,  178,    0,  178,
    0,   16,    0,  370,    0,  196,    0,  372,  404,    0,
    0,    6,    7,  198,    8,    9,   10,  199,   12,   13,
  387,  175,    0,  175,  175,   14,   16,  175,  175,  175,
  175,  175,  175,  175,  175,  175,  373,    0,    0,    0,
    0,  175,  174,    0,  174,  174,    0,   16,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  408,    0,    0,
    0,    0,  174,    0,  177,  177,    0,  177,  177,   16,
    0,  177,  177,  177,  177,  177,  177,  177,  177,  177,
    0,  177,  177,  177,   16,  177,  413,    0,    0,    0,
    0,    4,    0,    5,  191,    0,    0,    6,    7,   16,
    8,    9,   10,   11,   12,   13,    0,  244,    4,  405,
    5,   14,    0,    0,    6,    7,    0,    8,    9,   10,
   11,   12,   13,   16,    0,    0,    0,    0,   14,    0,
    0,    0,  427,    0,    0,    4,    0,  298,   16,    0,
    0,    6,    7,  198,    8,    9,   10,   11,   12,   13,
    0,    0,  428,    0,    4,   14,  298,   16,    0,    0,
    6,    7,  198,    8,    9,   10,   11,   12,   13,  435,
  196,    0,  372,   16,   14,    0,    6,    7,  198,    8,
    9,   10,  199,   12,   13,    0,    0,    0,   16,  196,
   14,  372,    0,    0,    0,    6,    7,  198,    8,    9,
   10,  199,   12,   13,   16,    0,   15,    0,    0,   14,
    0,    0,    0,    0,    0,    0,    0,    0,    4,   16,
  298,    0,    0,   69,    6,    7,  198,    8,    9,   10,
   11,   12,   13,    0,   16,    0,    0,    0,   14,    0,
    0,    0,  127,  196,    0,  372,    0,    0,    0,    6,
    7,  198,    8,    9,   10,  199,   12,   13,  171,    0,
   16,    0,    0,   14,  196,    0,  372,    0,   16,    0,
    6,    7,  198,    8,    9,   10,  199,   12,   13,    0,
    0,    0,    0,    0,   14,    0,  196,  188,  372,    0,
    0,    0,    6,    7,  198,    8,    9,   10,  199,   12,
   13,  196,    0,  372,  220,    0,   14,    6,    7,  198,
    8,    9,   10,  199,   12,   13,    4,    0,  298,    0,
    0,   14,    6,    7,  198,    8,    9,   10,   11,   12,
   13,    0,    0,    0,    0,    0,   14,    0,    0,    0,
    4,    0,    5,  215,    0,    0,    6,    7,    0,    8,
    9,   10,   11,   12,   13,    4,    0,    5,    0,    0,
   14,    6,    7,    0,    8,    9,   10,   11,   12,   13,
    0,    0,    0,    0,    4,   14,    5,    0,    0,    0,
    6,    7,    0,    8,    9,   10,   11,   12,   13,    0,
    4,    0,    5,    0,   14,    0,    6,    7,    0,    8,
    9,   10,   11,   12,   13,  196,    0,  372,    0,    0,
   14,    6,    7,  198,    8,    9,   10,  199,   12,   13,
   71,    4,  208,    5,    0,   14,    0,    6,    7,    0,
    8,    9,   10,   11,   12,   13,    4,    0,    5,    0,
    0,   14,    6,    7,  101,    8,    9,   10,   11,   12,
   13,    4,    0,    5,  238,    0,   14,    6,    7,    0,
    8,    9,   10,   11,   12,   13,    0,  210,   71,    0,
    0,   14,    0,    0,    0,    0,    0,    4,    0,    5,
    0,    0,    0,    6,    0,  196,    8,  197,    0,   11,
   12,    6,    0,  198,    8,    0,    0,  199,   12,  210,
    0,  101,  150,  275,    0,    0,    0,    0,  394,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  210,    0,  292,    0,    0,    0,  407,  409,    0,
    0,   71,    0,    0,    0,    0,  315,    0,    0,  407,
  394,    0,    0,    0,    0,    0,    0,  210,  210,    0,
    0,    0,    0,  183,  409,    0,    0,    0,    0,    0,
  430,  275,    0,  394,    0,    0,    0,  409,  210,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  292,
    0,  210,  216,    0,    0,    0,    0,    0,    0,    0,
    0,   71,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  210,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  150,    0,    0,
    0,   71,    0,    0,  210,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  183,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          3,
   36,   54,   40,  175,   43,   40,   45,   56,   41,   61,
   41,   15,   58,   62,   18,   61,   45,   36,   80,  138,
  197,   60,   61,   62,   41,   59,   58,  340,   58,   61,
    0,   61,   40,   61,  374,  207,  161,  162,  405,  256,
  300,  258,   41,   41,   43,   41,   45,   43,   40,   45,
  256,   40,   41,  256,  257,   40,  262,  229,  398,  399,
   59,  428,   66,   59,   68,  256,  191,   40,  117,  329,
  330,  262,   45,   40,  387,   40,   42,  417,   45,   98,
  272,   47,   40,  255,  256,   44,   42,   43,  257,   45,
  256,   47,  211,  256,   41,  261,  356,   44,  267,  262,
   59,  256,  271,   59,  276,   44,  261,  262,  267,  257,
   40,   41,  271,  256,  176,  123,  123,  289,   59,  262,
   59,  298,   58,   59,   59,  129,   58,   41,  177,   61,
   44,   40,  256,   43,  123,   45,  256,  261,  262,  256,
  256,  194,  314,    3,  261,  262,   58,   59,   59,   59,
   45,  258,   59,  123,   41,   15,  160,  161,  162,  256,
  332,   60,   61,   62,   43,  123,   45,   40,   59,   58,
   59,  175,   40,  226,  227,   59,   59,  239,  256,  198,
  104,  105,  257,  232,  188,  189,   41,  191,   59,  257,
   59,  363,  256,  123,  257,  372,  256,  261,  262,  256,
  256,  373,  374,  207,   58,   40,  257,   58,   68,   41,
   59,  230,  265,   40,  263,  219,  125,  269,  258,  257,
  392,  393,  256,  260,  258,  256,  398,  399,  257,  258,
  276,   40,  404,  405,  273,  274,  275,  272,  287,  272,
  269,  269,  295,  260,  276,  417,  276,  419,  284,  257,
  123,  259,  260,  425,   40,  263,  428,  265,  266,  257,
  432,  269,  270,  299,  300,  257,  319,  320,  257,  267,
  259,  260,  257,  271,  263,  264,  265,  266,  267,  268,
  269,  270,  271,   40,  257,  258,  322,  323,  277,   61,
  257,  258,  257,  329,  330,  348,  123,  256,  175,  257,
  256,  259,  260,  339,  340,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  123,  258,  257,  256,  257,  277,
  356,  256,  358,  256,  256,  256,  258,  257,  188,  259,
  207,  256,  368,  263,  264,  265,  266,  267,  268,  269,
  270,  271,   40,   41,  276,  256,  256,  277,  257,  256,
  259,  387,  229,   59,  263,  256,  265,  266,  256,  363,
  269,  270,  257,  258,  400,  256,  123,  256,  257,  373,
  374,  257,  256,  256,  273,  274,  275,  257,  255,  256,
  123,  257,   40,  258,  257,  251,  259,  260,  392,  393,
  263,  269,   59,  266,  398,  399,  269,  270,   59,  276,
  404,  405,   59,   59,   59,  271,  272,  284,  258,   59,
   31,   59,  289,  417,   59,  419,   40,  256,  256,  256,
  125,  425,  299,  300,  428,  123,  256,  258,  432,   59,
  257,  297,  259,  256,  256,   41,  263,  314,  175,  266,
   59,  257,  269,  270,   59,  322,  323,   40,  257,   59,
  259,   59,  329,  330,  263,  332,  265,  266,   58,   40,
  269,  270,  339,  340,  256,   59,  257,  125,  258,  335,
  207,  257,  257,  259,   59,  258,   59,  263,  257,  356,
  266,  358,   40,  269,  270,   59,  363,  257,  354,  355,
  256,  368,  229,  256,  256,   41,  373,  374,   41,  123,
  257,  257,  259,  258,   59,  371,  263,  256,  265,  266,
  387,   40,  269,  270,  135,  392,  393,  138,  255,  256,
   59,  398,  399,  400,   59,   59,   58,  404,  405,   41,
  256,   59,  125,  256,   59,  257,  257,  257,   59,  276,
  417,  256,  419,  256,   41,   41,  257,  284,  425,  256,
   59,  428,  289,   41,  256,  432,   59,  256,   59,  257,
   59,  259,  299,  300,    0,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  123,  125,  215,  314,  175,  277,
  314,  126,  255,  404,   99,  322,  323,  339,   53,   39,
  211,   97,  329,  330,   -1,  332,  125,   -1,   -1,  257,
   -1,  259,  339,  340,   -1,  263,   -1,  265,  266,   -1,
  207,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,  356,
   -1,  358,   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,
   -1,  368,  229,  257,   -1,  259,  373,  374,   -1,  263,
  264,  265,  266,  267,  268,  269,  270,  271,   -1,   -1,
  387,   -1,   -1,  277,   -1,  392,  393,   -1,  255,  256,
   -1,  398,  399,  400,  257,   -1,  259,  404,  405,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  276,
  417,   -1,  419,   -1,  277,   -1,   -1,  284,  425,   -1,
   -1,  428,  289,   -1,   -1,  432,   40,   -1,   -1,  257,
   -1,  259,  299,  300,   -1,  263,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,   -1,   -1,  314,  175,  277,
   -1,   -1,   -1,   -1,   -1,  322,  323,   -1,  257,   -1,
  259,   -1,  329,  330,  263,  332,   -1,  266,   -1,   -1,
  269,  270,  339,  340,   40,   -1,  299,   -1,   -1,   -1,
  207,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,
   -1,  358,   40,   41,   -1,   43,  363,   45,   -1,  322,
  323,  368,  229,   -1,   -1,   -1,  373,  374,   -1,  123,
   -1,   59,   60,   61,   62,   -1,  339,  340,   40,   -1,
  387,   -1,   -1,   -1,   -1,  392,  393,   -1,  255,  256,
   -1,  398,  399,  400,   40,  358,   -1,  404,  405,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,   -1,   -1,  276,
  417,   -1,  419,   -1,   -1,   40,   -1,  284,  425,  125,
   -1,  428,  289,   -1,  387,  432,   -1,   -1,   -1,   -1,
   -1,   -1,  299,  300,   -1,  123,   -1,  400,   40,   41,
   -1,   43,   -1,   45,   -1,   -1,   -1,  314,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  322,  323,   59,   60,   61,
   62,  123,  329,  330,   40,  332,   -1,   -1,   -1,   -1,
   -1,   -1,  339,  340,   -1,   -1,   -1,  123,   -1,   -1,
   -1,   40,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,
   -1,  358,   -1,   -1,   -1,   -1,  363,   -1,  123,   -1,
   -1,  368,   -1,  257,   -1,  259,  373,  374,   40,  263,
  264,  265,  266,  267,  268,  269,  270,  271,   -1,   -1,
  387,  123,   -1,  277,   -1,  392,  393,   40,   -1,   -1,
   -1,  398,  399,  400,   -1,   -1,   -1,  404,  405,   -1,
   -1,   -1,   -1,   40,   -1,   -1,   -1,  123,   -1,   -1,
  417,  257,  419,  259,   -1,   -1,   -1,  263,  425,   -1,
  266,  428,   40,  269,  270,  432,  125,   -1,  256,  257,
   -1,  259,  260,   -1,   -1,  263,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,  273,  274,  275,   -1,  277,
   -1,   40,   -1,  125,   -1,  257,   -1,  259,  260,   -1,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  123,  257,   -1,  259,  260,  277,   40,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  123,   -1,   -1,   -1,
   -1,  277,  257,   -1,  259,  260,   -1,   40,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  125,   -1,   -1,
   -1,   -1,  277,   -1,  256,  257,   -1,  259,  260,   40,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,  273,  274,  275,   40,  277,  125,   -1,   -1,   -1,
   -1,  257,   -1,  259,  260,   -1,   -1,  263,  264,   40,
  266,  267,  268,  269,  270,  271,   -1,  256,  257,  123,
  259,  277,   -1,   -1,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,   40,   -1,   -1,   -1,   -1,  277,   -1,
   -1,   -1,  125,   -1,   -1,  257,   -1,  259,   40,   -1,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,   -1,  123,   -1,  257,  277,  259,   40,   -1,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  125,
  257,   -1,  259,   40,  277,   -1,  263,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,   -1,   -1,   40,  257,
  277,  259,   -1,   -1,   -1,  263,  264,  265,  266,  267,
  268,  269,  270,  271,   40,   -1,  123,   -1,   -1,  277,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   40,
  259,   -1,   -1,  125,  263,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   40,   -1,   -1,   -1,  277,   -1,
   -1,   -1,  125,  257,   -1,  259,   -1,   -1,   -1,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  125,   -1,
   40,   -1,   -1,  277,  257,   -1,  259,   -1,   40,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,   -1,   -1,   -1,  277,   -1,  257,  123,  259,   -1,
   -1,   -1,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  257,   -1,  259,  125,   -1,  277,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  257,   -1,  259,   -1,
   -1,  277,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   -1,   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,
  257,   -1,  259,  123,   -1,   -1,  263,  264,   -1,  266,
  267,  268,  269,  270,  271,  257,   -1,  259,   -1,   -1,
  277,  263,  264,   -1,  266,  267,  268,  269,  270,  271,
   -1,   -1,   -1,   -1,  257,  277,  259,   -1,   -1,   -1,
  263,  264,   -1,  266,  267,  268,  269,  270,  271,   -1,
  257,   -1,  259,   -1,  277,   -1,  263,  264,   -1,  266,
  267,  268,  269,  270,  271,  257,   -1,  259,   -1,   -1,
  277,  263,  264,  265,  266,  267,  268,  269,  270,  271,
   18,  257,  175,  259,   -1,  277,   -1,  263,  264,   -1,
  266,  267,  268,  269,  270,  271,  257,   -1,  259,   -1,
   -1,  277,  263,  264,   42,  266,  267,  268,  269,  270,
  271,  257,   -1,  259,  207,   -1,  277,  263,  264,   -1,
  266,  267,  268,  269,  270,  271,   -1,  175,   66,   -1,
   -1,  277,   -1,   -1,   -1,   -1,   -1,  257,   -1,  259,
   -1,   -1,   -1,  263,   -1,  257,  266,  259,   -1,  269,
  270,  263,   -1,  265,  266,   -1,   -1,  269,  270,  207,
   -1,   99,  100,  256,   -1,   -1,   -1,   -1,  373,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  229,   -1,  276,   -1,   -1,   -1,  392,  393,   -1,
   -1,  129,   -1,   -1,   -1,   -1,  289,   -1,   -1,  404,
  405,   -1,   -1,   -1,   -1,   -1,   -1,  255,  256,   -1,
   -1,   -1,   -1,  151,  419,   -1,   -1,   -1,   -1,   -1,
  425,  314,   -1,  428,   -1,   -1,   -1,  432,  276,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  332,
   -1,  289,  180,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  189,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  215,   -1,   -1,
   -1,  219,   -1,   -1,  332,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  241,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=277;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"id","cte","If","then","Else","end_if","out",
"fun","Return","BREAK","i32","when","For","CONTINUE","f32","cadena",
"menorigual","mayorigual","distinto","opasignacion","Const",
};
final static String yyrule[] = {
"$accept : programa",
"programa : encabezado_prog bloque_sentencias",
"encabezado_prog : id",
"bloque_sentencias : bloque_sentencias '{' sentencia '}'",
"bloque_sentencias : '{' sentencia '}'",
"bloque_sentencias : '{' sentencia",
"bloque_sentencias : sentencia '}'",
"declaracion_const : Const lista_de_asignacion_const ';'",
"declaracion_const : Const lista_de_asignacion_const error",
"declaracion_const : Const ';' error",
"lista_de_asignacion_const : decl_const",
"lista_de_asignacion_const : lista_de_asignacion_const ',' decl_const",
"decl_const : id op_asignacion cte",
"decl_const : id op_asignacion error",
"decl_const : id cte error",
"decl_const : id error",
"bloque_sentencias_For : sentencias_For",
"bloque_sentencias_For : bloque_sentencias_For sentencias_For",
"sentencia : declarativas",
"sentencia : ejecutables",
"sentencia : sentencia declarativas",
"sentencia : sentencia ejecutables",
"declarativas : tipo lista_de_variables ';'",
"declarativas : tipo lista_de_variables error",
"declarativas : tipo error",
"declarativas : declaracion_func",
"declarativas : declaracion_const",
"declarativas : sentencia_when",
"bloque_ejecutables : bloque_ejecutables ejecutables",
"bloque_ejecutables : ejecutables",
"ejecutables : asignacion",
"ejecutables : salida",
"ejecutables : sentencia_If",
"ejecutables : expresion_For",
"ejecutables : sentencia_BREAK error",
"ejecutables : sentencia_CONTINUE error",
"lista_de_variables : id",
"lista_de_variables : lista_de_variables ',' id",
"lista_de_variables : lista_de_variables id error",
"encabezado_func : fun id '('",
"encabezado_func : fun '(' error",
"parametro : tipo id",
"parametro : id error",
"asig_fun : ':' tipo",
"asig_fun :",
"cola_func : ')' asig_fun '{' cuerpo_fun '}'",
"declaracion_func : encabezado_func parametro cola_func",
"declaracion_func : encabezado_func parametro ',' parametro cola_func",
"declaracion_func : encabezado_func parametro ',' parametro ',' parametro cola_func",
"declaracion_func : encabezado_func cola_func",
"ret_fun : Return '(' expresion ')' ';'",
"ret_fun : Return expresion ')' ';'",
"ret_fun : Return '(' expresion ';'",
"ret_fun : Return expresion ';'",
"ret_fun : Return '(' expresion ')' error",
"cuerpo_fun : bloque_sentencias_funcion",
"ejecutables_funcion : asignacion",
"ejecutables_funcion : sentencia_if_funcion",
"ejecutables_funcion : salida",
"ejecutables_funcion : sentencia_for_funcion",
"ejecutables_funcion : ret_fun",
"ejecutables_funcion : sentencia_BREAK error",
"ejecutables_funcion : sentencia_CONTINUE error",
"bloque_sentencias_ejecutables_funcion : bloque_sentencias_ejecutables_funcion ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion : ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion ejecutables_funcion",
"bloque_sentencias_funcion : bloque_sentencias_funcion declarativas",
"bloque_sentencias_funcion : ejecutables_funcion",
"bloque_sentencias_funcion : declarativas",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion end_if ';'",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion Else cuerpo_Else_funcion end_if ';'",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion Else cuerpo_Else_funcion end_if error",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion error",
"sentencia_if_funcion : If condicion_if then cuerpo_If_funcion Else cuerpo_Else_funcion error ';'",
"sentencia_if_funcion : If condicion_if cuerpo_If_funcion error",
"cuerpo_If_funcion : '{' bloque_sentencias_ejecutables_funcion '}'",
"cuerpo_If_funcion : ejecutables_funcion",
"cuerpo_Else_funcion : '{' bloque_sentencias_ejecutables_funcion '}'",
"cuerpo_Else_funcion : ejecutables_funcion",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion end_if ';'",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion Else cuerpo_Else_for_funcion end_if ';'",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion Else cuerpo_Else_for_funcion end_if error",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion error",
"sentencia_if_for_funcion : If condicion_if then cuerpo_If_for_funcion Else cuerpo_Else_for_funcion error ';'",
"sentencia_if_for_funcion : If condicion_if cuerpo_If_for_funcion error",
"cuerpo_If_for_funcion : '{' bloque_sentencias_For_funcion '}'",
"cuerpo_If_for_funcion : sentencias_For_funcion",
"cuerpo_Else_for_funcion : '{' bloque_sentencias_For_funcion '}'",
"cuerpo_Else_for_funcion : sentencias_For_funcion",
"cola_For_funcion : '{' bloque_sentencias_For_funcion '}' ';'",
"cola_For_funcion : sentencias_For_funcion",
"sentencia_for_funcion : For '(' id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For_funcion",
"sentencia_for_funcion : For id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For_funcion error",
"sentencia_for_funcion : For id op_asignacion cte ';' condicion_for ';' signo id cola_For_funcion error",
"sentencia_for_funcion : For '(' id op_asignacion cte ':' condicion_for ':' signo id ')' cola_For_funcion error",
"sentencia_for_funcion : id ':' For '(' id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For_funcion",
"sentencias_For_funcion : asignacion",
"sentencias_For_funcion : salida",
"sentencias_For_funcion : sentencia_for_funcion",
"sentencias_For_funcion : ret_fun",
"sentencias_For_funcion : sentencia_BREAK",
"sentencias_For_funcion : sentencia_CONTINUE",
"sentencias_For_funcion : sentencia_if_for_funcion",
"sentencias_For_funcion : declarativas error",
"bloque_sentencias_For_funcion : sentencias_For_funcion",
"bloque_sentencias_For_funcion : bloque_sentencias_For_funcion sentencias_For_funcion",
"op_asignacion : opasignacion",
"op_asignacion : ':' '='",
"op_asignacion : '='",
"asignacion : id op_asignacion expresion ';'",
"asignacion : id op_asignacion expresion error",
"asignacion : id op_asignacion expresion_For Else cte ';'",
"asignacion : id op_asignacion expresion_For error",
"salida : out '(' cadena ')' ';'",
"salida : out '(' cadena ')' error",
"salida : out '(' cadena error ';'",
"salida : out cadena error ';'",
"salida : '(' cadena error",
"salida : out '(' ')' error ';'",
"sentencia_If : If condicion_if then cuerpo_If end_if ';'",
"sentencia_If : If condicion_if then cuerpo_If Else cuerpo_Else end_if ';'",
"sentencia_If : If condicion_if then cuerpo_If Else cuerpo_Else end_if error",
"sentencia_If : If condicion_if then cuerpo_If error",
"sentencia_If : If condicion_if then cuerpo_If Else cuerpo_Else error ';'",
"sentencia_If : If condicion_if cuerpo_If error",
"cuerpo_If : '{' bloque_ejecutables '}'",
"cuerpo_If : ejecutables",
"cuerpo_Else : '{' bloque_ejecutables '}'",
"cuerpo_Else : ejecutables",
"sentencia_if_for : If condicion_if then cuerpo_If_for end_if ';'",
"sentencia_if_for : If condicion_if then cuerpo_If_for Else cuerpo_Else_for end_if ';'",
"sentencia_if_for : If condicion_if then cuerpo_If_for Else cuerpo_Else_for end_if error",
"sentencia_if_for : If condicion_if then cuerpo_If_for error",
"sentencia_if_for : If condicion_if then cuerpo_If_for Else cuerpo_Else_for error ';'",
"sentencia_if_for : If condicion_if cuerpo_If_for error",
"cuerpo_If_for : '{' bloque_sentencias_For '}'",
"cuerpo_If_for : sentencias_For",
"cuerpo_Else_for : '{' bloque_sentencias_For '}'",
"cuerpo_Else_for : sentencias_For",
"sentencia_when : when '(' condicion_for ')' then cuerpo_when ';'",
"sentencia_when : when condicion_for ')' then cuerpo_when ';' error",
"sentencia_when : when '(' condicion_for then cuerpo_when ';' error",
"sentencia_when : when '(' condicion_for ')' cuerpo_when ';' error",
"cuerpo_when : '{' sentencia '}'",
"cuerpo_when : '{' sentencia error",
"cuerpo_when : sentencia '}' error",
"cola_For : '{' bloque_sentencias_For '}' ';'",
"cola_For : sentencias_For",
"encabezado_For : For '(' id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For",
"encabezado_For : For id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For error",
"encabezado_For : For id op_asignacion cte ';' condicion_for ';' signo id cola_For error",
"encabezado_For : For '(' id op_asignacion cte ':' condicion_for ':' signo id ')' cola_For error",
"encabezado_For : id ':' For '(' id op_asignacion cte ';' condicion_for ';' signo id ')' cola_For",
"condicion_for : id comparador cte",
"signo : '+'",
"signo : '-'",
"sentencias_For : asignacion",
"sentencias_For : salida",
"sentencias_For : expresion_For",
"sentencias_For : sentencia_if_for",
"sentencias_For : sentencia_BREAK",
"sentencias_For : sentencia_CONTINUE",
"sentencias_For : declarativas error",
"sentencias_For : ret_fun error",
"expresion_For : encabezado_For",
"sentencia_BREAK : BREAK ';'",
"sentencia_BREAK : BREAK cte ';'",
"sentencia_BREAK : BREAK error",
"sentencia_CONTINUE : CONTINUE ';'",
"sentencia_CONTINUE : CONTINUE ':' id ';'",
"sentencia_CONTINUE : CONTINUE id ';' error",
"sentencia_CONTINUE : CONTINUE error",
"condicion_if : '(' expresion_relacional ')'",
"condicion_if : expresion_relacional ')'",
"condicion_if : '(' expresion_relacional",
"condicion_if : expresion_relacional",
"expresion_relacional : expresion comparador expresion",
"expresion : expresion signo termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : id",
"factor : cte",
"factor : '-' cte",
"comparador : '<'",
"comparador : '>'",
"comparador : menorigual",
"comparador : mayorigual",
"comparador : '='",
"comparador : distinto",
"tipo : i32",
"tipo : f32",
};

//#line 360 "gramatica.y"

private AnalizadorLexico lexico;
private AnalizadorSintactico sintactico;

public void setLexico(AnalizadorLexico lexico) { this.lexico = lexico; }

public void setSintactico(AnalizadorSintactico sintactico) { this.sintactico = sintactico; }

public AnalizadorLexico getLexico() { return this.lexico; }

public AnalizadorSintactico getSintactico() { return this.sintactico; }

public int yylex() {
    int token = lexico.procesarYylex();
    if (lexico.getRefTablaSimbolos() != -1)
        yylval = new ParserVal(lexico.getRefTablaSimbolos());
    return token;
}

public void yyerror(String string) {
	//sintactico.addErrorSintactico("par: " + string);
}


//#line 903 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 5:
//#line 28 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar el bloque.");}
break;
case 6:
//#line 29 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir el bloque.");}
break;
case 7:
//#line 32 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una declaración de CONSTANTE. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 8:
//#line 33 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ; al final de la declaracion de constantes.");}
break;
case 9:
//#line 34 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): No se reconoce una lista de constantes.");}
break;
case 13:
//#line 42 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta constante luego de la asignacion.");}
break;
case 14:
//#line 43 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta el operador asignacion luego del identificador.");}
break;
case 15:
//#line 44 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): Falta la asignacion luego del identificador.");}
break;
case 22:
//#line 60 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una declaración de variable. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 23:
//#line 61 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): falta ';' al final de la declaración de variable."); }
break;
case 24:
//#line 62 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA) + "): falta el identificador de variable"); }
break;
case 34:
//#line 77 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 35:
//#line 78 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 38:
//#line 83 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta una ',' entre identIficadores."); }
break;
case 39:
//#line 86 "gramatica.y"
{ sintactico.addAnalisis( "Se reconocio declaracion de funcion (Línea " + AnalizadorLexico.LINEA + ")" ); }
break;
case 40:
//#line 87 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. ENC_FUN (Línea " + AnalizadorLexico.LINEA + "): problema en la definición de la función."); }
break;
case 42:
//#line 91 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. PARAM(Línea " + AnalizadorLexico.LINEA + "): falta TIPO en parametros."); }
break;
case 44:
//#line 96 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. COLA_FUN(Línea " + AnalizadorLexico.LINEA + "): falta TIPO "); }
break;
case 45:
//#line 98 "gramatica.y"
{ sintactico.addAnalisis("Se reconoce TIPO funcion (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 48:
//#line 104 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. DECLARACION_FUN(Línea " + AnalizadorLexico.LINEA + "): no se permiten mas de 2 parametros "); }
break;
case 50:
//#line 108 "gramatica.y"
{ sintactico.addAnalisis("Se reconoce retorno de funcion(Línea " + AnalizadorLexico.LINEA + ") "); }
break;
case 51:
//#line 109 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN1 (Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 52:
//#line 110 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN2(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 53:
//#line 111 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN3(Línea " + AnalizadorLexico.LINEA + "): problema en el retorno de la funcion"); }
break;
case 54:
//#line 112 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. RETURN_FUN4(Línea " + AnalizadorLexico.LINEA + "): falta ; "); }
break;
case 61:
//#line 123 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias break fuera de una sentencia for "); }
break;
case 62:
//#line 124 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): no se permiten sentencias continue fuera de una sentencia for "); }
break;
case 69:
//#line 138 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 70:
//#line 139 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 71:
//#line 140 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 72:
//#line 141 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 73:
//#line 142 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 74:
//#line 143 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta la declaración de then."); }
break;
case 79:
//#line 154 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 80:
//#line 155 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 81:
//#line 156 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 82:
//#line 157 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 83:
//#line 158 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 84:
//#line 159 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta la declaración de then."); }
break;
case 91:
//#line 175 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 92:
//#line 176 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 93:
//#line 177 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 94:
//#line 178 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR3(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 95:
//#line 179 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 103:
//#line 190 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 106:
//#line 200 "gramatica.y"
{ yyval.sval = new String("=:"); }
break;
case 107:
//#line 201 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP1(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 108:
//#line 202 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): error en el op de ASIG"); }
break;
case 110:
//#line 207 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP(Línea " + (AnalizadorLexico.LINEA) + "): falta ';' luego de la ASIG."); }
break;
case 112:
//#line 209 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. OP2(Línea " + (AnalizadorLexico.LINEA) + "): problema en devolver valor por defecto  "); }
break;
case 114:
//#line 213 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de la impresión de cadena."); }
break;
case 115:
//#line 214 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): cierre erróneo de la lista de parámetros de out."); }
break;
case 116:
//#line 215 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): los parámetros de out deben estar entre paréntesis."); }
break;
case 117:
//#line 216 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): se esperaba out, se encontró '('."); }
break;
case 118:
//#line 217 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta declarar una cadena para PRINT."); }
break;
case 119:
//#line 221 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 120:
//#line 222 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 121:
//#line 223 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 122:
//#line 224 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 123:
//#line 225 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 124:
//#line 226 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta la declaración de then."); }
break;
case 129:
//#line 237 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 130:
//#line 238 "gramatica.y"
{ sintactico.addAnalisis("Se reconoció una sentencia If. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 131:
//#line 239 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If1 (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de end_if."); }
break;
case 132:
//#line 240 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If2 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 133:
//#line 241 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If3 (Línea " + AnalizadorLexico.LINEA + "): falta cierre end_if; "); }
break;
case 134:
//#line 242 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. If4 (Línea " + AnalizadorLexico.LINEA + "): falta la declaración de then."); }
break;
case 139:
//#line 253 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia when");}
break;
case 140:
//#line 254 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta abrir paréntesis la condicion"); }
break;
case 141:
//#line 255 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta paréntesis de cierre en la condicion."); }
break;
case 142:
//#line 256 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-2) + "): falta la declaración de then."); }
break;
case 144:
//#line 260 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta cerrar la llave del bloque."); }
break;
case 145:
//#line 261 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta abrir la llave del bloque"); }
break;
case 148:
//#line 269 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio sentencia FOR. (Línea " + AnalizadorLexico.LINEA + ")"); }
break;
case 149:
//#line 270 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR1(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 150:
//#line 271 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR2(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 151:
//#line 272 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. FOR3(Línea " + AnalizadorLexico.LINEA + "): problema en la declaracion FOR"); }
break;
case 152:
//#line 273 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia for con etiqueta(Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 162:
//#line 292 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten sentencias declarativas adentro del For"); }
break;
case 163:
//#line 293 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + (AnalizadorLexico.LINEA-1) + "): no se permiten retornos fuera de una funcion"); }
break;
case 165:
//#line 300 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia break (Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 166:
//#line 301 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia break con retorno de valor (Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 167:
//#line 302 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego de BREAK."); }
break;
case 168:
//#line 305 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia continue (Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 169:
//#line 306 "gramatica.y"
{ sintactico.addAnalisis("Se reconocio una sentencia continue con etiquetado(Línea " + AnalizadorLexico.LINEA + ")");}
break;
case 170:
//#line 307 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ':'CONTINUE."); }
break;
case 171:
//#line 308 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta ';' luego del CONTINUE "); }
break;
case 173:
//#line 312 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 174:
//#line 313 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 175:
//#line 314 "gramatica.y"
{ sintactico.addErrorSintactico("SyntaxError. (Línea " + AnalizadorLexico.LINEA + "): falta PARENTESIS EN If "); }
break;
case 183:
//#line 330 "gramatica.y"
{
                        sintactico.setTipo(sintactico.getTipoFromTS(val_peek(0).ival));
                        if (sintactico.getTipo().equals("LONG"))
                             sintactico.verificarRangoEnteroLargo(val_peek(0).ival);
                  }
break;
case 184:
//#line 335 "gramatica.y"
{
                        sintactico.setNegativoTablaSimb(val_peek(0).ival);
                    }
break;
case 185:
//#line 340 "gramatica.y"
{ yyval.sval = new String("<"); }
break;
case 186:
//#line 341 "gramatica.y"
{ yyval.sval = new String(">"); }
break;
case 187:
//#line 342 "gramatica.y"
{ yyval.sval = new String("<="); }
break;
case 188:
//#line 343 "gramatica.y"
{ yyval.sval = new String(">="); }
break;
case 189:
//#line 344 "gramatica.y"
{ yyval.sval = new String("="); }
break;
case 190:
//#line 345 "gramatica.y"
{ yyval.sval = new String("=!"); }
break;
case 191:
//#line 348 "gramatica.y"
{
                    sintactico.setTipo("i32");
                    yyval.sval = new String("i32");
                }
break;
case 192:
//#line 352 "gramatica.y"
{
                    sintactico.setTipo("f32");
                    yyval.sval = new String("f32");
                }
break;
//#line 1464 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
